{"predictions": [["recommender", "systems", "<sep>", "association", "mining", "<sep>", "association", "rules", "<sep>", "collaborative", "filtering", "<sep>", "cosine", "similarity", "<sep>", "data", "mining"], ["semantics", "<sep>", "event", "logic", "<sep>", "puzzles", "<sep>", "situation", "calculus", "<sep>", "event", "calculus", "<sep>", "event", "semantics", "<sep>", "temporal", "logic"], ["zoo", "world", "<sep>", "causal", "calculator", "<sep>", "action", "domains", "<sep>", "logic", "modelling", "<sep>", "agent", "based", "simulation"], ["subsumption", "architecture", "<sep>", "circumscription", "<sep>", "nonmonotonic", "reasoning", "<sep>", "logic", "based", "control", "<sep>", "logic", "based", "control"], ["tree", "width", "<sep>", "tree", "coloring", "<sep>", "graph", "coloring", "<sep>", "graph", "coloring"], ["bgp", "<sep>", "routing", "<sep>", "network", "engineering", "<sep>", "simulation", "<sep>", "network", "modeling"], ["bayesian", "networks", "<sep>", "collective", "learning", "<sep>", "distributed", "data", "mining"], ["web", "search", "engines", "<sep>", "information", "retrieval", "<sep>", "evaluation", "method", "<sep>", "evaluation", "method", "<sep>", "web", "search", "engine", "evaluation"], ["minimum", "transversal", "<sep>", "hypergraph", "<sep>", "<digit>", "hitting", "set", "<sep>", "vertex", "cover", "<sep>", "exponential", "space", "<sep>", "polynomial", "space", "<sep>", "graph", "algorithm"], ["mobile", "telephony", "<sep>", "c", "cells", "<sep>", "m", "probability", "distribution", "vectors", "<sep>", "approximation", "algorithms", "<sep>", "wireless", "networks"], ["simplex", "method", "<sep>", "cycling", "<sep>", "linear", "programming", "<sep>", "anti", "cycling", "<sep>", "multiple", "criteria", "analysis"], ["continuous", "testing", "<sep>", "software", "testing", "<sep>", "software", "testing", "<sep>", "software", "testing"], ["test", "input", "generation", "<sep>", "java", "pathfinder", "<sep>", "model", "checking", "<sep>", "symbolic", "execution", "<sep>", "white", "box", "testing", "<sep>", "white", "box", "testing", "<sep>", "white", "box", "testing", "<sep>", "test", "generation", "<sep>", "test", "generation"], ["multi", "mode", "systems", "<sep>", "program", "steering", "<sep>", "machine", "learning", "<sep>", "robot", "control", "<sep>", "software", "evolution"], ["model", "checking", "<sep>", "xml", "<sep>", "spin", "<sep>", "wsat", "<sep>", "ltl", "<sep>", "wsat", "<sep>", "spin", "<sep>", "wsat", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "ltl", "<sep>", "wsat", "<sep>", "xml", "data", "exchange"], ["clustering", "<sep>", "k", "median", "<sep>", "approximation", "algorithms", "<sep>", "unsupervised", "learning", "<sep>", "k", "median", "problem"], ["clustering", "<sep>", "approximation", "algorithms", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms"], ["approximation", "algorithms", "<sep>", "clustering", "<sep>", "high", "dimensional", "spaces", "<sep>", "data", "mining", "<sep>", "minimum", "spanning", "trees", "<sep>", "randomized", "algorithms"], ["ale", "<sep>", "node", "repositioning", "<sep>", "mesh", "generation", "<sep>", "unstructured", "meshes", "<sep>", "mesh", "untangling"], ["cooperative", "caching", "<sep>", "paging", "<sep>", "online", "algorithms"], ["inverting", "functions", "<sep>", "folds", "<sep>", "trees", "<sep>", "well", "foundedness", "<sep>", "reductivity", "<sep>", "s", "theory", "<sep>", "generalised", "theorem", "<sep>", "inverting", "<sep>", "reductivity", "<sep>", "reductivity", "<sep>", "reductivity", "<sep>", "is"], ["conjugate", "gradient", "method", "<sep>", "shifted", "systems", "<sep>", "tikhonov", "regularization", "<sep>", "least", "squares", "problems", "<sep>", "multishift", "cgls", "method", "<sep>", "lanczos", "rounding", "error", "<sep>", "roundoff", "error", "<sep>", "roundoff", "error", "<sep>", "error", "analysis", "<sep>", "lanczos", "rounding", "error", "<sep>", "roundoff", "error", "<sep>", "roundoff", "error", "<sep>", "error", "analysis", "<sep>", "error", "analysis", "<sep>", "lattice", "quantum", "chromodynamics"], ["lanczos", "bidiagonalization", "<sep>", "matrix", "free", "algorithm", "<sep>", "singular", "vector", "<sep>", "singular", "perturbation", "<sep>", "singular", "perturbation"], ["duration", "calculus", "<sep>", "linear", "temporal", "logic", "<sep>", "real", "time", "systems", "<sep>", "timed", "automata"], ["competitive", "ratio", "<sep>", "seat", "reservation", "<sep>", "on", "line", "algorithms", "<sep>", "competitive", "analysis"], ["admission", "control", "<sep>", "scheduling", "<sep>", "real", "time", "<sep>", "performance", "<sep>", "algorithms", "<sep>", "design", "<sep>", "experimentation", "<sep>", "theory", "<sep>", "real", "time", "scheduling"], ["council", "election", "<sep>", "distributed", "algorithms", "<sep>", "distributed", "algorithms"], ["rsa", "<sep>", "oaep", "<sep>", "chosen", "ciphertext", "attack", "<sep>", "random", "oracle", "model", "<sep>", "cryptography"], ["language", "models", "<sep>", "information", "retrieval", "<sep>", "clustering", "<sep>", "interpolation", "<sep>", "corpus", "structure"], ["relational", "algebra", "<sep>", "query", "languages", "<sep>", "sparse", "equations", "<sep>", "powerset", "algebra", "<sep>", "complexity", "<sep>", "data", "structures", "<sep>", "data", "structures", "<sep>", "data", "structures", "<sep>", "data", "structures", "<sep>", "data", "structures", "<sep>", "query", "languages"], ["hardness", "<sep>", "<digit>", "coloring", "<sep>", "np", "hardness", "<sep>", "pcp", "<sep>", "chromatic", "number", "<sep>", "greedy", "algorithm", "<sep>", "graph", "coloring"], ["constrained", "gradients", "<sep>", "data", "mining", "<sep>", "data", "cube", "<sep>", "data", "mining", "<sep>", "data", "mining"], ["erlang", "<sep>", "model", "checking", "<sep>", "labelled", "transition", "systems", "<sep>", "mutual", "exclusion", "<sep>", "non", "starvation", "<sep>", "liveness", "<sep>", "formal", "verification", "<sep>", "formal", "verification", "<sep>", "formal", "verification", "<sep>", "model", "checking"], ["partial", "equivalence", "relations", "<sep>", "algebraic", "lattices", "<sep>", "cartesian", "closed", "domain", "theory", "<sep>", "higher", "order", "dependent", "type", "theory", "<sep>", "higher", "order", "dependent", "type", "theory", "<sep>", "partial", "equivalence", "relations", "<sep>", "category", "theory"], ["two", "level", "languages", "<sep>", "partial", "evaluation", "<sep>", "lambda", "calculus", "<sep>", "denotational", "semantics", "<sep>", "functor", "categories", "<sep>", "functor", "categories", "<sep>", "functor", "categories", "<sep>", "functor", "categories", "<sep>", "functor", "categories", "<sep>", "functor", "categories", "<sep>", "functor", "categories", "<sep>", "model", "transformations"], ["poset", "<sep>", "linear", "logic", "<sep>", "coherence", "space", "<sep>", "hypercoherences", "<sep>", "intuitionistic", "logic", "<sep>", "intuitionistic", "logic", "<sep>", "intuitionistic", "logic"], ["object", "calculi", "<sep>", "denotational", "semantics", "<sep>", "object", "calculus", "<sep>", "specification", "logic", "<sep>", "specification", "languages", "<sep>", "object", "oriented", "programming"], ["coalescing", "<sep>", "algorithms", "<sep>", "experimentation", "<sep>", "performance", "<sep>", "theory", "<sep>", "graph", "coloring", "register", "allocators", "<sep>", "optimistic", "coalescing", "<sep>", "optimistic", "coalescing", "<sep>", "graph", "coloring", "problem", "<sep>", "graph", "coloring", "problem", "<sep>", "graph", "coloring", "problem", "<sep>", "graph", "coloring", "problem", "<sep>", "graph", "coloring", "problem", "<sep>", "graph", "coloring", "problem"], ["mobile", "agents", "<sep>", "stable", "computation", "<sep>", "stable", "computation", "<sep>", "conjugating", "automata", "<sep>", "finite", "state", "automata", "<sep>", "finite", "state", "automata"], ["group", "key", "exchange", "<sep>", "forward", "secrecy", "<sep>", "asynchronous", "communication", "<sep>", "distributed", "computing"], ["group", "invariant", "computation", "<sep>", "stochastic", "completion", "<sep>", "shiftable", "twistable", "functions", "<sep>", "contour", "completion", "<sep>", "contour", "completion", "<sep>", "contour", "completion", "<sep>", "contour", "completion", "<sep>", "stochastic", "geometry", "<sep>", "stochastic", "geometry"], ["metering", "scheme", "<sep>", "secret", "sharing", "<sep>", "cryptography", "<sep>", "linear", "algebraic", "method", "<sep>", "distributed", "source", "coding"], ["finite", "state", "machines", "<sep>", "xml", "<sep>", "regular", "languages", "<sep>", "register", "automata", "<sep>", "monadic", "second", "order", "logic", "<sep>", "register", "automata", "<sep>", "register", "automata", "<sep>", "register", "automata", "<sep>", "nondeterministic", "automata"], ["metalogical", "<sep>", "membership", "equational", "logic", "<sep>", "maude", "<sep>", "formal", "semantics", "<sep>", "reflective", "frameworks"], ["scheduling", "<sep>", "on", "line", "<sep>", "randomized", "<sep>", "gene", "search", "<sep>", "competitive", "ratio", "<sep>", "analysis", "of", "algorithms"], ["communicating", "processes", "<sep>", "implementation", "relation", "<sep>", "csp", "<sep>", "realisability", "<sep>", "formal", "verification", "<sep>", "model", "checking"], ["steganography", "<sep>", "information", "theory", "<sep>", "information", "theory", "<sep>", "information", "theory"], ["minimization", "<sep>", "np", "multifunctions", "<sep>", "primitive", "recursive", "functions", "<sep>", "nondeterministic", "polynomial", "time", "computable", "partial", "multifunctions", "<sep>", "computational", "complexity"], ["realizability", "<sep>", "linear", "logic", "<sep>", "models", "<sep>", "bounded", "linear", "logic", "<sep>", "models", "<sep>", "models", "<sep>", "<unk>", "<sep>", "models", "<sep>", "models", "<sep>", "like", "<sep>", "like"], ["space", "efficient", "<sep>", "convex", "hull", "<sep>", "computational", "geometry", "<sep>", "planar", "point", "set"], ["electronic", "jury", "voting", "<sep>", "mix", "networks", "<sep>", "homomorphic", "encryption", "<sep>", "cryptography", "<sep>", "parallel", "algorithms"], ["sensor", "networks", "<sep>", "target", "detection", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "deployment", "<sep>", "sensor", "networks"], ["symmetry", "group", "<sep>", "beta", "lattice", "<sep>", "quasiperiodic", "function", "<sep>", "beta", "rotation", "<sep>", "beta", "lattice", "<sep>", "beta", "lattice", "<sep>", "beta", "lattice", "<sep>", "beta", "lattice", "<sep>", "beta", "lattice", "<sep>", "beta", "algebra", "<sep>", "beta", "algebra", "<sep>", "beta", "algebra", "<sep>", "beta", "lattice", "<sep>", "beta", "basis"], ["graph", "properties", "<sep>", "data", "mining", "<sep>", "property", "mining", "<sep>", "property", "space"], ["simulated", "execution", "<sep>", "distributed", "algorithms", "<sep>", "theorem", "proving"], ["approximation", "algorithms", "<sep>", "linear", "programming", "<sep>", "flow", "control", "<sep>", "distributed", "algorithms", "<sep>", "network", "flow", "control", "<sep>", "distributed", "algorithms", "<sep>", "network", "flow", "control", "<sep>", "distributed", "algorithms", "<sep>", "network", "flow", "control", "<sep>", "network", "optimization", "<sep>", "network", "optimization"], ["laurent", "polynomials", "<sep>", "framelet", "filter", "banks", "<sep>", "symmetric", "filters", "<sep>", "wavelet", "frame", "<sep>", "symmetric", "function", "<sep>", "b", "spline", "filters", "<sep>", "high", "pass", "image", "processing", "<sep>", "symmetric", "and", "two", "supported", "filters", "<sep>", "symmetric", "and", "two", "pass", "filters", "<sep>", "symmetric", "and", "two", "supported", "filters"], ["termination", "<sep>", "prolog", "<sep>", "logic", "programming", "<sep>", "query", "mapping", "<sep>", "constraint", "based", "termination", "<sep>", "program", "analysis"], ["symbolic", "model", "checking", "<sep>", "probabilistic", "model", "checking", "<sep>", "markov", "chains", "<sep>", "markov", "decision", "processes", "<sep>", "binary", "decision", "diagrams", "<sep>", "pctl", "<sep>", "csl", "<sep>", "bdds", "<sep>", "bdds", "<sep>", "bdds", "<sep>", "symbolic", "techniques", "<sep>", "probabilistic", "model", "checking"], ["test", "sequence", "generation", "<sep>", "model", "checking", "<sep>", "dynamic", "transition", "relations", "<sep>", "temporal", "logic", "<sep>", "symbolic", "model", "checking", "<sep>", "test", "sequence", "partitioning"], ["group", "key", "agreement", "<sep>", "group", "communication", "<sep>", "performance", "analysis", "<sep>", "peer", "to", "peer", "networks"], ["congestion", "control", "<sep>", "tcp", "<sep>", "backbone", "<sep>", "network", "on", "chip", "<sep>", "performance", "evaluation"], ["naming", "<sep>", "dns", "<sep>", "middleboxes", "<sep>", "dhts", "<sep>", "dhts", "<sep>", "distributed", "hash", "tables", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet", "architecture", "<sep>", "internet"], ["inverse", "kinematics", "<sep>", "gaussian", "process", "<sep>", "motion", "capture", "<sep>", "motion", "capture", "<sep>", "computer", "vision", "<sep>", "style", "based", "model"], ["parametric", "search", "<sep>", "quicksort", "<sep>", "parallel", "sorting", "<sep>", ".", "distance", "<sep>", "binary", "search", "<sep>", "parametric", "search", "algorithms"], ["end", "to", "end", "delay", "<sep>", "high", "speed", "networks", "<sep>", "coordinated", "scheduling", "<sep>", "weighted", "fair", "queueing", "<sep>", "earliest", "deadline", "first", "<sep>", "quality", "of", "service"], ["juntas", "<sep>", "random", "walks", "<sep>", "permutation", "queries", "<sep>", "boolean", "functions", "<sep>", "adaptive", "testing"], ["adaptive", "algorithm", "<sep>", "triangulation", "<sep>", "iso", "surface", "<sep>", "triangular", "mesh", "<sep>", "topology", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature"], ["static", "analysis", "<sep>", "embedded", "languages", "<sep>", "partial", "evaluation", "<sep>", "invariants", "<sep>", "languages", "analysis"], ["local", "search", "<sep>", "open", "shortest", "path", "first", "<sep>", "flow", "routing", "<sep>", "multi", "commodity", "flow", "routing", "<sep>", "network", "optimization"], ["observation", "logic", "<sep>", "default", "logic", "<sep>", "defeasible", "reasoning", "<sep>", "defeasible", "reasoning"], ["self", "stabilization", "<sep>", "clock", "synchronization", "<sep>", "byzantine", "faults", "<sep>", "chinese", "remainder", "theorem", "<sep>", "fault", "tolerant", "computing", "<sep>", "distributed", "computing"], ["haskell", "<sep>", "extension", "languages", "<sep>", "dynamic", "loading", "<sep>", "dynamic", "plugins", "<sep>", "languages", "<sep>", "design", "<sep>", "languages", "<sep>", "theory", "<sep>", "functional", "programming"], ["event", "detection", "<sep>", "reactive", "systems", "<sep>", "algebraic", "laws", "<sep>", "formal", "reasoning", "<sep>", "temporal", "logic"], ["combinatorial", "circuits", "<sep>", "resource", "aware", "programming", "<sep>", "abstract", "interpretation", "<sep>", "fast", "fourier", "transform", "<sep>", "verified", "computation"], ["offloading", "<sep>", "pervasive", "computing", "<sep>", "adaptive", "systems", "<sep>", "context", "awareness"], ["min", "cut", "<sep>", "max", "flow", "<sep>", "energy", "minimization", "<sep>", "image", "restoration", "<sep>", "stereo", "<sep>", "segmentation", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms"], ["direct", "product", "<sep>", "complexity", "<sep>", "decision", "trees", "<sep>", "communication", "protocols", "<sep>", "strong", "theorems"], ["complexity", "<sep>", "synchronous", "iterative", "do", "all", "<sep>", "load", "balancing", "<sep>", "distributed", "algorithms", "<sep>", "distributed", "computing", "<sep>", "distributed", "computing"], ["nested", "semantics", "<sep>", "finite", "trees", "<sep>", "equational", "axiomatizations", "<sep>", "equational", "logic", "<sep>", "finite", "model", "theory"], ["resolution", "<sep>", "label", "based", "formulas", "<sep>", "hierarchical", "representation", "<sep>", "order", "sorted", "logic", "<sep>", "sort", "hierarchy", "<sep>", "natural", "language", "<sep>", "hierarchical", "inference", "rules", "<sep>", "hierarchical", "inference", "rules", "<sep>", "hierarchical", "inference", "rules", "<sep>", "hierarchical", "inference", "rules", "<sep>", "hierarchical", "inference", "rules"], ["unit", "disk", "graph", "<sep>", "approximation", "<sep>", "embedding", "<sep>", "wireless", "ad", "hoc", "and", "sensor", "networks", "<sep>", "virtual", "coordinates", "<sep>", "np", "hardness", "<sep>", "approximation", "algorithms"], ["debugging", "<sep>", "shared", "language", "<sep>", "specification", "<sep>", "theory", "<sep>", "verification", "<sep>", "concurrency", "<sep>", "shared", "memory"], ["medium", "access", "diversity", "<sep>", "rate", "adaptation", "<sep>", "wireless", "lan", "<sep>", "multiuser", "diversity", "<sep>", "channel", "probing", "<sep>", "receiver", "scheduling", "<sep>", "performance", "analysis"], ["arithmetic", "circuits", "<sep>", "polynomial", "replacement", "systems", "<sep>", "counting", "proof", "trees", "<sep>", "complexity", "<sep>", "circuit", "complexity"], ["tight", "bounds", "<sep>", "bipartiteness", "<sep>", "general", "graphs", "<sep>", "graph", "algorithms", "<sep>", "graph", "algorithms"], ["minimum", "degree", "ordering", "<sep>", "sparse", "gaussian", "elimination", "<sep>", "partial", "pivoting", "<sep>", "column", "ordering", "<sep>", "sparsity", "<sep>", "linear", "programming"], ["multiway", "cut", "<sep>", "approximation", "algorithms", "<sep>", "fork", "computer", "science", "<sep>", "fork", "factor", "graphs", "<sep>", "fork", "join", "graphs", "<sep>", "fork", "join", "graphs"], ["integer", "feasibility", "<sep>", "frobenius", "number", "<sep>", "branch", "and", "bound", "<sep>", "lattice", "polytope", "<sep>", "equality", "constrained", "knapsacks"], ["pictorial", "structures", "<sep>", "object", "recognition", "<sep>", "part", "based", "modeling", "<sep>", "learning", "<sep>", "object", "recognition", "systems", "<sep>", "object", "recognition", "systems"], ["constraint", "programming", "<sep>", "rule", "based", "programming", "<sep>", "local", "consistency", "<sep>", "arc", "consistency", "<sep>", "boolean", "constraints", "<sep>", "temporal", "logic", "<sep>", "constraint", "logic", "programming", "<sep>", "constraint", "logic", "programming", "<sep>", "constraint", "satisfaction", "problem", "solving"], ["constraint", "logic", "programming", "<sep>", "type", "system", "<sep>", "type", "checking", "<sep>", "prolog", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "inference", "<sep>", "type", "checking", "<sep>", "type", "checking", "<sep>"], ["normed", "simulations", "<sep>", "lower", "level", "specification", "<sep>", "refinement", "<sep>", "invisible", "nondeterminism", "<sep>", "higher", "level", "specification", "<sep>", "higher", "level", "simulation"], ["mobile", "ad", "hoc", "networks", "<sep>", "mobility", "models", "<sep>", "random", "waypoint", "model", "<sep>", "brownian", "like", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>", "random", "waypoint", "model", "<sep>"], ["asymmetric", "communication", "<sep>", "broadcast", "disks", "<sep>", "data", "dissemination", "<sep>", "on", "line", "scheduling", "<sep>", "data", "dissemination", "<sep>", "time", "critical", "communication", "environments", "<sep>", "adaptive", "broadcast", "models"], ["wait", "free", "<sep>", "synchronization", "<sep>", "concurrent", "data", "structures", "<sep>", "multiprocessor", "<sep>", "read", "registers", "<sep>", "algorithms", "<sep>", "theory", "<sep>", "verification", "<sep>", "concurrent", "data", "structures", "<sep>", "concurrent", "data", "structures", "<sep>", "concurrent", "data", "structures", "<sep>", "wait", "free", "algorithms"], ["short", "signature", "<sep>", "weil", "pairing", "<sep>", "hyperelliptic", "curve", "<sep>", "signature", "aggregation", "<sep>", "batch", "verification", "<sep>", "elliptic", "curve"], ["provable", "security", "<sep>", "ad", "hoc", "routing", "<sep>", "simulation", "<sep>", "cryptographic", "protocols", "<sep>", "wireless", "networks"], ["anonymity", "<sep>", "network", "diversity", "<sep>", "network", "security"], ["duplication", "<sep>", "abstract", "algorithm", "<sep>", "affine", "logic", "<sep>", "optimal", "reducer", "algorithm", "<sep>", "elementary", "function", "computation"], ["learning", "<sep>", "monotone", "<sep>", "product", "<sep>", "distribution", "<sep>", "class", "<sep>", "polynomial", "<sep>", "timing", "<sep>", "algorithm", "<sep>", "model", "<sep>", "polynomial", "<sep>", "timing", "<sep>", "circuits", "<sep>", "monotone", "function", "<sep>", "bounded", "distribution", "<sep>", "bounded", "distribution", "<sep>", "constant", "depth", "circuit", "<sep>", "constant", "depth", "circuit", "<sep>", "constant", "distribution", "<sep>", "polynomial", "time", "complexity"], ["incremental", "algorithms", "<sep>", "dynamic", "detection", "<sep>", "invariant", "detection", "<sep>", "software", "testing", "<sep>", "program", "invariants"], ["fuzzy", "extractors", "<sep>", "fuzzy", "secret", "reuse", "<sep>", "fuzzy", "authentication", "<sep>", "fuzzy", "cryptography", "<sep>", "fuzzy", "secret", "reuse"], ["id", "based", "encryption", "<sep>", "forward", "security", "<sep>", "broadcast", "encryption", "<sep>", "hierarchical", "identity", "based", "encryption", "<sep>", "bilinear", "diffie", "hellman", "assumption", "<sep>", "random", "oracle", "model", "<sep>", "collusion", "resistance", "<sep>", "random", "oracle", "model", "<sep>", "random", "oracle", "model", "<sep>", "collusion", "resistance", "<sep>", "random", "oracle", "model", "<sep>", "collusion", "resistance", "<sep>", "collusion", "resistance", "<sep>", "collusion", "resistance", "to", "collusion", "attack"], ["software", "development", "environments", "<sep>", "taxonomy", "<sep>", "software", "engineering", "<sep>", "software", "architecture", "<sep>", "software", "architecture", "<sep>", "software", "architecture"], ["reliability", "<sep>", "initial", "value", "problem", "<sep>", "ordinary", "differential", "equation", "<sep>", "event", "function", "<sep>", "event", "function", "<sep>", "event", "function", "<sep>", "event", "function", "<sep>", "event", "function", "<sep>", "software", "<sep>", "root", "finding", "<sep>", "root", "finding"], ["mixed", "finite", "elements", "<sep>", "incompressible", "mhd", "<sep>", "weighted", "regularization", "<sep>", "well", "posedness", "<sep>", "error", "bounds", "<sep>", "oseen", "type", "mhd", "problem", "<sep>", "non", "convex", "analysis"], ["point", "location", "<sep>", "dynamic", "data", "structures", "<sep>", "external", "memory", "<sep>", "ray", "shooting", "<sep>", "dynamic", "lines", "<sep>", "external", "memory", "algorithms"], ["communication", "complexity", "<sep>", "communication", "protocols", "<sep>", "modularity", "<sep>", "cryptography", "<sep>", "counting", "modes"], ["registration", "area", "<sep>", "mobility", "<sep>", "call", "pattern", "<sep>", "location", "management", "<sep>", "personal", "communication", "services", "<sep>", "aggregate", "mobility", "<sep>", "signaling", "overhead", "<sep>", "mobile", "locality", "<sep>", "location", "management"], ["software", "trace", "cache", "<sep>", "compiler", "optimization", "<sep>", "code", "layout", "<sep>", "instruction", "cache", "<sep>", "branch", "prediction", "<sep>", "branch", "prediction", "<sep>", "spatial", "locality", "<sep>", "spatial", "locality", "<sep>", "mapping", "<sep>", "memory", "hierarchy"], ["random", "walks", "<sep>", "<digit>", "<digit>", "knapsack", "problem", "<sep>", "approximation", "algorithms", "<sep>", "combinatorial", "optimization"], ["global", "predicate", "<sep>", "distributed", "systems", "<sep>", "clocks", "<sep>", "real", "time", "<sep>", "timestamps", "<sep>", "detection", "<sep>", "algorithms", "<sep>", "complexity", "<sep>", "theory", "<sep>", "verification", "<sep>", "concurrency"], ["mutual", "exclusion", "<sep>", "self", "stabilization", "<sep>", "transient", "fault", "<sep>", "communication", "<sep>", "distributed", "computing", "<sep>", "fault", "tolerance"], ["reliable", "multicast", "<sep>", "secure", "distributed", "systems", "<sep>", "secure", "multicast"], ["useless", "checkpoint", "<sep>", "distributed", "computation", "<sep>", "communication", "induced", "checkpointing", "<sep>", "distributed", "checkpoint", "<sep>", "fault", "tolerance"], ["constraints", "<sep>", "structuring", "<sep>", "network", "protocols", "<sep>", "component", "protocols", "<sep>", "composite", "protocols", "<sep>", "component", "protocols", "<sep>", "formal", "methods"], ["quorum", "systems", "<sep>", "data", "repositories", "<sep>", "byzantine", "failures", "<sep>", "fault", "tolerance", "<sep>", "distributed", "systems"], ["gossip", "<sep>", "distributed", "algorithms", "<sep>", "fault", "tolerance", "<sep>", "distributed", "algorithms"], ["leader", "election", "<sep>", "sense", "of", "direction", "<sep>", "distributed", "computing"], ["naming", "<sep>", "wait", "free", "<sep>", "shared", "variables", "<sep>", "unique", "names", "<sep>", "atomic", "read", "write", "registers", "<sep>", "distributed", "computing"], ["communication", "<sep>", "lower", "bounds", "<sep>", "distributed", "memory", "<sep>", "matrix", "multiplication", "<sep>", "parallel", "algorithms", "<sep>", "parallel", "algorithms"], ["approximation", "algorithms", "<sep>", "covering", "problems", "<sep>", "vertex", "cover", "<sep>", "planar", "graphs", "<sep>", "graph", "algorithms", "<sep>", "primal", "dual", "algorithms"], ["minimally", "unsatisfiable", "subformula", "<sep>", "satisfiability", "<sep>", "farkas", "'", "lemma", "<sep>", "linear", "programming", "<sep>", "contradiction", "detection", "<sep>", "computational", "complexity"], ["crossing", "number", "<sep>", "pair", "crossing", "number", "<sep>", "pcr", "<sep>", "strict", "inequality", "<sep>", "guha", "method"], ["source", "tracing", "<sep>", "routing", "protocols", "<sep>", "ad", "hoc", "networks", "<sep>", "on", "demand", "routing", "<sep>", "simulation", "<sep>", "dsr", "<sep>", "manet", "<sep>", "manet", "<sep>", "routing", "protocols", "for", "ad", "hoc", "networks"], ["minority", "language", "corpora", "<sep>", "web", "search", "<sep>", "language", "filtering", "<sep>", "term", "exclusion", "<sep>", "query", "expansion"], ["collaborative", "filtering", "<sep>", "maximum", "entropy", "<sep>", "online", "recommendations", "<sep>", "clustering", "<sep>", "multinomial", "markov", "models", "<sep>", "latent", "dirichlet", "allocation", "<sep>", "latent", "variable", "models", "<sep>", "latent", "variable", "models", "<sep>", "latent", "variable", "models", "<sep>", "online", "learning"], ["privacy", "<sep>", "data", "mining", "<sep>", "security", "<sep>", "privacy", "preserving", "data", "mining"], ["data", "warehouse", "<sep>", "materialized", "views", "<sep>", "view", "selection", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "view", "maintenance", "<sep>", "query", "optimization"], ["learning", "<sep>", "equilibrium", "<sep>", "ele", "<sep>", "game", "theory"], ["self", "stabilization", "<sep>", "regular", "languages", "<sep>", "string", "rewrite", "systems", "<sep>", "formal", "methods", "<sep>", "formal", "methods"], ["lower", "bounds", "<sep>", "locally", "decodable", "codes", "<sep>", "quantum", "information", "retrieval", "<sep>", "quantum", "computing", "<sep>", "quantum", "computing"], ["tree", "metrics", "<sep>", "online", "algorithms", "<sep>", "group", "steiner", "trees", "<sep>", "approximation", "algorithms"], ["load", "balancing", "<sep>", "scatter", "operations", "<sep>", "grid", "computing", "<sep>", "parallel", "codes", "<sep>", "mpi", "<sep>", "performance"], ["gossip", "<sep>", "location", "protocols", "<sep>", "distributed", "computing", "<sep>", "distributed", "algorithms", "<sep>", "distributed", "algorithms", "<sep>", "distributed", "algorithms"], ["monte", "carlo", "<sep>", "low", "rank", "approximation", "<sep>", "singular", "value", "decomposition", "<sep>", "randomized", "algorithms", "<sep>", "algorithms", "and", "data", "structures"], ["multiplicity", "<sep>", "random", "composition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "partition", "<sep>", "random", "graph"], ["approximation", "algorithms", "<sep>", "<digit>", "extension", "problem", "<sep>", "multiway", "cut", "<sep>", "multicut", "<sep>", "linear", "programming", "relaxation", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning", "<sep>", "graph", "partitioning"], ["polynomial", "system", "<sep>", "numerical", "continuation", "<sep>", "witness", "set", "<sep>", "diagonal", "system", "<sep>", "intersecting", "solution", "component", "<sep>", "intersecting", "solution", "set", "<sep>", "follows", "<sep>", "components", "<sep>", "continuation", "<sep>", "c"], ["polymorphism", "<sep>", "type", "analysis", "<sep>", "haskell", "<sep>", "type", "classes", "<sep>", "type", "inference"], ["associated", "types", "<sep>", "haskell", "<sep>", "type", "classes", "<sep>", "languages", "<sep>", "theory", "<sep>", "type", "inference"], ["ergodicity", "<sep>", "throughput", "bound", "<sep>", "petri", "nets", "<sep>", "unique", "consistent", "firing", "count", "vector", "<sep>", "marked", "graphs", "<sep>", "linear", "programming", "<sep>", "synchronized", "queuing", "networks", "<sep>", "timed", "stochastic", "petri", "nets", "<sep>", "markov", "chains"], ["multiple", "resolution", "<sep>", "segmentation", "<sep>", "markov", "random", "field", "<sep>", "image", "processing", "<sep>", "image", "processing"], ["model", "based", "recognition", "<sep>", "motion", "tracking", "<sep>", "<digit>", "d", "reconstruction", "<sep>", "parameterized", "models"], ["animation", "<sep>", "object", "oriented", "programming", "<sep>", "interactive", "systems"], ["surface", "flattening", "<sep>", "texture", "mapping", "<sep>", "geodesic", "curvature", "<sep>", "shoe", "modeling", "<sep>", "surface", "fitting", "<sep>", "surface", "reconstruction"], ["loop", "free", "routing", "<sep>", "routing", "<sep>", "routing", "<sep>", "network", "<sep>", "adaptability", "<sep>", "routing", "optimization"], ["refinement", "<sep>", "geometric", "bounds", "<sep>", "solid", "geometry", "<sep>", "bounding", "function", "<sep>", "rewrite", "rules", "<sep>", "boolean", "algebras", "<sep>", "constructive", "geometry"], ["distributed", "representations", "<sep>", "simple", "recurrent", "networks", "<sep>", "grammatical", "structure", "<sep>", "principal", "component", "analysis", "<sep>", "hierarchical", "structure", "<sep>", "hierarchical", "structure", "<sep>", "hierarchical", "structure", "<sep>", "hierarchical", "structure", "<sep>", "hierarchical", "structure", "<sep>", "hierarchical", "structure"], ["embedding", "<sep>", "complete", "binary", "tree", "<sep>", "butterfly", "network", "<sep>", "dilation", "<sep>", "dilation", "<sep>", "dilation", "<sep>", "dilation", "<sep>", "dilation", "<sep>", "graph", "<sep>", "interconnection", "network"], ["packaging", "<sep>", "heterogeneous", "<sep>", "programming", "<sep>", "interface", "<sep>", "stubs", "<sep>", "interface", "<sep>", "interconnection", "<sep>", "performance", "<sep>", "design", "<sep>", "languages", "<sep>", "object", "oriented", "<sep>", "java", "<sep>", "java", "<sep>", "java", "<sep>", "java", "<sep>", "java"], ["program", "slicing", "<sep>", "software", "maintenance", "<sep>", "decomposition", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis"], ["adaptive", "programming", "<sep>", "self", "stabilization", "<sep>", "distributed", "programming", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "distributed", "programming", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "distributed", "programming"], ["performance", "prediction", "<sep>", "parallel", "processing", "<sep>", "numa", "multiprocessor", "<sep>", "nonuniform", "memory", "access", "<sep>", "process", "scheduling", "<sep>", "memory", "contention", "<sep>", "shared", "memory", "multiprocessor", "<sep>", "shared", "memory", "multiprocessor", "<sep>", "performance", "evaluation"], ["weight", "assignment", "<sep>", "superimposed", "codes", "<sep>", "fixed", "size", "block", "<sep>", "hashing", "<sep>", "data", "compression"], ["concurrency", "<sep>", "logic", "programming", "<sep>", "languages", "<sep>", "nonflat", "guards", "<sep>", "clean", "semantics", "<sep>", "control", "facilities", "<sep>", "design", "<sep>", "theory", "<sep>", "verification", "<sep>", "concurrent", "programming", "<sep>", "concurrent", "programming", "<sep>", "concurrent", "programming"], ["control", "flow", "<sep>", "normalization", "<sep>", "complexity", "<sep>", "program", "transformation", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "automatic", "parallelization", "<sep>", "code", "replication", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation"], ["race", "conditions", "<sep>", "shared", "memory", "<sep>", "general", "races", "<sep>", "data", "races", "<sep>", "debugging", "<sep>", "apparent", "debugging", "<sep>", "mutual", "exclusion", "<sep>", "theory", "<sep>", "verification", "<sep>", "reliability", "<sep>", "verification", "<sep>", "static", "analysis", "<sep>", "static", "analysis", "<sep>", "static", "analysis"], ["qualitative", "model", "engineering", "<sep>", "discrete", "event", "simulation", "<sep>", "qualitative", "reasoning"], ["workload", "characterization", "<sep>", "relational", "database", "<sep>", "db2", "<sep>", "sql", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "benchmark", "<sep>", "database", "systems", "<sep>", "database", "systems", "<sep>", "database", "management", "systems"], ["error", "recovery", "<sep>", "asynchronous", "real", "time", "systems", "<sep>", "timing", "constraints", "<sep>", "timing", "constraints", "<sep>", "precedence", "constraints", "<sep>", "precedence", "constraints", "<sep>", "precedence", "constraints", "<sep>", "asynchronous", "systems"], ["bessel", "functions", "<sep>", "modified", "bessel", "functions", "<sep>", "software", "<sep>", "software", "<sep>", "software", "<sep>", "software", "<sep>", "software", "<sep>", "software", "<sep>", "function", "<sep>", "software", "<sep>", "function"], ["file", "systems", "<sep>", "continuous", "media", "<sep>", "real", "time", "<sep>", "disk", "scheduling", "<sep>", "real", "time", "systems", "<sep>", "video", "retrieval"], ["temporal", "differences", "<sep>", "prediction", "<sep>", "action", "learning", "<sep>", "consistent", "prediction", "<sep>", "td", "method"], ["asynchronous", "servers", "<sep>", "speech", "recognition", "<sep>", "audio", "based", "interaction", "<sep>", "audio", "based", "interaction", "<sep>", "audio", "based", "interaction", "<sep>", "audio", "based", "interaction", "<sep>", "audio", "based", "interaction", "<sep>", "audio", "based", "interaction"], ["graphical", "user", "interfaces", "<sep>", "programming", "by", "visual", "examples", "<sep>", "visual", "programming", "<sep>", "visual", "programming"], ["linear", "programming", "<sep>", "randomized", "algorithms", "<sep>", "subexponential", "complexity", "bounds", "<sep>", "subexponential", "algorithms"], ["simulation", "<sep>", "virtual", "reality", "<sep>", "3d", "<sep>", "virtual", "environments"], ["suit", "<sep>", "user", "interface", "<sep>", "toolkit", "<sep>", "computer", "science", "<sep>", "support", "<sep>", "tools", "<sep>", "programmer", "<sep>", "support", "<sep>", "support", "<sep>", "programmer", "<sep>", "gui", "<sep>", "model", "<sep>", "windows", "<sep>", "windows", "<sep>", "windows", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>", "macintosh", "<sep>"], ["lexical", "ambiguity", "<sep>", "information", "retrieval", "<sep>", "word", "sense", "disambiguation", "<sep>", "word", "sense", "disambiguation", "<sep>", "information", "retrieval", "effectiveness", "<sep>", "lexical", "ambiguity", "analysis"], ["software", "reliability", "<sep>", "mutation", "analysis", "<sep>", "stochastic", "petri", "nets", "<sep>", "software", "testing", "<sep>", "software", "testing", "<sep>", "software", "testing"], ["real", "time", "systems", "<sep>", "synchronous", "data", "flow", "<sep>", "lustre", "<sep>", "formal", "design", "<sep>", "verification", "<sep>", "program", "verification", "<sep>", "formal", "methods", "<sep>", "synchronous", "languages", "<sep>", "dataflow", "analysis"], ["tractability", "<sep>", "inference", "relations", "<sep>", "rule", "based", "systems", "<sep>", "formal", "verification"], ["discrete", "random", "variates", "<sep>", "changing", "distributions", "<sep>", "alias", "algorithm", "<sep>", "markovian", "queuing", "networks", "<sep>", "stochastic", "process", "<sep>", "stochastic", "process", "<sep>", "stochastic", "process", "<sep>", "stochastic", "process", "<sep>", "stochastic", "process", "<sep>", "stochastic", "process", "<sep>", "stochastic", "process"], ["coordination", "<sep>", "rule", "based", "software", "process", "<sep>", "esp", "<sep>", "polis", "<sep>", "linda", "<sep>", "prolog", "<sep>", "logic", "programming", "<sep>", "logic", "programming", "<sep>", "rule", "based", "system"], ["mutation", "analysis", "<sep>", "program", "schemata", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis"], ["or", "parallel", "execution", "models", "<sep>", "nondeterministic", "programming", "languages", "<sep>", "or", "parallel", "tree", "<sep>", "logic", "programming", "<sep>", "implemenation", "<sep>", "parallel", "programming", "<sep>", "parallel", "programming", "<sep>", "parallel", "programming"], ["data", "model", "<sep>", "object", "oriented", "<sep>", "database", "<sep>", "scheme", "<sep>", "query", "language", "<sep>", "logic", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "logic", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "language", "<sep>", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>", "query", "language", "<sep>"], ["symbolic", "computation", "<sep>", "maple", "<sep>", "parallel", "programming", "<sep>", "computer", "algebra", "systems", "<sep>", "parallel", "programming", "<sep>", "strand", "spaces"], ["template", "driven", "programming", "<sep>", "numerical", "subroutines", "of", "interfaces", "<sep>", "numerical", "integration"], ["nearest", "neighbor", "<sep>", "symbolic", "features", "<sep>", "machine", "learning", "<sep>", "protein", "secondary", "structure", "<sep>", "machine", "learning", "<sep>", "protein", "secondary", "structure", "<sep>", "dna", "sequence", "<sep>", "dna", "sequence", "<sep>", "dna", "sequence", "analysis", "<sep>", "protein", "structure", "prediction", "<sep>", "protein", "structure", "prediction", "<sep>", "protein", "structure", "prediction"], ["visual", "execution", "<sep>", "ada", "<sep>", "tasking", "<sep>", "contour", "model", "<sep>", "asynchronous", "tasks", "<sep>", "threads", "<sep>", "control", "<sep>", "control", "<sep>", "control", "<sep>", "control", "<sep>", "languages", "<sep>", "object", "oriented", "programming", "<sep>", "object", "oriented", "programming"], ["software", "process", "<sep>", "software", "process", "support", "<sep>", "software", "process", "evolution", "<sep>", "software", "process", "improvement"], ["wormhole", "routing", "<sep>", "interconnection", "networks", "<sep>", "fully", "adaptive", "routing", "<sep>", "virtual", "channels", "<sep>", "k", "ary", "n", "cube", "<sep>", "performance", "evaluation"], ["x", "protocol", "<sep>", "survey", "<sep>", "cscw", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "survey", "<sep>", "protocol"], ["random", "walks", "<sep>", "tensor", "powers", "<sep>", "weyl", "groups", "<sep>", "spin", "representations", "<sep>", "chambers", "walks"], ["deadlock", "free", "<sep>", "adaptive", "routing", "<sep>", "wormhole", "<sep>", "fault", "tolerance", "<sep>", "interconnection", "networks", "<sep>", "wormhole", "switching"], ["vector", "quantizer", "<sep>", "training", "set", "size", "<sep>", "vc", "dimension", "<sep>", "codebook", "<sep>", "training", "set", "size", "<sep>", "training", "set", "size", "<sep>", "training", "set", "size", "<sep>", "vector", "quantization", "codebooks", "<sep>", "vector", "quantization", "codebooks", "<sep>", "vector", "quantization", "codebooks", "<sep>", "vector", "quantization", "codebooks", "<sep>", "vector", "quantization", "codebooks", "<sep>", "vector", "quantization", "codebooks", "<sep>", "vector", "quantization"], ["nested", "graphs", "<sep>", "deductive", "databases", "<sep>", "graph", "based", "user", "interfaces", "<sep>", "type", "checking", "<sep>", "hypertext", "databases", "<sep>", "object", "oriented", "databases", "<sep>", "object", "oriented", "databases", "<sep>", "graph", "databases", "<sep>", "graph", "databases"], ["temporal", "logic", "<sep>", "real", "time", "<sep>", "systems", "<sep>", "real", "time", "<sep>", "systems", "<sep>", "timing", "<sep>", "systems", "<sep>", "quantifier", "<sep>", "timing", "<sep>", "context", "<sep>", "context", "<sep>", "context", "<sep>", "context", "<sep>", "context", "<sep>", "context", "<sep>", "context", "<sep>", "context", "<sep>", "real", "time", "systems", "<sep>", "temporal", "logic", "programming", "<sep>", "temporal", "logic", "programming"], ["atomic", "<sep>", "register", "<sep>", "single", "writer", "<sep>", "complexity", "<sep>", "shared", "<sep>", "bit", "<sep>", "bit", "<sep>", "bit", "<sep>", "bit", "<sep>", "bit", "<sep>", "register", "complexity", "<sep>", "register", "complexity", "<sep>", "register", "complexity", "<sep>", "single", "reader", "register"], ["parallel", "linear", "programming", "<sep>", "fixed", "dimension", "<sep>", "computational", "geometry", "<sep>", "linear", "programming", "problem"], ["type", "errors", "<sep>", "polymorphic", "languages", "<sep>", "type", "checking", "<sep>", "type", "inference", "<sep>", "program", "reconstruction"], ["slice", "<sep>", "program", "<sep>", "debugging", "<sep>", "automatic", "parallelization", "<sep>", "software", "maintenance", "<sep>", "affect", "<sep>", "value", "<sep>", "affect", "<sep>", "affect", "<sep>", "value", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "call", "<sep>", "procedure", "call", "<sep>", "procedure", "call", "<sep>", "procedure", "call", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "call", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure", "<sep>", "procedure"], ["groundness", "analysis", "<sep>", "logic", "programming", "<sep>", "abstract", "interpretation", "<sep>", "boolean", "functions", "<sep>", "call", "condensation", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis"], ["semantics", "<sep>", "constraint", "logic", "programming", "<sep>", "optimization", "<sep>", "languages", "<sep>", "theory", "<sep>", "verification", "<sep>", "constraint", "satisfaction", "problems"], ["nurbs", "<sep>", "geometric", "constraints", "<sep>", "interactive", "sculpting", "<sep>", "free", "form", "shapes", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>", "d", "nurbs", "<sep>"], ["shape", "modeling", "<sep>", "fractal", "priors", "<sep>", "multiresolution", "modeling", "<sep>", "stochastic", "shape", "modeling"], ["advice", "functions", "<sep>", "boolean", "hierarchy", "<sep>", "computational", "complexity", "<sep>", "computational", "complexity"], ["linear", "extensions", "<sep>", "poset", "<sep>", "algorithm", "<sep>", "counting", "problems", "<sep>", "counting", "problems", "<sep>", "counting", "problems", "<sep>", "counting", "problems", "<sep>", "computational", "complexity"], ["computational", "complexity", "<sep>", "sparse", "rational", "interpolation", "<sep>", "arithmetic", "operations", "<sep>", "sparse", "interpolation"], ["path", "length", "<sep>", "binary", "tree", "<sep>", "external", "path", "<sep>", "shortest", "path"], ["complexity", "<sep>", "search", "<sep>", "paper", "<sep>", "language", "<sep>", "language", "<sep>", "program", "<sep>", "language", "<sep>", "program", "<sep>", "membership", "<sep>", "program", "checking", "<sep>", "membership", "<sep>", "interactive", "theorem", "proving", "<sep>", "decision", "problem", "<sep>", "computational", "complexity"], ["piecewise", "linear", "interpolation", "<sep>", "surface", "reconstruction", "<sep>", "partial", "curve", "matching", "<sep>", "minimum", "spanning", "tree", "<sep>", "parallel", "imaging"], ["graph", "coloring", "<sep>", "register", "allocation", "<sep>", "optimistic", "coloring", "<sep>", "interference", "graph", "<sep>", "algorithms", "<sep>", "performance", "<sep>", "experimentation", "<sep>", "measurement", "<sep>", "chaitin", "coloring", "<sep>", "chaitin", "coloring", "<sep>", "chaitin", "coloring"], ["model", "checking", "<sep>", "modular", "verification", "<sep>", "compositional", "verification", "<sep>", "finite", "state", "processes", "<sep>", "assume", "guarantee", "reasoning", "<sep>", "preorder", "checking"], ["coordination", "<sep>", "first", "order", "interaction", "<sep>", "distributed", "systems", "<sep>", "coordination", "languages"], ["ambiguity", "<sep>", "context", "free", "grammars", "<sep>", "controlled", "ambiguity"], ["indirect", "function", "call", "<sep>", "c", "<sep>", "control", "flow", "prediction", "<sep>", "object", "oriented", "<sep>", "run", "time", "dispatching", "<sep>", "object", "polymorphism", "<sep>", "run", "time", "dispatching", "<sep>", "object", "oriented", "programming"], ["approximation", "algorithms", "<sep>", "concurrent", "flow", "<sep>", "routing", "<sep>", "sparse", "cuts", "<sep>", "uniform", "capacity", "<sep>", "uniform", "capacity", "<sep>", "minimum", "feedback", "arc", "set", "<sep>", "minimum", "cut", "<sep>", "minimum", "area", "layout", "<sep>", "minimum", "area", "layout", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>", "minimum", "cut", "<sep>"], ["exception", "handling", "<sep>", "fortran", "<sep>", "error", "bound", "<sep>", "complex", "functions", "<sep>", "software", "<sep>", "software", "testing"], ["genetic", "algorithms", "<sep>", "concept", "learning", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "adaptive", "search", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "learning", "systems", "<sep>", "neural", "networks", "<sep>", "neural", "networks"], ["neural", "networks", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction", "<sep>", "rule", "extraction"], ["matrix", "polynomial", "<sep>", "self", "adjoint", "<sep>", "selfadjoint", "<sep>", "symmetric", "matrix", "<sep>", "hermitian", "<sep>", "l", "polynomial", "<sep>", "l", "polynomial", "<sep>", "l", "polynomial", "<sep>", "l", "polynomial", "<sep>", "l", "polynomial", "<sep>", "l", "polynomial", "<sep>", "l", "polynomial", "<sep>", "l", "matrix"], ["dynamic", "scheduling", "<sep>", "distributed", "memory", "multiprocessors", "<sep>", "data", "locality", "<sep>", "static", "scheduling", "<sep>", "dynamic", "scheduling", "algorithms"], ["virtual", "line", "<sep>", "locality", "<sep>", "cache", "<sep>", "memory", "<sep>", "memory", "<sep>", "memory", "<sep>", "memory", "<sep>", "memory", "<sep>", "memory", "<sep>", "memory", "<sep>", "latency", "<sep>", "memory", "latency", "<sep>", "memory", "latency", "<sep>", "memory", "latency", "<sep>", "memory", "traffic", "<sep>", "memory", "traffic", "<sep>", "memory", "latency", "<sep>", "memory", "latency", "<sep>", "memory", "latency", "<sep>", "memory", "traffic", "<sep>", "memory", "traffic", "<sep>", "memory", "traffic", "<sep>", "memory", "traffic", "<sep>", "memory"], ["data", "redistribution", "<sep>", "distributed", "memory", "machines", "<sep>", "data", "parallel", "languages", "<sep>", "data", "parallel", "languages", "<sep>", "analytical", "model", "<sep>", "intel", "ipsc", "<digit>", "<sep>", "data", "communication", "cost", "<sep>", "data", "parallel", "languages", "<sep>", "data", "parallel", "languages", "<sep>", "data", "parallel", "languages", "<sep>", "data", "parallel", "languages", "<sep>", "data", "parallel", "languages"], ["stochasticity", "<sep>", "density", "<sep>", "hard", "languages", "<sep>", "complexity", "<sep>", "theory", "<sep>", "computational", "complexity"], ["cache", "interferences", "<sep>", "memory", "hierarchy", "<sep>", "performance", "evaluation", "<sep>", "data", "locality", "<sep>", "memory", "hierarchy", "codes", "<sep>", "memory", "hierarchy", "codes"], ["evaluation", "<sep>", "interface", "<sep>", "browsing", "<sep>", "table", "of", "contents", "<sep>", "contract", "<sep>", "three", "<sep>", "exploratory", "<sep>", "navigation", "<sep>", "evaluation", "criteria"], ["fixpoint", "computation", "<sep>", "static", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis"], ["requirements", "specification", "<sep>", "inter", "viewpoint", "communication", "<sep>", "inter", "viewpoint", "communication", "<sep>", "viewpoint", "interaction", "<sep>", "inconsistency", "management", "<sep>", "requirements", "specification", "framework"], ["prototyping", "<sep>", "process", "monitoring", "<sep>", "experimental", "design", "<sep>", "software", "engineering", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software", "process", "<sep>", "software"], ["time", "slot", "interchangers", "<sep>", "optical", "implementation", "<sep>", "time", "division", "multiplexing", "<sep>", "multistage", "interconnection", "networks", "<sep>", "benes", "network", "<sep>", "self", "routing", "<sep>", "generalized", "lambda", "time", "slot", "permuter", "<sep>", "time", "slot", "sorters", "systems", "<sep>", "time", "slot", "sorters", "systems"], ["request", "combining", "<sep>", "interconnection", "networks", "<sep>", "parallel", "access", "<sep>", "combining", "<sep>", "combining", "<sep>", "design", "<sep>", "design", "space", "<sep>", "performance", "evaluation"], ["fault", "tolerance", "<sep>", "routing", "<sep>", "mesh", "<sep>", "distributed", "computing", "<sep>", "torus", "<sep>", "hexagonal", "mesh", "<sep>", "shortest", "path", "<sep>", "interconnection", "network"], ["generalization", "<sep>", "active", "learning", "<sep>", "selective", "sampling", "<sep>", "neural", "networks", "<sep>", "learning", "theory"], ["index", "transformation", "<sep>", "linear", "algebra", "<sep>", "hypercube", "<sep>", "gauss", "jordan", "elimination", "<sep>", "matrix", "transpose", "codes", "<sep>", "matrix", "reversal", "algorithms"], ["information", "systems", "<sep>", "mobile", "environments", "<sep>", "mobility", "<sep>", "replication", "<sep>", "replication", "<sep>", "replication", "<sep>", "data", "consistency"], ["line", "search", "<sep>", "sufficient", "decrease", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "iterates", "<sep>", "global", "optimization", "<sep>", "polynomial", "time", "algorithm"], ["error", "estimates", "<sep>", "radiosity", "<sep>", "hierarchical", "radiosity", "<sep>", "algorithms", "<sep>", "theory", "<sep>", "adaptive", "refinement", "<sep>", "error", "driven", "refinement", "<sep>", "error", "driven", "refinement", "<sep>", "adaptive", "refinement", "<sep>", "hierarchical", "refinement", "<sep>", "error", "control", "<sep>", "error", "control"], ["global", "illumination", "<sep>", "error", "taxonomy", "<sep>", "error", "analysis", "<sep>", "boundary", "element", "method"], ["spreadsheets", "<sep>", "data", "visualization", "<sep>", "flow", "chart", "<sep>", "visual", "database", "<sep>", "visual", "data"], ["lambert", "'", "s", "<sep>", "body", "reflection", "<sep>", "radiosity", "<sep>", "ray", "tracing", "<sep>", "lambertian", "model"], ["free", "form", "shape", "<sep>", "shape", "optimization", "<sep>", "mesh", "smoothing", "<sep>", "re", "triangulation", "<sep>", "worries", "surface", "<sep>", "surface", "parameterization"], ["object", "oriented", "programming", "<sep>", "test", "case", "generation", "<sep>", "test", "execution", "<sep>", "test", "generation", "<sep>", "test", "execution", "<sep>", "test", "execution", "<sep>", "test", "case", "generation", "<sep>", "test", "execution", "<sep>", "test", "case", "generation", "<sep>", "test", "execution", "<sep>", "test", "case", "generation", "<sep>", "test", "execution", "<sep>", "test", "case", "generation", "<sep>", "test", "execution", "<sep>", "test", "case", "generation", "<sep>", "test", "execution", "<sep>", "test", "case", "generation", "<sep>", "test"], ["multiresolution", "<sep>", "curve", "editing", "<sep>", "curve", "smoothing", "<sep>", "curve", "smoothing", "<sep>", "curve", "smoothing", "<sep>", "curve", "smoothing", "<sep>", "curve", "smoothing", "<sep>", "curve", "smoothing", "<sep>", "curve", "smoothing", "<sep>", "curve", "interpolation", "<sep>", "curve", "interpolation"], ["interval", "logic", "<sep>", "verification", "<sep>", "temporal", "logic", "<sep>", "graphical", "representation", "<sep>", "elevator", "<sep>", "graphical", "logic", "<sep>", "languages", "<sep>", "theory", "<sep>", "verification", "of", "concurrency", "<sep>", "temporal", "logic", "for", "software", "engineering"], ["implicit", "surfaces", "<sep>", "sampling", "<sep>", "rendering", "<sep>", "particle", "systems", "<sep>", "particle", "systems"], ["surface", "reconstruction", "<sep>", "scattered", "range", "data", "<sep>", "subdivision", "surfaces", "<sep>", "piecewise", "smooth", "surfaces", "<sep>", "subdivision", "surfaces"], ["clustering", "<sep>", "radiosity", "<sep>", "hierarchical", "radiosity", "<sep>", "energy", "transfer", "<sep>", "hierarchical", "clustering"], ["visual", "techniques", "<sep>", "multimedia", "layout", "<sep>", "character", "user", "interface", "<sep>", "graphical", "user", "interface", "<sep>", "visual", "design", "<sep>", "visual", "design", "<sep>", "visual", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user", "interface", "design", "<sep>", "user"], ["3d", "interfaces", "<sep>", "toolkit", "<sep>", "rapid", "prototyping", "<sep>", "direct", "manipulation", "<sep>", "constraint", "resolution", "<sep>", "scientific", "visualization", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "widgets", "<sep>", "3d", "user", "interface"], ["two", "handed", "interaction", "<sep>", "multimodal", "interaction", "<sep>", "direct", "manipulation", "<sep>", "interaction", "techniques", "<sep>", "interaction", "techniques"], ["memory", "traffic", "<sep>", "cregs", "<sep>", "compiler", "<sep>", "instruction", "level", "simulation", "<sep>", "instruction", "set", "extension", "<sep>", "memory", "optimization"], ["data", "relocation", "<sep>", "prefetching", "<sep>", "cache", "conflict", "<sep>", "cache", "conflict", "<sep>", "software", "prefetching", "<sep>", "memory", "hierarchy"], ["hardware", "programmable", "functional", "units", "<sep>", "programmable", "instruction", "set", "computers", "<sep>", "hardware", "performance", "tuning", "<sep>", "hardware", "performance", "evaluation"], ["interactive", "dynamic", "maps", "<sep>", "navigation", "<sep>", "spatial", "metaphor", "<sep>", "idms", "<sep>", "document", "retrieval", "<sep>", "idms", "<sep>", "document", "retrieval", "<sep>", "spatial", "databases", "<sep>", "spatial", "databases", "<sep>", "spatial", "databases"], ["interaction", "engine", "<sep>", "rich", "hypertexts", "<sep>", "hypertext", "<sep>", "hyperpro", "<sep>", "hierarchy", "<sep>", "documentation", "<sep>", "program", "development", "<sep>", "program", "documentation", "<sep>", "user", "interface"], ["collaboration", "<sep>", "groupware", "<sep>", "trellis", "<sep>", "interaction", "protocol", "<sep>", "coordination", "protocol", "<sep>", "coordination", "protocol", "<sep>", "coordination", "mechanism"], ["object", "merging", "<sep>", "collaborative", "computing", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "functions", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>", "merge", "policies", "<sep>"], ["interaction", "<sep>", "distributed", "<sep>", "video", "<sep>", "audio", "<sep>", "audio", "<sep>", "audio", "<sep>", "audio", "<sep>", "audio", "<sep>", "audio", "<sep>", "audio", "<sep>", "audio", "<sep>", "participation", "<sep>", "participation", "<sep>", "distributed", "computing", "<sep>", "video", "based", "interaction"], ["chaining", "<sep>", "algorithms", "<sep>", "oblivious", "algorithms", "<sep>", "theory", "<sep>", "verification", "<sep>", "crcw", "prams"], ["modularity", "<sep>", "theorem", "proving", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis"], ["trap", "driven", "simulation", "<sep>", "tapeworm", "<sep>", "software", "based", "simulation", "<sep>", "tlb", "<sep>", "memory", "referencing", "<sep>", "memory", "simulation", "<sep>", "trace", "driven", "simulation", "<sep>", "memory", "hierarchy", "<sep>", "memory", "hierarchy"], ["branch", "costs", "<sep>", "branch", "alignment", "<sep>", "block", "reordering", "<sep>", "branch", "prediction", "<sep>", "compiler", "optimization"], ["inverse", "kinematics", "<sep>", "nonlinear", "programming", "<sep>", "articulated", "figure", "<sep>", "joint", "angle", "<sep>", "interactive", "animation", "<sep>", "spatial", "constraint", "<sep>", "modular", "implementation", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>", "constraint", "satisfaction", "<sep>"], ["solution", "differentiability", "<sep>", "nonlinear", "control", "<sep>", "adjoint", "multipliers", "<sep>", "shooting", "method", "<sep>", "sensitivity", "analysis", "<sep>", "parametric", "<sep>", "firm", "<sep>", "parametric"], ["adaptive", "control", "<sep>", "unmodeled", "dynamics", "<sep>", "robust", "control", "<sep>", "robust", "control"], ["randomized", "algorithms", "<sep>", "page", "migration", "<sep>", "on", "line", "algorithms", "<sep>", "competitive", "analysis"], ["parallel", "recursion", "<sep>", "data", "structure", "<sep>", "algorithm", "<sep>", "equivalence", "<sep>", "parallel", "algorithm", "<sep>", "data", "structure", "<sep>", "data", "structure", "<sep>", "parallel", "algorithm"], ["distributed", "network", "computing", "<sep>", "atm", "<sep>", "communication", "<sep>", "asynchronous", "transfer", "mode", "<sep>", "application", "programming", "interface", "<sep>", "parallel", "virtual", "machine", "<sep>", "message", "passing", "interface", "<sep>", "parallel", "virtual", "machine", "<sep>", "message", "passing", "interface", "<sep>", "parallel", "virtual", "machine", "<sep>", "message", "passing", "interface", "<sep>", "message", "passing", "interface", "<sep>", "message", "passing", "interface", "<sep>", "message", "passing", "interface", "<sep>", "message", "passing", "interface", "<sep>", "message", "passing", "interface", "<sep>"], ["invariants", "<sep>", "projective", "reconstruction", "<sep>", "uncalibrated", "images", "<sep>", "space", "<sep>", "epipolar", "geometry", "<sep>", "image", "processing"], ["image", "processing", "<sep>", "scan", "line", "array", "processor", "<sep>", "simd", "machine", "<sep>", "median", "filtering", "<sep>", "convex", "hull", "<sep>", "connected", "component", "<sep>", "image", "processing", "on", "the", "scan", "line", "<sep>", "image", "processing", "algorithm"], ["image", "segmentation", "<sep>", "implicit", "polynomial", "surfaces", "<sep>", "markov", "random", "fields", "<sep>", "bayesian", "estimation", "<sep>", "markov", "random", "fields", "<sep>", "markov", "random", "fields", "<sep>", "markov", "random", "fields", "<sep>", "markov", "random", "fields", "<sep>", "markov", "random", "fields", "<sep>", "gibbs", "sampling", "<sep>", "gibbs", "sampling"], ["program", "correctness", "<sep>", "program", "checkers", "<sep>", "sorting", "<sep>", "matrix", "rank", "<sep>", "gcd", "<sep>", "probabilistic", "interactive", "proof", "<sep>", "group", "theoretic", "computations", "<sep>", "program", "verification", "<sep>", "program", "equivalence", "<sep>", "program", "verification", "<sep>", "program", "verification", "<sep>", "program", "verification"], ["reflection", "<sep>", "collaborative", "systems", "<sep>", "design", "<sep>", "computational", "reflection", "<sep>", "metaobject", "<sep>", "theory", "<sep>", "design", "theory", "<sep>", "design", "theory", "<sep>", "design", "theory", "<sep>", "design", "theory", "<sep>", "design", "theory", "<sep>", "design", "theory"], ["global", "optimization", "<sep>", "automatic", "differentiation", "<sep>", "automatic", "differentiation", "<sep>", "nonlinear", "optimization", "<sep>", "interval", "analysis"], ["closure", "analysis", "<sep>", "higher", "order", "functional", "programming", "<sep>", "languages", "<sep>", "theory", "<sep>", "verification", "<sep>", "constraint", "solving", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis", "<sep>", "program", "analysis"], ["cache", "prefetching", "<sep>", "bus", "based", "multiprocessors", "<sep>", "shared", "memory", "<sep>", "performance", "<sep>", "design", "<sep>", "experimentation", "<sep>", "measurement", "<sep>", "measurement", "<sep>", "performance", "prediction"], ["combination", "<sep>", "optimization", "<sep>", "languages", "<sep>", "performance", "<sep>", "theory", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation", "<sep>", "program", "transformation"], ["specification", "<sep>", "concurrency", "<sep>", "formal", "methods", "<sep>", "specification", "language", "<sep>", "specification", "language", "<sep>", "specification", "language"], ["semantics", "<sep>", "nondeterminism", "<sep>", "specification", "<sep>", "computational", "semantics", "<sep>", "theory", "<sep>", "verification", "<sep>", "possibility", "theory", "<sep>", "functional", "programming"], ["matrix", "powers", "<sep>", "finite", "precision", "arithmetic", "<sep>", "pseudospectrum", "<sep>", "backward", "stable", "algorithm", "<sep>", "powers", "<sep>", "precision", "<sep>", "powers", "<sep>", ","], ["nearest", "neighbor", "<sep>", "nearest", "hyperrectangle", "<sep>", "generalized", "exemplar", "<sep>", "k", "nearest", "neighbor", "<sep>", "mutual", "information", "<sep>", "pattern", "recognition", "<sep>", "pattern", "recognition", "<sep>", "pattern", "recognition", "<sep>", "pattern", "recognition", "<sep>", "pattern", "recognition", "<sep>", "pattern", "recognition"], ["reader", "writer", "queues", "<sep>", "first", "come", "first", "<sep>", "waiting", "times", "<sep>", "capacity", "<sep>", "write", "intention", "<sep>", "concurrent", "systems", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention", "<sep>", "write", "intention"], ["binarization", "<sep>", "document", "image", "<sep>", "locally", "adaptive", "<sep>", "gray", "scale", "<sep>", "postprocessing", "<sep>", "image", "processing"], ["asymmetric", "traveling", "salesman", "problem", "<sep>", "assignment", "relaxation", "<sep>", "random", "graphs"], ["search", "problems", "<sep>", "decision", "trees", "<sep>", "determinism", "<sep>", "randomness", "<sep>", "nondeterminism", "<sep>", "boolean", "decision", "trees", "<sep>", "complexity", "<sep>", "resolution", "<sep>", "resolution", "<sep>", "resolution", "<sep>", "resolution", "<sep>", "complexity", "<sep>", "resolution", "<sep>", "proofs", "<sep>", "resolution", "proofs", "<sep>", "randomized", "algorithms", "<sep>", "randomized", "algorithms"], ["software", "architecture", "<sep>", "adaptive", "intelligent", "systems", "<sep>", "system", "reconfiguration", "<sep>", "application", "configuration", "<sep>", "software", "engineering", "<sep>", "software", "architecture", "design"], ["performance", "<sep>", "data", "transmission", "<sep>", "cellular", "telephone", "networks", "<sep>", "mobile", "computing", "<sep>", "gsm", "<sep>", "tcp", "ip", "<sep>", "wireless", "networks"], ["model", "uncertainty", "<sep>", "discrete", "event", "systems", "<sep>", "finite", "state", "machines", "<sep>", "model", "checking"], ["costate", "<sep>", "parameter", "estimation", "<sep>", "linear", "evolution", "equations", "<sep>", "time", "marching", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "costate", "approximations", "<sep>", "high", "order", "accuracy", "<sep>", "high", "order", "accuracy", "<sep>", "star"], ["successive", "approximation", "method", "<sep>", "sum", "of", "squares", "<sep>", "variational", "inequalities", "<sep>", "nonlinear", "complementarity", "problems", "<sep>", "nonsmooth", "partial", "differential", "equations", "<sep>", "approximation", "<sep>", "equations", "<sep>", "approximation", "<sep>", "of"], ["lower", "bounds", "<sep>", "string", "matching", "<sep>", "on", "line", "algorithms", "<sep>", "on", "line", "algorithms", "<sep>", "on", "line", "algorithms", "<sep>", "pattern", "matching", "<sep>", "pattern", "matching", "<sep>", "on", "line", "algorithms"], ["depth", "first", "search", "<sep>", "planar", "directed", "graph", "<sep>", "parallel", "random", "access", "machine", "<sep>", "concurrent", "write", "<sep>", "concurrent", "write", "<sep>", "concurrent", "write", "<sep>", "write", "conflict", "<sep>", "planar", "graph", "<sep>", "parallel", "algorithm"], ["file", "sharing", "<sep>", "distributed", "networks", "<sep>", "file", "distribution", "<sep>", "integer", "programming", "<sep>", "lower", "bound", "<sep>", "file", "replication"], ["complexity", "<sep>", "distribution", "<sep>", "hard", "problems", "<sep>", "measure", "theory", "<sep>", "measure", "theory"], ["private", "computations", "<sep>", "argument", "functions", "<sep>", "communication", "complexity", "<sep>", "boolean", "functions", "<sep>", "private", "domains", "<sep>", "private", "categories", "<sep>", "private", "domains", "<sep>", "private", "categories", "<sep>", "private", "domains", "<sep>", "integers", "<sep>", "countable", "<sep>", "countable"], ["formal", "language", "theory", "<sep>", "kolmogorov", "complexity", "<sep>", "context", "free", "language", "<sep>", "chomsky", "hierarchy", "<sep>", "incompressibility", "arguments", "<sep>", "regular", "language", "theory"], ["eigenvalue", "<sep>", "expansion", "<sep>", "regular", "graph", "<sep>", "ramanujan", "graph", "<sep>", "random", "walk", "<sep>", "selection", "network", "<sep>", "extrovert", "graph", "<sep>", "regular", "graph", "<sep>", "regular", "graph", "<sep>", "regular", "<sep>", "regular"], ["global", "consistency", "<sep>", "row", "convexity", "<sep>", "constraint", "networks", "<sep>", "binary", "tasks", "<sep>", "constraint", "satisfaction", "problems"], ["buffer", "systems", "<sep>", "packet", "switching", "networks", "<sep>", "buffer", "overflow", "<sep>", "least", "time", "to", "reach", "bound", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "buffer", "size", "<sep>", "storage", "policy", "<sep>", "storage", "policy"], ["minimum", "equivalent", "digraph", "<sep>", "meg", "<sep>", "approximation", "algorithm", "<sep>", "transitive", "closure", "<sep>", "strongly", "connected", "spanning", "subgraph", "<sep>", "long", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle", "<sep>", "cycle"], ["interior", "point", "methods", "<sep>", "linear", "complementarity", "<sep>", "linear", "programming", "<sep>", "error", "analysis", "<sep>", "path", "following", "algorithms", "<sep>", "primal", "dual", "methods", "<sep>", "interior", "point", "methods"], ["polynomial", "time", "membership", "comparable", "sets", "<sep>", "membership", "comparable", "sets", "<sep>", "computational", "complexity"], ["pcs", "networks", "<sep>", "time", "warp", "<sep>", "performance", "modeling", "<sep>", "distributed", "simulation", "<sep>", "call", "initiated", "<sep>", "call", "initiated", "<sep>", "portable", "initiated", "<sep>", "portable", "initiated", "<sep>", "portable", "initiated", "<sep>", "portable", "initiated", "<sep>", "portable", "<sep>", "distributed", "simulation", "<sep>", "network", "simulation", "<sep>", "network", "simulation"], ["optimism", "control", "<sep>", "time", "warp", "<sep>", "timed", "petri", "nets", "<sep>", "distributed", "memory", "systems", "<sep>", "probabilistic", "adaptive", "control"], ["super", "criticality", "<sep>", "critical", "path", "analysis", "<sep>", "parallel", "discrete", "event", "simulation", "<sep>", "protocol", "<sep>", "practical", "<sep>", "practical", "<sep>", "practical", "<sep>", "practical", "<sep>", "practical", "<sep>", "demonstrate", "<sep>", "messages", "<sep>", "demonstrate", "<sep>", "contradiction", "<sep>", "logical", "<sep>", "relation"], ["buffer", "management", "<sep>", "shared", "memory", "<sep>", "time", "warp", "<sep>", "cache", "coherence", "<sep>", "performance", "<sep>", "experimentation", "<sep>", "measurement", "<sep>", "parallel", "simulation"], ["hard", "real", "time", "systems", "<sep>", "timing", "analysis", "<sep>", "instruction", "level", "compilation", "<sep>", "compiler", "techniques", "<sep>", "instruction", "sequence", "generation", "<sep>", "instruction", "set", "extensions"], ["visualization", "<sep>", "real", "time", "<sep>", "preattentive", "processing", "<sep>", "human", "visual", "system", "<sep>", "hue", "<sep>", "orientation", "<sep>", "curvature", "<sep>", "line", "length", "<sep>", "curvature", "<sep>", "line", "length", "<sep>", "curvature", "<sep>", "line", "length", "<sep>", "curvature", "<sep>", "line", "length", "<sep>", "curvature", "<sep>", "line", "length", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "line", "length", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>", "curvature", "<sep>"], ["visual", "simulation", "<sep>", "human", "computer", "interaction", "<sep>", "virtual", "reality", "<sep>", "motion", "capture"], ["camera", "calibration", "<sep>", "variable", "state", "dimension", "filter", "<sep>", "active", "vision", "<sep>", "head", "eye", "tracking", "<sep>", "corner", "detection"], ["scale", "space", "<sep>", "multiscale", "morphological", "dilation", "<sep>", "erosion", "<sep>", "smoothing", "<sep>", "fingerprints", "<sep>", "mathematical", "morphology", "<sep>", "mathematical", "morphology"], ["genetic", "algorithms", "<sep>", "dna", "<sep>", "fragment", "assembly", "<sep>", "permutation", "<sep>", "edge", "recombination", "<sep>", "crossover", "<sep>", "genome", "assembly"], ["unsupervised", "learning", "<sep>", "multiple", "motifs", "<sep>", "expectation", "maximization", "<sep>", "meme", "algorithm", "<sep>", "sequence", "analysis"], ["evaluation", "<sep>", "biases", "<sep>", "machine", "learning", "<sep>", "bias", "<sep>", "meta", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "bias", "<sep>", "machine", "learning", "<sep>", "machine", "learning", "<sep>", "machine", "learning", "systems"], ["processor", "mapping", "<sep>", "data", "redistribution", "<sep>", "distributed", "memory", "<sep>", "data", "exchange", "<sep>", "data", "locality"], ["id3", "<sep>", "backpropagation", "<sep>", "text", "to", "speech", "mapping", "<sep>", "statistical", "learning", "<sep>", "statistical", "learning", "<sep>", "statistical", "learning", "<sep>", "statistical", "learning", "<sep>", "statistical", "learning", "<sep>", "statistical", "learning", "<sep>", "prediction", "<sep>", "prediction", "<sep>", "prediction", "<sep>", "prediction"], ["weakly", "hard", "problems", "<sep>", "weak", "completeness", "<sep>", "complexity", "classes", "<sep>", "martingales", "<sep>", "diagonalization", "<sep>", "computational", "complexity"], ["pattern", "matching", "<sep>", "functional", "programming", "<sep>", "adaptive", "automata", "<sep>", "space", "minimization", "<sep>", "space", "minimization", "<sep>", "space", "minimization", "<sep>", "dag", "automata", "<sep>", "lazy", "hard", "pattern", "matching", "<sep>", "orthogonal", "pattern", "matching", "<sep>", "orthogonal", "matching"], ["simple", "paths", "<sep>", "graph", "databases", "<sep>", "regular", "expressions", "<sep>", "relational", "databases", "<sep>", "query", "languages", "<sep>", "algorithms", "<sep>", "theory", "<sep>", "query", "processing"], ["atmospheric", "correction", "<sep>", "remotely", "sensed", "imagery", "<sep>", "look", "up", "table", "<sep>", "parallel", "algorithm"], ["connected", "components", "<sep>", "parallel", "machines", "<sep>", "distributed", "memory", "multiprocessors", "<sep>", "cluster", "dynamics", "<sep>", "performance", "analysis"], ["message", "passing", "<sep>", "distributed", "shared", "memory", "<sep>", "networks", "of", "workstations", "<sep>", "parallel", "virtual", "machine", "<sep>", "genetic", "linkage", "analysis", "<sep>", "successive", "over", "relaxation", "<sep>", "traveling", "salesman", "<sep>", "quicksort", "<sep>", "qsort", "<sep>", "data", "separation", "<sep>", "data", "synchronization", "<sep>", "data", "separation", "<sep>", "data", "synchronization", "<sep>", "data", "separation", "<sep>", "data", "synchronization", "<sep>", "data", "separation", "<sep>", "data", "separation", "<sep>", "data", "separation", "<sep>", "data", "separation", "<sep>"], ["chemical", "process", "optimization", "<sep>", "gigabit", "network", "<sep>", "stochastic", "linear", "assignment", "<sep>", "performance", "modeling", "<sep>", "network", "optimization", "<sep>", "network", "modeling", "<sep>", "network", "modeling", "<sep>", "network", "modeling", "<sep>", "network", "modeling", "<sep>", "network", "modeling", "<sep>", "network", "modeling", "<sep>", "network", "simulation"], ["coarse", "grain", "parallelism", "<sep>", "interprocedural", "parallelizing", "compiler", "<sep>", "privatization", "<sep>", "array", "subscripts", "<sep>", "automatic", "parallelization", "<sep>", "performance", "<sep>", "algorithms", "<sep>", "languages", "<sep>", "performance", "<sep>", "loop", "parallelization", "<sep>", "loop", "parallelization", "<sep>", "interprocedural", "analysis", "<sep>", "loop", "transformations"], ["relative", "debugging", "<sep>", "atmospheric", "circulation", "models", "<sep>", "parallel", "computing", "<sep>", "parallel", "computing"], ["release", "consistency", "<sep>", "hardware", "coherent", "multiprocessors", "<sep>", "distributed", "shared", "memory", "<sep>", "lazy", "evaluation"], ["hpf", "<sep>", "compiler", "<sep>", "ibm", "sp", "series", "parallel", "machines", "<sep>", "symbolic", "analysis", "<sep>", "communication", "optimization", "<sep>", "performance", "analysis"], ["compiler", "<sep>", "architecture", "<sep>", "architecture", "<sep>", "manual", "<sep>", "cfd", "<sep>", "performance", "profiling", "<sep>", "benchmarking", "<sep>", "computational", "fluid", "dynamics", "<sep>", "parallel", "<sep>", "data", "locality", "<sep>", "performance", "evaluation"], ["hardware", "software", "co", "synthesis", "<sep>", "embedded", "systems", "<sep>", "interface", "hardware", "<sep>", "principal", "elements", "<sep>", "hardware", "software", "co", "design", "<sep>", "hardware", "software", "co", "design"], ["register", "assignment", "<sep>", "code", "generation", "<sep>", "embedded", "systems", "<sep>", "spill", "code", "<sep>", "loop", "optimization"], ["software", "synthesis", "<sep>", "embedded", "systems", "<sep>", "real", "time", "systems", "<sep>", "embedded", "systems", "design", "<sep>", "real", "time", "systems"], ["grain", "size", "<sep>", "network", "of", "workstations", "<sep>", "distributed", "computing", "<sep>", "dynamic", "load", "balancing", "<sep>", "parallel", "programming"], ["code", "compaction", "<sep>", "dsp", "<sep>", "real", "time", "<sep>", "integer", "programming", "<sep>", "timing", "constraint", "<sep>", "local", "compaction"], ["dsp", "<sep>", "dynamic", "scheduling", "<sep>", "fft", "<sep>", "pipelined", "architecture", "<sep>", "pipelined", "architecture"], ["scheduling", "<sep>", "design", "space", "exploration", "<sep>", "3d", "design", "space", "exploration", "<sep>", "exact", "algorithms"], ["power", "analysis", "<sep>", "low", "power", "<sep>", "scheduling", "<sep>", "dsp", "<sep>", "energy", "minimization", "<sep>", "low", "power", "design"], ["bounded", "skew", "clock", "and", "steiner", "routing", "<sep>", "elmore", "delay", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "dynamic", "programming", "<sep>", "sampling", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "points", "<sep>", "merging", "regions", "<sep>"], ["wire", "sizing", "<sep>", "buffer", "insertion", "<sep>", "low", "power", "<sep>", "delay", "<sep>", "timing", "optimization", "<sep>", "power", "<sep>", "power", "<sep>", "delay", "tradeoff", "<sep>", "power", "optimization", "<sep>", "low", "power", "design", "<sep>", "vlsi"], ["hybrid", "decision", "diagrams", "<sep>", "arithmetic", "circuits", "<sep>", "symbolic", "model", "checking", "<sep>", "linear", "expressions", "<sep>", "time", "complexity", "<sep>", "linear", "expressions", "<sep>", "time", "complexity", "<sep>", "circuit", "verification"], ["petri", "nets", "<sep>", "state", "based", "models", "<sep>", "finite", "state", "machines", "<sep>", "reachability", "graphs", "<sep>", "asynchronous", "circuits", "<sep>", "synthesis", "<sep>", "asynchronous", "circuits", "<sep>", "synthesis", "<sep>", "state", "based", "petri", "nets", "<sep>", "model", "synthesis"], ["design", "verification", "<sep>", "simulation", "<sep>", "automatic", "test", "pattern", "generation", "<sep>", "gate", "substitution", "errors", "<sep>", "input", "count", "errors", "<sep>", "input", "errors", "<sep>", "input", "errors", "<sep>", "single", "stuck", "line", "<sep>", "redundancy", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>", "test", "set", "<sep>"], ["bridging", "faults", "<sep>", "stuck", "at", "information", "<sep>", "fault", "diagnosis", "<sep>", "byzantine", "generals", "problem", "<sep>", "match", "restriction", "<sep>", "match", "requirement", "<sep>", "match", "requirement", "<sep>", "match", "requirement", "<sep>", "match", "requirement", "<sep>", "match", "requirement", "<sep>", "recovery", "<sep>", "information", "flow", "<sep>", "logic", "testing", "<sep>", "logic", "testing", "<sep>", "logic", "testing", "<sep>", "logic", "testing", "<sep>", "logic", "testing", "<sep>", "logic", "testing", "<sep>", "logic", "testing", "<sep>", "logic", "testing"], ["instruction", "selection", "<sep>", "binate", "covering", "<sep>", "code", "size", "optimization", "<sep>", "directed", "acyclic", "graph", "<sep>", "branch", "and", "bound", "<sep>", "algorithms", "<sep>", "performance", "<sep>", "experimentation", "<sep>", "theory", "<sep>", "embedded", "systems", "<sep>", "embedded", "systems"], ["wiresizing", "<sep>", "interconnect", "<sep>", "multiple", "sources", "<sep>", "net", "with", "multiple", "sources", "<sep>", "elmore", "delay", "model", "<sep>", "lst", "monotone", "property", "<sep>", "variable", "grid", "<sep>", "variable", "grid", "<sep>", "speedup", "<sep>", "interconnect", "delay", "<sep>", "interconnect", "delay", "<sep>", "interconnect", "delay", "<sep>", "interconnect", "delay"], ["low", "power", "<sep>", "data", "path", "<sep>", "behavioral", "synthesis", "<sep>", "scheduling", "<sep>", "resource", "sharing", "<sep>", "clock", "pruning", "<sep>", "low", "power", "design", "<sep>", "low", "power", "design", "<sep>", "vlsi", "design"], ["iteration", "<sep>", "abstraction", "<sep>", "sather", "<sep>", "class", "interface", "<sep>", "object", "oriented", "programming", "<sep>", "structured", "statement", "<sep>", "structured", "statement", "<sep>", "object", "oriented", "programming", "<sep>", "sather", "<sep>", "compiler", "<sep>", "lambda", "expression", "<sep>", "object", "oriented", "programming", "<sep>", "object", "oriented", "programming", "<sep>", "programming", "language"], ["mean", "square", "discrepancy", "<sep>", "randomized", "nets", "<sep>", "computational", "complexity", "<sep>", "theory", "<sep>", "randomized", "algorithms"], ["bounded", "time", "warp", "<sep>", "yawns", "<sep>", "parallel", "discrete", "event", "simulation", "<sep>", "performance", "analysis"], ["distributed", "memory", "<sep>", "parallel", "algorithms", "<sep>", "data", "rearrangement", "<sep>", "load", "balancing", "<sep>", "sorting", "<sep>", "fft", "<sep>", "matrix", "multiplication", "<sep>", "parallel", "processing", "<sep>", "parallel", "processing", "<sep>", "parallel", "processing"], ["deadlock", "free", "routing", "<sep>", "cut", "through", "and", "store", "and", "forward", "<sep>", "adaptive", "routing", "<sep>", "virtual", "cut", "through", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "edge", "buffer", "<sep>", "wormhole", "switching", "<sep>"], ["distributed", "synchronization", "<sep>", "fault", "tolerance", "<sep>", "dining", "philosophers", "<sep>", "doorway", "<sep>", "failure", "locality", "<sep>", "distributed", "algorithms"], ["majorization", "<sep>", "branching", "processes", "<sep>", "stochastic", "optimization", "<sep>", "task", "assignment", "<sep>", "task", "assignment", "<sep>", "markov", "chains"], ["message", "overhead", "<sep>", "replica", "control", "<sep>", "replicated", "data", "<sep>", "distributed", "systems", "<sep>", "fault", "tolerance"], ["divide", "and", "conquer", "<sep>", "mesh", "<sep>", "binomial", "tree", "<sep>", "parallel", "computation", "<sep>", "mesh", "network"], ["multiprocessor", "file", "systems", "<sep>", "performance", "evaluation", "<sep>", "parallel", "i", "o", "<sep>", "performance", "evaluation"], ["parallelization", "<sep>", "message", "passing", "<sep>", "parallel", "programming", "<sep>", "performance", "<sep>", "discrete", "event", "simulation", "<sep>", "intel", "paragon", "<sep>", "algorithms", "<sep>", "experimentation", "<sep>", "measurement", "<sep>", "performance", "analysis", "<sep>", "parallel", "programming"], ["repeated", "eigenvalues", "<sep>", "tridiagonalization", "<sep>", "symmetric", "matrix", "<sep>", "eigenvalue", "decomposition", "<sep>", "invariant", "subspace", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "eigenvalue", "decomposition", "<sep>", "matrix", "decomposition"], ["minimum", "degree", "ordering", "<sep>", "sparse", "matrix", "<sep>", "quotient", "graph", "<sep>", "matrix", "factorization", "<sep>", "algorithms", "and", "data", "structures", "<sep>", "linear", "algebra", "<sep>", "sparse", "matrices"], ["group", "invariance", "<sep>", "convex", "matrix", "analysis", "<sep>", "inner", "product", "<sep>", "eigenvalue", "optimization", "<sep>", "semidefinite", "programming", "<sep>", "convex", "optimization", "<sep>", "matrix", "<sep>", "question", "<sep>", "functions", "<sep>", "question", "<sep>", "matrix"], ["memory", "hierarchy", "<sep>", "workload", "locality", "<sep>", "cache", "hierarchy", "<sep>", "performance", "analysis"], ["object", "code", "compatibility", "<sep>", "vliw", "architectures", "<sep>", "dynamic", "rescheduling", "<sep>", "disk", "caching", "<sep>", "replacement", "policy", "<sep>", "memory", "management"], ["instruction", "level", "parallelism", "<sep>", "scheduling", "<sep>", "super", "blocks", "<sep>", "compiler", "optimization", "<sep>", "performance", "<sep>", "algorithms", "<sep>", "experimentation", "<sep>", "measurement", "<sep>", "profile", "driven", "scheduling", "<sep>", "instruction", "level", "parallelism"], ["modulo", "scheduling", "<sep>", "control", "flow", "<sep>", "superblock", "<sep>", "hyperblock", "<sep>", "loop", "scheduling", "<sep>", "loop", "removal"], ["conditional", "branch", "prediction", "<sep>", "high", "performance", "<sep>", "resource", "allocation", "<sep>", "dynamic", "confidence", "<sep>", "dynamic", "branch", "prediction", "<sep>", "dynamic", "confidence", "<sep>", "dynamic", "branch", "prediction", "<sep>", "dynamic", "scheduling"], ["instruction", "fetch", "mechanism", "<sep>", "vliw", "architecture", "<sep>", "compressed", "instruction", "<sep>", "instruction", "cache", "<sep>", "instruction", "cache", "<sep>", "i", "fetch", "<sep>", "silo", "cache", "<sep>", "i", "fetch", "<sep>", "i", "fetch", "<sep>", "i", "fetch", "<sep>", "performance", "<sep>", "instruction", "set", "<sep>", "instruction", "set", "<sep>", "instruction", "set", "<sep>", "instruction", "set"], ["optical", "flow", "<sep>", "parametric", "models", "<sep>", "local", "deformations", "<sep>", "motion", "estimation", "<sep>", "motion", "estimation", "<sep>", "motion", "estimation", "<sep>", "motion", "estimation", "<sep>", "motion", "estimation", "<sep>", "motion", "estimation", "<sep>", "motion", "estimation", "<sep>", "motion", "tracking"], ["scale", "space", "<sep>", "quadratic", "feature", "detectors", "<sep>", "hilbert", "transform", "<sep>", "fractional", "derivatives", "<sep>", "feature", "extraction", "<sep>", "feature", "extraction"], ["software", "pipelining", "<sep>", "loop", "scheduling", "<sep>", "linear", "scheduling", "<sep>", "resource", "constrained", "scheduling", "<sep>", "compiler", "optimization"], ["fully", "commutative", "elements", "<sep>", "coxeter", "groups", "<sep>", "bruhat", "ordering", "<sep>", "distributive", "lattice", "<sep>", "weak", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering", "<sep>", "bruhat", "ordering"], ["delay", "<sep>", "interconnect", "<sep>", "ramp", "input", "<sep>", "elmore", "delay", "<sep>", "interconnect", "modeling"], ["register", "transfer", "level", "<sep>", "switching", "activity", "<sep>", "power", "consumption", "<sep>", "piecewise", "linear", "models", "<sep>", "power", "estimation", "<sep>", "low", "power", "design"], ["interconnect", "sizing", "<sep>", "transistor", "delay", "model", "<sep>", "simultaneous", "driver", "buffer", "<sep>", "wire", "sizing", "<sep>", "physical", "design"], ["vlsi", "circuit", "partitioning", "<sep>", "iterative", "improvement", "<sep>", "fiduccia", "mattheyses", "<sep>", "look", "ahead", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad", "<sep>", "vlsi", "cad"], ["fail", "silent", "node", "<sep>", "fault", "tolerance", "<sep>", "fail", "node", "<sep>", "distributed", "system", "design", "<sep>", "fault", "tolerant", "software"], ["parallel", "prefix", "<sep>", "resource", "constraints", "<sep>", "bound", "computation", "<sep>", "harmonic", "schedules", "<sep>", "harmonic", "schedules", "<sep>", "harmonic", "schedules", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "harmonic", "schedules", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "p", "processors", "<sep>", "harmonic", "schedules", "<sep>"], ["latch", "<sep>", "finite", "state", "machine", "<sep>", "logic", "synthesis", "<sep>", "logic", "synthesis"], ["rigidity", "checking", "<sep>", "point", "correspondences", "<sep>", "perspective", "projection", "<sep>", "structure", "from", "motion", "<sep>", "3d", "recovery", "<sep>", "3d", "reconstruction"], ["focus", "range", "<sep>", "depth", "from", "defocus", "<sep>", "blur", "estimation", "<sep>", "illumination", "pattern", "<sep>", "real", "time", "sensor"], ["motion", "estimation", "<sep>", "quadtree", "<sep>", "multiresolution", "<sep>", "preconditioners", "<sep>", "hierarchical", "basis", "<sep>", "hierarchical", "representation", "<sep>", "adaptive", "refinement"], ["petri", "nets", "<sep>", "ada", "tasking", "<sep>", "deadlock", "<sep>", "reachability", "analysis", "<sep>", "reduction", "rules", "<sep>", "model", "checking"], ["distributed", "programming", "<sep>", "global", "predicate", "<sep>", "global", "predicate", "<sep>", "global", "predicate", "<sep>", "global", "predicate", "<sep>", "global", "predicate", "<sep>", "global", "predicate", "<sep>", "algorithm", "<sep>", "fifo", "<sep>", "ordering", "<sep>", "global", "predicate", "detection", "<sep>", "global", "predicate", "detection"], ["untestable", "path", "delay", "faults", "<sep>", "nonrobust", "test", "<sep>", "functional", "sensitizable", "path", "<sep>", "functional", "sensitizable", "path", "<sep>", "functional", "sensitizable", "path", "<sep>", "functional", "sensitizable", "path", "<sep>", "functional", "sensitizable", "path", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "nonrobust", "test", "<sep>", "functional", "test", "<sep>", "functional", "test"], ["stability", "radii", "<sep>", "stochastic", "uncertainty", "<sep>", "output", "feedback", "<sep>", "dynamic", "linear", "matrix", "inequality", "<sep>", "mu", "synthesis", "<sep>", "stochastic", "optimization"], ["preconditioning", "<sep>", "orthogonal", "collocation", "equations", "<sep>", "boundary", "value", "problems", "<sep>", "finite", "difference", "methods", "<sep>", "iterative", "methods"], ["software", "reuse", "<sep>", "repository", "<sep>", "classification", "<sep>", "concept", "peel", "<sep>", "software", "evolution", "<sep>", "evolutionary", "computation"], ["graduated", "assignment", "<sep>", "graph", "matching", "<sep>", "subgraph", "isomorphism", "<sep>", "attributed", "relational", "graph", "matching", "<sep>", "attributed", "relational", "graph", "matching", "<sep>", "relaxation", "labeling", "<sep>", "graph", "matching", "in", "graphs", "<sep>", "graph", "matching", "in", "graphs", "<sep>", "graph", "algorithms"], ["first", "order", "isomorphism", "<sep>", "complexity", "classes", "<sep>", "first", "order", "projections", "<sep>", "berman", "hartmanis", "conjecture", "<sep>", "first", "order", "logic"], ["stochastic", "scheduling", "<sep>", "variable", "profile", "<sep>", "precedence", "constraints", "<sep>", "partially", "ordered", "set", "<sep>", "list", "policy", "<sep>", "forest", "<sep>", "forest", "<sep>", "forest", "<sep>", "forest", "<sep>", "forest", "<sep>", "out", "forest", "<sep>", "stochastic", "scheduling"], ["approximation", "<sep>", "computational", "complexity", "<sep>", "graph", "coloring", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set", "cover", "<sep>", "set"], ["self", "stabilization", "<sep>", "message", "driven", "protocols", "<sep>", "token", "passing", "<sep>", "automata", "theory", "<sep>", "distributed", "systems", "<sep>", "distributed", "systems", "<sep>", "distributed", "systems", "<sep>", "fault", "tolerance"], ["wormhole", "routing", "<sep>", "fat", "tree", "<sep>", "network", "of", "area", "<sep>", "fat", "tree", "<sep>", "network", "of", "area", "<sep>", "universal", "routing", "<sep>", "congestion", "control"], ["communication", "latency", "<sep>", "path", "multiplexing", "<sep>", "optically", "interconnected", "multiprocessor", "systems", "<sep>", "time", "slot", "switching", "<sep>", "time", "slot", "switching", "<sep>", "time", "slot", "switching", "<sep>", "time", "slot", "switching", "<sep>", "time", "slot", "switching", "<sep>", "time", "division", "multiplexing"], ["error", "detecting", "<sep>", "distributed", "algorithms", "<sep>", "fault", "tolerance", "<sep>", "distributed", "memory", "multiprocessors", "<sep>", "maximal", "fault", "index", "<sep>", "communication", "patterns", "<sep>", "distributed", "systems", "<sep>", "parallel", "processing", "<sep>", "performance", "evaluation"], ["parallel", "scheduling", "<sep>", "load", "balancing", "<sep>", "hypercube", "<sep>", "mesh", "<sep>", "runtime", "scheduling"], ["performance", "<sep>", "memory", "trade", "offs", "<sep>", "time", "warp", "<sep>", "cancelback", "<sep>", "ksr", "<sep>", "memory", "management", "<sep>", "memory", "performance", "evaluation"], ["crash", "resilience", "<sep>", "dynamic", "networks", "<sep>", "self", "stabilization", "<sep>", "self", "stabilization", "<sep>", "distributed", "algorithms", "<sep>", "fault", "tolerance"], ["graph", "partitioning", "<sep>", "sequential", "diagnosis", "<sep>", "diagnosability", "<sep>", "interconnection", "graph", "<sep>", "degree", "of", "diagnosability", "<sep>", "degree", "of", "diagnosability", "<sep>", "degree", "of", "diagnosability", "<sep>", "grid", "graph", "<sep>", "degree", "of", "diagnosability", "<sep>", "degree", "of", "diagnosability", "<sep>", "degree", "of", "diagnosability", "<sep>", "degree", "of", "diagnosability", "<sep>", "degree", "of", "diagnosability", "<sep>", "omega", "cube", "<sep>", "omega", "cube", "<sep>", "omega", "cube", "<sep>", "omega", "cube", "<sep>", "omega", "cube"], ["wormhole", "routing", "<sep>", "two", "dimensional", "meshes", "<sep>", "adaptive", "routing", "<sep>", "virtual", "networks", "<sep>", "interconnection", "networks"], ["energy", "consumption", "<sep>", "nomadic", "computing", "<sep>", "wireless", "communications", "<sep>", "wireless", "communications"], ["nfs", "<sep>", "wireless", "links", "<sep>", "mobile", "computing"], ["path", "migration", "<sep>", "dqdb", "<sep>", "routing", "<sep>", "source", "routing", "<sep>", "wireless", "networks"], ["supervisory", "control", "<sep>", "nondeterministic", "systems", "<sep>", "partial", "observation", "<sep>", "prioritized", "synchronization", "<sep>", "decentralized", "control", "<sep>", "centralized", "control", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "co", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "co", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>", "observability", "<sep>"], ["predictor", "corrector", "algorithm", "<sep>", "saddle", "point", "problem", "<sep>", "interior", "path", "following", "algorithm", "<sep>", "stochastic", "programming", "<sep>", "optimal", "control", "<sep>", "central", "path", "<sep>", "nonlinear", "programming"], ["high", "level", "synthesis", "<sep>", "design", "automation", "<sep>", "testability", "<sep>", "power", "efficiency", "<sep>", "reliability", "<sep>", "high", "level", "synthesis", "for", "low", "power"], ["complete", "orthogonal", "decomposition", "<sep>", "weighted", "least", "squares", "<sep>", "forward", "error", "analysis", "<sep>", "weighted", "least", "squares", "algorithm"]], "scores": [[0.8213254809379578, 0.6039106249809265, 0.99924635887146, 0.3180486261844635, 0.7354044914245605, 0.9963067770004272, 0.23458226025104523, 0.44299331307411194, 0.9971600770950317, 0.25646722316741943, 0.9948388934135437, 0.9964891672134399, 0.322223961353302, 0.9949566721916199, 0.6634721159934998, 0.1979416012763977, 0.8577248454093933], [0.2991574704647064, 0.9891389012336731, 0.19737780094146729, 0.760168194770813, 0.9953452944755554, 0.0845918282866478, 0.5582661628723145, 0.20772400498390198, 0.9533592462539673, 0.9971355199813843, 0.17434844374656677, 0.4211600720882416, 0.9958714842796326, 0.07194796949625015, 0.24152590334415436, 0.5315934419631958, 0.07155608385801315, 0.5342499017715454], [0.28152787685394287, 0.7027570009231567, 0.9975504279136658, 0.3793301284313202, 0.9793702960014343, 0.998977780342102, 0.2814021408557892, 0.4751014709472656, 0.9684866070747375, 0.29387760162353516, 0.6583436131477356, 0.8770395517349243, 0.13308227062225342, 0.5293464064598083, 0.4235020875930786], [0.4142712652683258, 0.6176978349685669, 0.9991580247879028, 0.17708556354045868, 0.9924936294555664, 0.12556305527687073, 0.9694287776947021, 0.9754055738449097, 0.11657920479774475, 0.47596046328544617, 0.20107589662075043, 0.5987827777862549, 0.08873505145311356, 0.5816625952720642, 0.19421665370464325], [0.3688303232192993, 0.7867085337638855, 0.9297354817390442, 0.17173904180526733, 0.2587406635284424, 0.9802015423774719, 0.21332773566246033, 0.6993096470832825, 0.5294874906539917, 0.06227177754044533, 0.4312434494495392], [0.628918468952179, 0.9283975958824158, 0.4173148274421692, 0.6021105051040649, 0.2953474819660187, 0.6473086476325989, 0.995834469795227, 0.13579285144805908, 0.9783786535263062, 0.0994630828499794, 0.08785470575094223], [0.6107616424560547, 0.7891207933425903, 0.9992189407348633, 0.27236485481262207, 0.4848065674304962, 0.8939089775085449, 0.1640944629907608, 0.5452533960342407, 0.8358753323554993], [0.42883238196372986, 0.9790763854980469, 0.5658151507377625, 0.996258020401001, 0.22137539088726044, 0.9842894673347473, 0.8869619965553284, 0.24625472724437714, 0.22941376268863678, 0.9852338433265686, 0.12573079764842987, 0.17302076518535614, 0.9080532789230347, 0.09373793005943298, 0.20128080248832703, 0.581023633480072, 0.7184522151947021], [0.22457148134708405, 0.787025511264801, 0.9969066977500916, 0.5721117854118347, 0.9831686019897461, 0.29803749918937683, 0.988639235496521, 0.9942516088485718, 0.9461480379104614, 0.20318810641765594, 0.9969218373298645, 0.9702692031860352, 0.22107185423374176, 0.80660080909729, 0.9950301647186279, 0.06846611201763153, 0.35195931792259216, 0.9820345640182495, 0.06392590701580048, 0.38861480355262756], [0.2305794060230255, 0.5971857309341431, 0.8106213212013245, 0.09605154395103455, 0.7323530316352844, 0.9956296682357788, 0.22473476827144623, 0.3606722354888916, 0.5330219268798828, 0.5545352101325989, 0.997272789478302, 0.21483685076236725, 0.6210165023803711, 0.6507525444030762, 0.12674807012081146, 0.5910962224006653], [0.5689025521278381, 0.8269326090812683, 0.8471972942352295, 0.3727322220802307, 0.9959815740585327, 0.7446330785751343, 0.9961968660354614, 0.9928465485572815, 0.24703249335289001, 0.9666023254394531, 0.9218288064002991, 0.15612496435642242, 0.3925968408584595, 0.40436410903930664], [0.7130799889564514, 0.9640476107597351, 0.9918001294136047, 0.1520509272813797, 0.8582631349563599, 0.8592299818992615, 0.1534091830253601, 0.4847206771373749, 0.5786198377609253, 0.182966411113739, 0.43674924969673157], [0.5302550792694092, 0.8946142196655273, 0.8931943774223328, 0.999313473701477, 0.8672055602073669, 0.7960110306739807, 0.9991832375526428, 0.6501190662384033, 0.9989118576049805, 0.9988352656364441, 0.34159785509109497, 0.9775043725967407, 0.9987327456474304, 0.15592320263385773, 0.9950264096260071, 0.6717164516448975, 0.9498611092567444, 0.10609960556030273, 0.9937908053398132, 0.5338883996009827, 0.921502947807312, 0.08084005862474442, 0.99298495054245, 0.4909898042678833, 0.8922794461250305, 0.08531321585178375, 0.19936716556549072, 0.5523097515106201, 0.09335501492023468, 0.18254126608371735], [0.4199346601963043, 0.9568999409675598, 0.5821163058280945, 0.99915611743927, 0.7676843404769897, 0.9883135557174683, 0.9986891150474548, 0.28240296244621277, 0.9983931183815002, 0.9895820617675781, 0.15447771549224854, 0.9020380973815918, 0.9411720633506775, 0.0736689493060112, 0.14322316646575928], [0.6168203353881836, 0.9988734126091003, 0.9987080097198486, 0.8768287301063538, 0.9643982648849487, 0.24557246267795563, 0.9535318613052368, 0.32137301564216614, 0.9964220523834229, 0.08880425244569778, 0.9691787958145142, 0.0624176450073719, 0.9596039056777954, 0.0521816685795784, 0.6491523385047913, 0.050503287464380264, 0.9450837969779968, 0.042773324996232986, 0.9604750871658325, 0.04710041359066963, 0.9661245346069336, 0.044819410890340805, 0.9698973298072815, 0.044602446258068085, 0.9703863859176636, 0.04406995698809624, 0.9693230390548706, 0.04532144218683243, 0.9695401787757874, 0.04591956362128258, 0.969053328037262, 0.044016286730766296, 0.9683607220649719, 0.042223285883665085, 0.9670759439468384, 0.04430028051137924, 0.9653871655464172, 0.046375490725040436, 0.9656000733375549, 0.043692395091056824, 0.9653105735778809, 0.0405220091342926, 0.8920907974243164, 0.040330175310373306, 0.23234713077545166, 0.3569362461566925], [0.5233967900276184, 0.9923645257949829, 0.25358307361602783, 0.9156295657157898, 0.668335497379303, 0.3173280954360962, 0.7738322615623474, 0.9965020418167114, 0.056281521916389465, 0.9785594344139099, 0.3854770362377167, 0.061610423028469086, 0.5310325622558594, 0.2853504717350006], [0.547961950302124, 0.9835035800933838, 0.2564241588115692, 0.7993162870407104, 0.9974877834320068, 0.16427555680274963, 0.4248298108577728, 0.6790292263031006, 0.09655726701021194, 0.36989372968673706, 0.5337005853652954, 0.0816827341914177, 0.36079713702201843], [0.41843411326408386, 0.8130820393562317, 0.9991468191146851, 0.6901915669441223, 0.7048419117927551, 0.4240310490131378, 0.9702796339988708, 0.814136266708374, 0.9992766976356506, 0.2053711712360382, 0.9734347462654114, 0.991986870765686, 0.12131007015705109, 0.9915685057640076, 0.9108823537826538, 0.9988811612129211, 0.13753381371498108, 0.561428964138031], [0.25868234038352966, 0.8547444343566895, 0.23539116978645325, 0.9374343752861023, 0.9985175728797913, 0.1649237424135208, 0.574590265750885, 0.9908549785614014, 0.2617614269256592, 0.4963047206401825, 0.6568664312362671, 0.11675562709569931, 0.663743793964386], [0.38294193148612976, 0.9058065414428711, 0.9985820055007935, 0.5983585119247437, 0.9359189867973328, 0.41204845905303955, 0.8342549800872803], [0.35505005717277527, 0.7756197452545166, 0.9523548483848572, 0.37545156478881836, 0.9984328150749207, 0.2267916351556778, 0.967119038105011, 0.21528470516204834, 0.9082320332527161, 0.9964396357536316, 0.2906239628791809, 0.7763105630874634, 0.14247335493564606, 0.9602156281471252, 0.9042162895202637, 0.12565237283706665, 0.863991916179657, 0.9897958636283875, 0.05835435912013054, 0.4111647605895996, 0.20691490173339844, 0.5734646916389465, 0.43692100048065186, 0.608387291431427, 0.6918227076530457, 0.5551201105117798, 0.8254315853118896], [0.7432666420936584, 0.972905695438385, 0.4635871648788452, 0.9983890056610107, 0.7842032313346863, 0.6190813779830933, 0.9939109086990356, 0.2928624451160431, 0.9782447218894958, 0.9959737658500671, 0.36880815029144287, 0.9885756373405457, 0.4876723289489746, 0.9990992546081543, 0.251589298248291, 0.7774521112442017, 0.6512314677238464, 0.9946826100349426, 0.4080240726470947, 0.6399426460266113, 0.4873577952384949, 0.881130576133728, 0.08304435759782791, 0.7812700867652893, 0.7671167254447937, 0.11442488431930542, 0.8655005693435669, 0.7912409901618958, 0.17329266667366028, 0.3390091359615326, 0.9847010374069214, 0.0771714448928833, 0.34416574239730835, 0.6909642815589905, 0.5970325469970703, 0.06665956974029541, 0.9053690433502197, 0.43313971161842346, 0.07588709145784378, 0.907497763633728, 0.38924023509025574, 0.08616142719984055, 0.4992764890193939, 0.8071844577789307, 0.06112569570541382, 0.48333999514579773, 0.8130620718002319, 0.06342695653438568, 0.4275265634059906, 0.19661438465118408], [0.35468757152557373, 0.9904810786247253, 0.9986905455589294, 0.23635882139205933, 0.9949953556060791, 0.6261221766471863, 0.9992226362228394, 0.22010409832000732, 0.2625408172607422, 0.8978676795959473, 0.14864566922187805, 0.21037964522838593, 0.4836408793926239, 0.10996752977371216, 0.3202376067638397], [0.6296809315681458, 0.9861456751823425, 0.999110996723175, 0.6394017338752747, 0.9981845021247864, 0.9881465435028076, 0.999255359172821, 0.33700457215309143, 0.9991372227668762, 0.8593966960906982, 0.9943126440048218, 0.13544616103172302, 0.22093051671981812], [0.477579802274704, 0.9273708462715149, 0.9990885257720947, 0.8042576313018799, 0.9764570593833923, 0.6200637221336365, 0.15832415223121643, 0.9981472492218018, 0.7170178890228271, 0.998306155204773, 0.19260892271995544, 0.9503436088562012], [0.8460871577262878, 0.9926884770393372, 0.9980759620666504, 0.3271734416484833, 0.9937227368354797, 0.2799638509750366, 0.9993808269500732, 0.4960371255874634, 0.07605943828821182, 0.535891056060791, 0.45328542590141296, 0.9987106323242188, 0.37713325023651123, 0.96043860912323, 0.2647499144077301, 0.8814774751663208, 0.13324826955795288, 0.8482877612113953, 0.07144995033740997, 0.9962312579154968, 0.38564643263816833], [0.43337568640708923, 0.9579684734344482, 0.9977843165397644, 0.2921951413154602, 0.48630061745643616, 0.746667206287384, 0.13411656022071838, 0.4555743336677551], [0.5647907853126526, 0.7409887313842773, 0.7637178301811218, 0.9985954165458679, 0.32732194662094116, 0.9984293580055237, 0.7895856499671936, 0.997653067111969, 0.17522825300693512, 0.997334361076355, 0.8430987000465393, 0.9987828135490417, 0.10473604500293732], [0.45697999000549316, 0.6135452389717102, 0.9986660480499268, 0.3741852939128876, 0.9957020878791809, 0.9980011582374573, 0.16723163425922394, 0.9766844511032104, 0.09730320423841476, 0.9334558248519897, 0.10668718814849854, 0.3737792670726776], [0.6759495139122009, 0.9752569198608398, 0.9239634871482849, 0.20753422379493713, 0.6524351239204407, 0.9981688261032104, 0.2616206705570221, 0.8930357694625854, 0.9982348680496216, 0.17182303965091705, 0.5098462104797363, 0.9979707598686218, 0.129022479057312, 0.9418758153915405, 0.08161803334951401, 0.18667061626911163, 0.5390496850013733, 0.1139952540397644, 0.21357473731040955, 0.5625110864639282, 0.09655828773975372, 0.24176426231861115, 0.5908775925636292, 0.07451575994491577, 0.20903393626213074, 0.5780104994773865, 0.06677880138158798, 0.20379406213760376, 0.534743070602417, 0.05985979363322258, 0.3872774541378021], [0.32094353437423706, 0.7374451756477356, 0.5904493927955627, 0.7044022679328918, 0.9978417158126831, 0.36068981885910034, 0.5367857217788696, 0.9974068999290466, 0.24074752628803253, 0.8555200099945068, 0.2417646050453186, 0.9853997826576233, 0.9968699812889099, 0.10909182578325272, 0.7872996926307678, 0.9970792531967163, 0.1721012443304062, 0.7752197980880737], [0.30608120560646057, 0.8191052675247192, 0.9980233907699585, 0.5045808553695679, 0.71397864818573, 0.9837328791618347, 0.1544722318649292, 0.3386581540107727, 0.9412710070610046, 0.13107657432556152, 0.2741190195083618, 0.6764497756958008, 0.09956210106611252, 0.25256088376045227], [0.7607191801071167, 0.8111847043037415, 0.27018028497695923, 0.9988590478897095, 0.9987177848815918, 0.2073846161365509, 0.9956071972846985, 0.6390463709831238, 0.9990344047546387, 0.1766444593667984, 0.9947757720947266, 0.9954087138175964, 0.18932779133319855, 0.8146542310714722, 0.9560760259628296, 0.23676103353500366, 0.8146790266036987, 0.13307176530361176, 0.884718120098114, 0.9943244457244873, 0.07950647175312042, 0.5143902897834778, 0.9894939064979553, 0.05651623010635376, 0.46137258410453796, 0.9821270108222961, 0.055650707334280014, 0.8456012010574341], [0.15775921940803528, 0.9376053810119629, 0.5655621886253357, 0.9990295171737671, 0.12068987637758255, 0.9477635622024536, 0.9984229803085327, 0.05911325663328171, 0.8239225745201111, 0.17352330684661865, 0.4776071608066559, 0.9878095388412476, 0.07811582088470459, 0.9971592426300049, 0.42675599455833435, 0.3096500337123871, 0.7531995177268982, 0.656335711479187, 0.05668822303414345, 0.9956569671630859, 0.3225858807563782, 0.22607402503490448, 0.6242988109588623, 0.4601413607597351, 0.05951415002346039, 0.20688146352767944, 0.5569884181022644, 0.4863416850566864, 0.06059902161359787, 0.719866931438446], [0.3984092175960541, 0.9979375600814819, 0.8572418689727783, 0.9992579817771912, 0.2714828550815582, 0.99754399061203, 0.9988433122634888, 0.1545914262533188, 0.9919067621231079, 0.989081621170044, 0.2550717890262604, 0.9983949065208435, 0.9991682767868042, 0.21246111392974854, 0.7234384417533875, 0.9978446960449219, 0.06866476684808731, 0.6813822388648987, 0.9940791130065918, 0.06047402322292328, 0.6215404272079468, 0.9892681241035461, 0.055569663643836975, 0.5692718625068665, 0.9856547713279724, 0.051814302802085876, 0.5350358486175537, 0.979484498500824, 0.056525781750679016, 0.5316941142082214, 0.9807842969894409, 0.05004670098423958, 0.5780702233314514, 0.9797772765159607, 0.04919061064720154, 0.15217901766300201], [0.45877689123153687, 0.8719989657402039, 0.6321094632148743, 0.7454555034637451, 0.9934638142585754, 0.1379321664571762, 0.5327622294425964, 0.9968833327293396, 0.30372434854507446, 0.6786677241325378, 0.24126069247722626, 0.49882593750953674, 0.6336157321929932, 0.1607264280319214, 0.7780064344406128, 0.520900547504425, 0.16160602867603302, 0.7924930453300476], [0.41860315203666687, 0.5419526696205139, 0.9986798167228699, 0.2236788421869278, 0.9966080188751221, 0.9615972638130188, 0.1615305095911026, 0.5454133152961731, 0.9915603995323181, 0.13254070281982422, 0.7373042106628418, 0.9923213124275208, 0.08537397533655167, 0.41643068194389343, 0.606282651424408, 0.08071562647819519, 0.34285447001457214, 0.23795998096466064], [0.30190029740333557, 0.9972705245018005, 0.38466718792915344, 0.9833890795707703, 0.4689148962497711, 0.8945006132125854, 0.17638567090034485, 0.8706348538398743, 0.21936167776584625, 0.7647318840026855, 0.1130063533782959, 0.1997217983007431, 0.2530055642127991, 0.3684118092060089, 0.62115877866745, 0.12796556949615479, 0.4343317449092865, 0.5035141110420227, 0.08450394868850708, 0.5155898928642273, 0.5193256735801697, 0.07136906683444977, 0.2415757030248642, 0.2866232395172119, 0.563372015953064, 0.13187912106513977, 0.1999957412481308, 0.5740962624549866, 0.5600338578224182, 0.13385887444019318, 0.20445995032787323, 0.6466821432113647, 0.5331306457519531, 0.1439564973115921, 0.176596000790596, 0.7213179469108582, 0.5059626698493958, 0.13944178819656372, 0.18045106530189514, 0.76507568359375, 0.5000354051589966, 0.1317732334136963, 0.17990946769714355, 0.8053281307220459], [0.2793007791042328, 0.6191547513008118, 0.9974639415740967, 0.3013676702976227, 0.9939379692077637, 0.9914777874946594, 0.10973791778087616, 0.9630754590034485, 0.9866900444030762, 0.08554302155971527, 0.9514822363853455, 0.9969442486763, 0.10530609637498856, 0.9419792890548706, 0.5380071401596069, 0.578006386756897, 0.0721687376499176, 0.8503559827804565, 0.5152791738510132], [0.7528038620948792, 0.9957062602043152, 0.9452939033508301, 0.9746930599212646, 0.21375028789043427, 0.9512065649032593, 0.9968703389167786, 0.1808682382106781, 0.18400731682777405, 0.6905873417854309, 0.09079930186271667, 0.2828105092048645], [0.2907257080078125, 0.47115358710289, 0.7987657785415649, 0.9988592863082886, 0.3393242061138153, 0.9694808125495911, 0.4841938018798828, 0.5485694408416748, 0.9833083152770996, 0.5343050360679626, 0.9991669654846191, 0.32310861349105835, 0.9340559244155884, 0.9975065588951111, 0.12020253390073776, 0.7290771007537842, 0.9956170320510864, 0.0913362205028534, 0.5535354614257812, 0.99429851770401, 0.08125852048397064, 0.4441203773021698, 0.9906942248344421, 0.08026330918073654, 0.36635446548461914, 0.5180759429931641, 0.07991110533475876, 0.39146071672439575], [0.7321602702140808, 0.40987369418144226, 0.999042809009552, 0.2846085727214813, 0.9991600513458252, 0.5003051161766052, 0.2050667703151703, 0.8879122734069824, 0.23862884938716888, 0.5396043658256531, 0.2755505442619324, 0.6380706429481506, 0.1094084084033966, 0.2881377935409546, 0.7020482420921326], [0.31678977608680725, 0.9228625893592834, 0.7438596487045288, 0.997969925403595, 0.28242841362953186, 0.9933668971061707, 0.26333901286125183, 0.9335682988166809, 0.9959203004837036, 0.1935298889875412, 0.8022905588150024, 0.8571210503578186, 0.09635119885206223, 0.9799165725708008, 0.9983250498771667, 0.7059107422828674, 0.975143551826477, 0.11388622969388962, 0.8847571611404419, 0.7099460363388062, 0.09153470396995544, 0.8097226023674011, 0.6446207165718079, 0.07767464220523834, 0.7536864280700684, 0.5585265159606934, 0.0765276774764061, 0.39695873856544495], [0.24750284850597382, 0.5424920320510864, 0.1818126142024994, 0.7870598435401917, 0.9668485522270203, 0.9990720748901367, 0.4004848003387451, 0.9715078473091125, 0.11724391579627991, 0.3215973973274231, 0.694294273853302, 0.10322337597608566, 0.2320801317691803], [0.48385053873062134, 0.979032039642334, 0.2192777544260025, 0.9978293776512146, 0.3220973312854767, 0.2649153470993042, 0.36795753240585327, 0.28282269835472107, 0.8625311851501465, 0.9919015765190125, 0.23990026116371155, 0.5423737168312073, 0.99687260389328, 0.0674106627702713, 0.9828401803970337, 0.8951401114463806], [0.3454788327217102, 0.9401884078979492, 0.9980698227882385, 0.21707677841186523, 0.3470296263694763, 0.9983365535736084, 0.1508808434009552, 0.9627731442451477, 0.17191341519355774, 0.9937912821769714, 0.0924224853515625, 0.3045765459537506, 0.5702170133590698, 0.10757532715797424, 0.8861186504364014], [0.7808510661125183, 0.9958726763725281, 0.35703903436660767, 0.6482648253440857, 0.8570770025253296, 0.6855372190475464, 0.648229718208313, 0.5232595801353455, 0.6008314490318298, 0.68783038854599], [0.2482067048549652, 0.9611994624137878, 0.5388070940971375, 0.4787149429321289, 0.9993292093276978, 0.16486160457134247, 0.6960800886154175, 0.9463984370231628, 0.9984694123268127, 0.09313458204269409, 0.3081267476081848, 0.9739003777503967, 0.42432138323783875, 0.7770422697067261, 0.6684564352035522, 0.8079821467399597, 0.14063961803913116, 0.9711297154426575], [0.7550033330917358, 0.8636578917503357, 0.28390899300575256, 0.9645471572875977, 0.985299825668335, 0.07778439670801163, 0.3209720253944397, 0.07930681854486465, 0.17613524198532104, 0.7169151902198792, 0.5841125249862671, 0.06689347326755524, 0.3684323728084564, 0.08679739385843277, 0.4303354024887085, 0.1204114630818367, 0.4962254464626312, 0.19157646596431732, 0.5303369164466858, 0.3419508934020996, 0.5149574279785156, 0.44395318627357483, 0.507503867149353, 0.5618029236793518], [0.44602206349372864, 0.8241332769393921, 0.5656236410140991, 0.6617230772972107, 0.9843456149101257, 0.9821560978889465, 0.1425497829914093, 0.9831677079200745, 0.6022228002548218, 0.11387912929058075, 0.16195166110992432, 0.9321749806404114], [0.5297941565513611, 0.5558366775512695, 0.9849638342857361, 0.9658144116401672, 0.2674235701560974, 0.7877245545387268, 0.996914267539978, 0.24780917167663574, 0.9956401586532593, 0.9960846900939941, 0.0901094526052475, 0.581071138381958, 0.06371203064918518, 0.061064932495355606], [0.5769846439361572, 0.49373534321784973, 0.997912585735321, 0.20695193111896515, 0.9571725726127625, 0.9922009706497192, 0.145419180393219, 0.9264591932296753, 0.9574475884437561, 0.09398267418146133, 0.2865777313709259, 0.9482877850532532, 0.0823337510228157, 0.21378213167190552, 0.9244747161865234, 0.08189131319522858, 0.21304747462272644, 0.9112799167633057, 0.08015518635511398, 0.21335703134536743, 0.8992521166801453, 0.08066130429506302, 0.20393012464046478, 0.8872495293617249, 0.08060085028409958, 0.1807710975408554, 0.8786621689796448, 0.08221427351236343, 0.1740405559539795, 0.8811506628990173, 0.0824669599533081, 0.1915629506111145], [0.540634274482727, 0.33284685015678406, 0.9985702037811279, 0.9157364964485168, 0.8752642869949341, 0.9985538125038147, 0.21768318116664886, 0.545872688293457, 0.9920967817306519, 0.3035021126270294, 0.0749763548374176, 0.9508401155471802, 0.5578513145446777, 0.10203403234481812, 0.6638093590736389, 0.3281446099281311, 0.06390376389026642, 0.1925559937953949, 0.28204888105392456, 0.04685239493846893, 0.2214905172586441, 0.24664649367332458, 0.03733889013528824, 0.35768333077430725, 0.23136141896247864, 0.029623137786984444, 0.47265180945396423, 0.23055215179920197, 0.025996843352913857, 0.7045723795890808, 0.2006981372833252, 0.04227549582719803, 0.6857420802116394, 0.203297957777977, 0.039286065846681595, 0.6512823700904846, 0.2034274935722351, 0.04005449637770653, 0.34338700771331787, 0.180501326918602, 0.03544383868575096], [0.4128357470035553, 0.8163637518882751, 0.9979269504547119, 0.40745335817337036, 0.9944272041320801, 0.9726343154907227, 0.18359391391277313, 0.890261173248291, 0.9726454615592957, 0.08653923124074936, 0.19697053730487823], [0.5540949702262878, 0.993147075176239, 0.9985835552215576, 0.44597625732421875, 0.6648513674736023, 0.9990262985229492, 0.3695080280303955, 0.8967722058296204], [0.5426537394523621, 0.8108193278312683, 0.999300479888916, 0.3523354232311249, 0.989133894443512, 0.9881517291069031, 0.45204615592956543, 0.9969774484634399, 0.9960058331489563, 0.6115522980690002, 0.4683379530906677, 0.9912117123603821, 0.283304363489151, 0.5461841225624084, 0.8243333101272583, 0.9305122494697571, 0.13859334588050842, 0.3188081383705139, 0.6903109550476074, 0.08980982005596161, 0.2333216816186905, 0.7450001835823059, 0.7806168794631958, 0.0837765708565712, 0.2608536183834076, 0.6015380024909973, 0.08407612890005112, 0.21006283164024353, 0.811310887336731, 0.6105480790138245, 0.06577498465776443, 0.202955424785614, 0.5165764093399048, 0.07691104710102081, 0.17807959020137787], [0.676539421081543, 0.7848436832427979, 0.9826543927192688, 0.4350005090236664, 0.407711386680603, 0.7775130867958069, 0.9992629885673523, 0.280142217874527, 0.29164329171180725, 0.9904381632804871, 0.16748374700546265, 0.37212109565734863, 0.9367350935935974, 0.18325714766979218, 0.2012549638748169, 0.707857072353363, 0.10635815560817719, 0.819137454032898, 0.4163609445095062, 0.9635534882545471, 0.0856579840183258, 0.8829970359802246, 0.2682085931301117, 0.9082580804824829, 0.9371469020843506, 0.0899464413523674, 0.10249680280685425, 0.22570550441741943, 0.4588116705417633, 0.23610477149486542, 0.5874657034873962, 0.07885666191577911, 0.2215718924999237, 0.21669042110443115, 0.4685974717140198, 0.6829729080200195, 0.5382704138755798, 0.06998798996210098, 0.2184031903743744, 0.21163447201251984, 0.4336283504962921, 0.4130329191684723], [0.8250315189361572, 0.712547242641449, 0.34069740772247314, 0.9983587861061096, 0.43337664008140564, 0.6437612175941467, 0.997138261795044, 0.11920258402824402, 0.7478805780410767, 0.9574728012084961, 0.1848696917295456, 0.4056965708732605, 0.377824991941452, 0.9226566553115845, 0.12002004683017731, 0.7363476753234863], [0.4779532551765442, 0.9086812138557434, 0.9976546168327332, 0.9992227554321289, 0.35771802067756653, 0.5051242709159851, 0.9985437393188477, 0.9931758046150208, 0.21813979744911194, 0.473720908164978, 0.9951421022415161, 0.3110480308532715, 0.8950287103652954, 0.8190151453018188, 0.9987558126449585, 0.17568530142307281, 0.9928328990936279, 0.9825552701950073, 0.9988784193992615, 0.07894930988550186, 0.9505625367164612, 0.6040627360343933, 0.9712902903556824, 0.23334696888923645, 0.9991503953933716, 0.16088788211345673, 0.9991177916526794, 0.1202361136674881, 0.9990580677986145, 0.08711642026901245, 0.22608552873134613, 0.5884113907814026, 0.13689687848091125, 0.20709539949893951, 0.9651238918304443], [0.7901074290275574, 0.8295729160308838, 0.9089663028717041, 0.9987381100654602, 0.5326879024505615, 0.998847246170044, 0.9993100166320801, 0.6059953570365906, 0.9271384477615356, 0.6897767186164856, 0.9992738366127014, 0.381041944026947, 0.9797994494438171, 0.9604653120040894, 0.09880346804857254, 0.3553473949432373, 0.9907281398773193, 0.9616669416427612, 0.09793873876333237, 0.11962422728538513, 0.31671956181526184], [0.8437622785568237, 0.9944984316825867, 0.9665452837944031, 0.9700385332107544, 0.15326444804668427, 0.8989080190658569, 0.9645538330078125, 0.149065300822258, 0.48116105794906616, 0.5526578426361084, 0.1370619237422943, 0.8933061361312866, 0.9982951283454895, 0.25217530131340027], [0.3021918833255768, 0.9363408088684082, 0.9745527505874634, 0.29677125811576843, 0.5335385203361511, 0.06668615341186523, 0.9381927251815796, 0.09016457200050354, 0.9118883013725281, 0.9498119354248047, 0.7752639651298523, 0.0934319719672203, 0.3904310166835785], [0.22205595672130585, 0.8375392556190491, 0.357169508934021, 0.9986838698387146, 0.15018261969089508, 0.9989259839057922, 0.2892095446586609, 0.9992094039916992, 0.11727218329906464, 0.9991437196731567, 0.06295493990182877, 0.9220795631408691, 0.8445739150047302, 0.9972866773605347, 0.05176260322332382, 0.27558720111846924, 0.8617945909500122, 0.053805284202098846, 0.08999483287334442, 0.78987717628479, 0.06364329159259796, 0.09908933937549591, 0.7585006952285767, 0.06805993616580963, 0.10305236279964447, 0.7315337657928467, 0.07999773323535919, 0.11671791225671768, 0.737188458442688, 0.08650907874107361, 0.14457452297210693, 0.7479924559593201, 0.09417553246021271, 0.13396386802196503, 0.7308375835418701, 0.10277555882930756, 0.14340239763259888, 0.7242279648780823, 0.11070287972688675, 0.13769736886024475, 0.7268911004066467, 0.11182811111211777, 0.1180168017745018, 0.6930877566337585, 0.10291127115488052, 0.1092834398150444, 0.6858802437782288, 0.10857619345188141, 0.1015065535902977, 0.7031548023223877, 0.09930656105279922, 0.10543737560510635, 0.690535843372345, 0.10000985860824585, 0.10355436056852341, 0.6904924511909485, 0.09420610219240189, 0.08803445845842361, 0.7047279477119446, 0.09845250844955444], [0.44323214888572693, 0.9965370893478394, 0.9903344511985779, 0.16988904774188995, 0.5907741189002991, 0.864892303943634, 0.5662742257118225, 0.9600712060928345, 0.9944730401039124, 0.14239737391471863, 0.32602089643478394, 0.990190863609314, 0.11771894991397858, 0.7780185341835022, 0.9651273488998413, 0.12000811845064163, 0.5154361128807068, 0.24695630371570587], [0.7070413827896118, 0.9774414896965027, 0.9968852400779724, 0.605149507522583, 0.9982109069824219, 0.48652175068855286, 0.7724643349647522, 0.7827751040458679, 0.14070385694503784, 0.9062579274177551, 0.8654516339302063, 0.11800583451986313, 0.9476069211959839, 0.9742643237113953, 0.07880605757236481, 0.9366326928138733, 0.23689542710781097], [0.2736586928367615, 0.9994198083877563, 0.9990532994270325, 0.8983870148658752, 0.9499770402908325, 0.23081658780574799, 0.9984521865844727, 0.8671898245811462, 0.9985118508338928, 0.35087811946868896, 0.4637943208217621, 0.9967369437217712, 0.12411818653345108, 0.8106343746185303, 0.9211406707763672, 0.9825940728187561, 0.16825544834136963, 0.9858717322349548, 0.996860146522522, 0.9732697606086731, 0.153385192155838, 0.9980121850967407, 0.9571804404258728], [0.3539213240146637, 0.9979528188705444, 0.3116217851638794, 0.7045513987541199, 0.9248533844947815, 0.14486733078956604, 0.453301340341568, 0.9644225239753723, 0.13174648582935333, 0.5715554356575012, 0.6125989556312561, 0.07589701563119888, 0.23234154284000397], [0.28298303484916687, 0.4098784625530243, 0.9991012811660767, 0.3986686170101166, 0.9888414740562439, 0.8470917344093323, 0.9747656583786011, 0.9915636777877808, 0.14308114349842072, 0.8602488040924072, 0.9950346946716309, 0.16313104331493378, 0.389782577753067, 0.18059396743774414, 0.9275719523429871, 0.08979123830795288, 0.9167817234992981, 0.07716246694326401, 0.900293231010437, 0.06638550013303757, 0.8738963603973389, 0.06095781549811363, 0.8650177121162415, 0.05744089558720589, 0.8248164057731628, 0.0528358593583107, 0.7738232612609863, 0.05316390097141266, 0.7435978651046753, 0.05501421540975571, 0.7024381160736084, 0.05501997843384743, 0.648742139339447, 0.055594488978385925, 0.6407907605171204, 0.054333142936229706, 0.6479081511497498, 0.050289079546928406, 0.6082978248596191, 0.04856867343187332, 0.5405513048171997, 0.04908197745680809, 0.4833691716194153, 0.048714518547058105, 0.4851514399051666, 0.04727483168244362, 0.5650680065155029, 0.04503327235579491, 0.6252425909042358, 0.04416632652282715, 0.6160878539085388, 0.04412893205881119, 0.6203497052192688, 0.04385370388627052, 0.654327392578125, 0.043115243315696716, 0.6999439597129822, 0.043021928519010544, 0.73194819688797, 0.04236140474677086], [0.5467332005500793, 0.9970165491104126, 0.9988728165626526, 0.6763975024223328, 0.8594983816146851, 0.9991127848625183, 0.8317412734031677, 0.9991137385368347, 0.9988507032394409, 0.25410839915275574, 0.9864974617958069, 0.10904638469219208, 0.09602672606706619], [0.38678374886512756, 0.9987866282463074, 0.9969303011894226, 0.2557622790336609, 0.9948491454124451, 0.937057614326477, 0.7536102533340454, 0.9985693693161011, 0.23567479848861694, 0.9200994968414307, 0.9958744645118713, 0.18718475103378296, 0.8996334671974182, 0.8865923881530762, 0.5533492565155029, 0.9979307651519775, 0.08028736710548401, 0.34525588154792786], [0.5461317896842957, 0.8668221235275269, 0.9979532957077026, 0.5054802298545837, 0.8254555463790894, 0.9985923171043396, 0.18882036209106445, 0.43218857049942017, 0.5735129117965698, 0.0815986916422844, 0.7306343913078308], [0.675643801689148, 0.9380214810371399, 0.9984069466590881, 0.8401704430580139, 0.992254376411438, 0.9990596175193787, 0.784512460231781, 0.6722494959831238, 0.9986476302146912, 0.24219545722007751, 0.9959843158721924, 0.9794561266899109, 0.9946787357330322, 0.3333812355995178, 0.550749659538269, 0.21317780017852783, 0.6137081384658813, 0.25910839438438416, 0.4449255168437958], [0.573552668094635, 0.9973498582839966, 0.25373342633247375, 0.7453288435935974, 0.9989715814590454, 0.2904811203479767, 0.3968091905117035, 0.9848588109016418, 0.1873900592327118, 0.38792508840560913, 0.9548075795173645, 0.15576748549938202, 0.3205394148826599, 0.3436914384365082, 0.9248836636543274, 0.16133856773376465, 0.9434309601783752, 0.14798298478126526, 0.779340386390686, 0.09271874278783798, 0.7929489016532898], [0.6397525668144226, 0.8733009099960327, 0.9790807366371155, 0.4146687686443329, 0.8819325566291809, 0.998748779296875, 0.18465940654277802, 0.7037554383277893, 0.9956910014152527, 0.14852863550186157, 0.3263247311115265, 0.9965094923973083, 0.13737092912197113, 0.815129280090332], [0.38147446513175964, 0.8380510210990906, 0.9988273978233337, 0.5142183899879456, 0.812534749507904, 0.8863782286643982, 0.9970705509185791, 0.6820408701896667, 0.997391939163208, 0.9985705614089966, 0.1118888407945633, 0.9948599338531494, 0.8795616626739502, 0.996658444404602, 0.1414688527584076, 0.21853229403495789], [0.368759423494339, 0.998607337474823, 0.9062601923942566, 0.9971355199813843, 0.9985860586166382, 0.11613599956035614, 0.39295390248298645, 0.8481016159057617, 0.2408604621887207, 0.5802896022796631], [0.6360263824462891, 0.9871410131454468, 0.6114753484725952, 0.4137054979801178, 0.9829337000846863, 0.7605187892913818, 0.5854202508926392, 0.9461263418197632, 0.9957377910614014, 0.31588616967201233, 0.9503539204597473, 0.9974664449691772, 0.24982720613479614, 0.9465523362159729, 0.7948707342147827, 0.9977231621742249, 0.12072756141424179, 0.47357165813446045, 0.6515682935714722, 0.16113799810409546, 0.5235496163368225, 0.5926984548568726, 0.1498313993215561, 0.5333840847015381, 0.5836362242698669, 0.17477792501449585, 0.5132048726081848, 0.5403352379798889, 0.18179093301296234, 0.46306946873664856], [0.4487074315547943, 0.9027252793312073, 0.768149197101593, 0.5313392281532288, 0.49838268756866455, 0.3145347535610199, 0.6224411129951477, 0.9811584949493408, 0.6355648040771484, 0.714534342288971, 0.998548686504364, 0.1490471363067627, 0.1470348834991455], [0.27623286843299866, 0.9928207993507385, 0.2693283259868622, 0.4402160048484802, 0.7012508511543274, 0.9770093560218811, 0.7141766548156738, 0.23997452855110168, 0.988636314868927, 0.9843252897262573, 0.4495231509208679, 0.3122912049293518, 0.695816695690155, 0.17259588837623596, 0.2985195815563202, 0.5354613065719604, 0.11472900956869125, 0.29530853033065796], [0.7507357597351074, 0.9705383777618408, 0.9966225624084473, 0.4024774134159088, 0.5579068660736084, 0.9985631108283997, 0.15993358194828033, 0.2727292478084564, 0.9888940453529358, 0.11914507299661636, 0.2461784929037094, 0.49837079644203186, 0.07582827657461166, 0.19291351735591888, 0.5102348327636719], [0.3525572717189789, 0.9950302839279175, 0.27741539478302, 0.5061622858047485, 0.5763228535652161, 0.9992138147354126, 0.41807857155799866, 0.6331477165222168, 0.9989051818847656, 0.23971281945705414, 0.9759962558746338, 0.9733229279518127, 0.9942156672477722, 0.19251158833503723, 0.5698788166046143, 0.9987499713897705, 0.09942957013845444, 0.9929157495498657, 0.7820820212364197, 0.21898247301578522, 0.34745270013809204, 0.6924776434898376, 0.9457511901855469, 0.08747857809066772, 0.13349270820617676, 0.8181464076042175, 0.7609104514122009, 0.06968919932842255, 0.0851561576128006, 0.7985605001449585, 0.6227328181266785, 0.06913317739963531, 0.07336887717247009, 0.6823689341545105, 0.5002330541610718, 0.06462876498699188, 0.06788802146911621, 0.6533820629119873], [0.7185268998146057, 0.9926767349243164, 0.49494668841362, 0.9746348261833191, 0.6437146067619324, 0.7786415219306946, 0.39313986897468567, 0.996862530708313, 0.36638060212135315, 0.7818272709846497, 0.99931800365448, 0.5592922568321228, 0.987941324710846, 0.8240686058998108, 0.7297101020812988, 0.1594967246055603, 0.8350300788879395, 0.9985644221305847, 0.2227172553539276, 0.5992730259895325, 0.9841265082359314, 0.2735391855239868, 0.5708275437355042], [0.6620244383811951, 0.9813250303268433, 0.6488434076309204, 0.46192896366119385, 0.9415449500083923, 0.30410152673721313, 0.9909350275993347, 0.08969220519065857, 0.8014878034591675, 0.28795233368873596, 0.7583252787590027, 0.05395884066820145, 0.574668288230896, 0.03732788562774658, 0.5879647731781006], [0.6137714982032776, 0.9993444085121155, 0.9641684889793396, 0.9991466999053955, 0.44403740763664246, 0.8460320234298706, 0.9935417175292969, 0.5438398122787476, 0.3763446807861328, 0.9973485469818115, 0.24128350615501404, 0.9844312071800232, 0.9986147880554199, 0.09091704338788986, 0.3870745301246643, 0.9967465400695801, 0.17859241366386414, 0.9601302146911621, 0.9764373898506165, 0.11122654378414154, 0.43732166290283203], [0.45790955424308777, 0.7957679629325867, 0.998666524887085, 0.7320308685302734, 0.9753113389015198, 0.9387534856796265, 0.9993917942047119, 0.6067854166030884, 0.8504757285118103, 0.9855825901031494, 0.9990629553794861, 0.31460729241371155, 0.9377159476280212, 0.08623876422643661, 0.8660117387771606], [0.3788435161113739, 0.8445938229560852, 0.9944199919700623, 0.6981680989265442, 0.9940418601036072, 0.4413146674633026, 0.8992612957954407, 0.9991057515144348, 0.10468776524066925, 0.4572656452655792, 0.5343332886695862, 0.09074156731367111, 0.1494639664888382], [0.4553655683994293, 0.982069194316864, 0.8946270942687988, 0.8292183876037598, 0.4953732490539551, 0.7764379978179932, 0.9871013164520264, 0.9936643838882446, 0.1755734086036682, 0.9357820153236389, 0.9947240948677063, 0.17245042324066162, 0.7772544622421265, 0.8807005286216736, 0.10019863396883011, 0.9268919825553894, 0.061422016471624374, 0.8193527460098267], [0.39655837416648865, 0.8938815593719482, 0.976226270198822, 0.5497255325317383, 0.7123489379882812, 0.9989677667617798, 0.32135748863220215, 0.24908477067947388, 0.2750360667705536, 0.8983757495880127, 0.2518703043460846, 0.2580949068069458, 0.341993510723114, 0.6254755854606628, 0.25538554787635803, 0.32897987961769104, 0.1963462084531784, 0.5272030830383301, 0.18123561143875122, 0.36032840609550476, 0.2991642355918884], [0.4045135974884033, 0.573434591293335, 0.6684280037879944, 0.26737338304519653, 0.9694095253944397, 0.9964948296546936, 0.3472900092601776, 0.9991183876991272, 0.9950215816497803, 0.9941400289535522, 0.12588472664356232, 0.27322253584861755, 0.81678706407547, 0.07250823825597763, 0.5865278244018555, 0.1581566482782364], [0.638420045375824, 0.7667190432548523, 0.9979099631309509, 0.7202221155166626, 0.9731239676475525, 0.9984914064407349, 0.23635706305503845, 0.9448690414428711, 0.7263357639312744, 0.9906532764434814, 0.31009605526924133, 0.6650747656822205, 0.18541420996189117, 0.30101343989372253, 0.16457213461399078, 0.5217060446739197, 0.11624304950237274, 0.2814525365829468, 0.26323238015174866], [0.8815779089927673, 0.9734795689582825, 0.9986112117767334, 0.48151522874832153, 0.841423511505127, 0.9570985436439514, 0.9991231560707092, 0.16715244948863983, 0.9924560785293579, 0.9971137046813965, 0.2465192973613739, 0.9863339066505432, 0.9963181018829346, 0.23179179430007935, 0.8232320547103882, 0.9970589876174927, 0.28604087233543396, 0.7550489902496338, 0.6828716993331909, 0.1349111795425415, 0.5338118076324463, 0.9570543169975281, 0.9119962453842163, 0.13410279154777527, 0.19131363928318024, 0.891338050365448, 0.8590031266212463, 0.12209660559892654, 0.14566513895988464, 0.42583543062210083, 0.34875351190567017], [0.5242074728012085, 0.966853678226471, 0.7202615141868591, 0.9990384578704834, 0.6527891159057617, 0.2796463072299957, 0.9905305504798889, 0.2816789150238037, 0.5957663059234619, 0.9928794503211975, 0.2879485487937927, 0.9232702255249023, 0.2408161163330078, 0.47827649116516113, 0.950565755367279, 0.22850453853607178, 0.3989315330982208, 0.8829978704452515, 0.20798882842063904, 0.39230212569236755, 0.8445398807525635, 0.18762661516666412, 0.39820215106010437, 0.8277810215950012, 0.18288388848304749, 0.4092113971710205, 0.7512013912200928, 0.17619726061820984, 0.40359461307525635, 0.713286280632019, 0.17107652127742767, 0.38957837224006653, 0.6956194639205933, 0.16981256008148193, 0.3943013846874237, 0.670488715171814, 0.16077739000320435, 0.3746597170829773, 0.6446033120155334, 0.14850492775440216, 0.37303000688552856, 0.6256253719329834, 0.14758862555027008, 0.3625313341617584, 0.5736271142959595, 0.14293324947357178, 0.3532913327217102, 0.5863339900970459, 0.1439686119556427, 0.32475900650024414, 0.618206262588501, 0.13813462853431702, 0.3372466266155243, 0.5975993871688843, 0.13128358125686646, 0.3558276295661926, 0.3643709719181061, 0.11630942672491074, 0.3635006546974182, 0.40546199679374695], [0.6029343008995056, 0.4922439157962799, 0.9983737468719482, 0.14081676304340363, 0.9518007040023804, 0.8729602098464966, 0.9978988170623779, 0.2927127778530121, 0.6071262955665588, 0.10322409123182297, 0.9251694679260254, 0.9979827404022217, 0.07240515202283859, 0.9459388256072998, 0.17165081202983856, 0.5616984367370605, 0.08859258890151978, 0.9068444967269897, 0.19911721348762512], [0.2981409728527069, 0.9938414096832275, 0.9994781613349915, 0.8493863344192505, 0.9993327260017395, 0.2688252925872803, 0.6618486046791077, 0.9975231289863586, 0.2139333188533783, 0.9496685266494751, 0.604479968547821, 0.9990371465682983, 0.12752269208431244, 0.52017742395401, 0.8362230062484741, 0.9982228875160217, 0.1189224123954773, 0.6227919459342957, 0.8233987092971802, 0.9968031644821167, 0.09842760860919952, 0.6092476844787598, 0.9083039164543152, 0.9937945604324341, 0.0991375520825386, 0.6448059678077698, 0.8993685245513916, 0.9898175597190857, 0.09654669463634491, 0.7288819551467896, 0.9235657453536987, 0.9722597002983093, 0.10320929437875748, 0.7127243876457214, 0.923353374004364, 0.9449108839035034, 0.09552714973688126, 0.7480540871620178, 0.9046122431755066, 0.9355602264404297, 0.0918363630771637, 0.7262043952941895, 0.893154501914978, 0.9078704118728638, 0.08635476231575012, 0.6603986620903015, 0.8415871858596802, 0.8981353044509888, 0.0831616148352623, 0.6677149534225464, 0.8488309979438782, 0.9038081765174866, 0.08327147364616394, 0.6549012660980225, 0.8333554863929749, 0.8730819225311279, 0.07705758512020111, 0.6571179032325745, 0.830482006072998, 0.8420498967170715], [0.43153002858161926, 0.9007689356803894, 0.6698083877563477, 0.36229246854782104, 0.7141143679618835, 0.6310806274414062, 0.20034141838550568, 0.9518498778343201, 0.9141595959663391, 0.12506279349327087, 0.9984956979751587, 0.9264382123947144, 0.9060019850730896, 0.09378937631845474, 0.5664690732955933, 0.901362419128418, 0.07546915858983994, 0.6258897185325623, 0.22330941259860992, 0.2930803894996643, 0.5208842158317566, 0.07794955372810364, 0.18065008521080017, 0.33215081691741943], [0.5140692591667175, 0.9767465591430664, 0.8240314722061157, 0.808519184589386, 0.99870765209198, 0.402890682220459, 0.47250786423683167, 0.35098811984062195, 0.9980323910713196, 0.19302868843078613, 0.693676769733429, 0.07701132446527481, 0.20416314899921417, 0.9987772107124329, 0.07049663364887238, 0.6804391741752625, 0.3195417821407318, 0.9118916392326355, 0.15764863789081573, 0.8338300585746765, 0.11633875966072083, 0.48993921279907227, 0.8649817109107971, 0.6156672835350037, 0.09794891625642776, 0.4800799489021301, 0.892242968082428, 0.5380979180335999, 0.08422701060771942, 0.4422146677970886, 0.9021767377853394, 0.48781827092170715, 0.10288890451192856, 0.8055455088615417, 0.5037676692008972], [0.5755940079689026, 0.5629949569702148, 0.9884458780288696, 0.9092146754264832, 0.9945504069328308, 0.9990653395652771, 0.2847646474838257, 0.6221945881843567, 0.9591002464294434, 0.3001614212989807, 0.42208534479141235, 0.9898147583007812, 0.6498363614082336, 0.9834132194519043, 0.9967317581176758, 0.18116669356822968, 0.7600043416023254], [0.42789188027381897, 0.9988375306129456, 0.999188244342804, 0.5141342878341675, 0.9994727969169617, 0.8163972496986389, 0.6330916881561279, 0.21068978309631348, 0.7949361205101013, 0.10446871817111969, 0.7563892602920532, 0.9978506565093994, 0.08536830544471741, 0.4499732255935669], [0.3191104531288147, 0.48655200004577637, 0.11836282163858414, 0.36448079347610474, 0.5730306506156921, 0.14563502371311188, 0.5120235085487366], [0.2566268742084503, 0.9883630871772766, 0.22180138528347015, 0.5578116178512573, 0.998910665512085, 0.4191519021987915, 0.9859258532524109, 0.9984947443008423, 0.09577921777963638, 0.178570955991745, 0.23096875846385956, 0.5352434515953064, 0.07545489817857742, 0.16528041660785675, 0.22518771886825562], [0.2897827923297882, 0.8060498833656311, 0.4450574219226837, 0.481675922870636, 0.3951852023601532, 0.6779400110244751, 0.4743710458278656, 0.9992352724075317, 0.4131583571434021, 0.9987939596176147, 0.2708713710308075, 0.9974773526191711, 0.5330859422683716, 0.9994027614593506, 0.6441099047660828, 0.9993680119514465, 0.25248080492019653, 0.9991961121559143, 0.19603827595710754, 0.9936522245407104, 0.6740965843200684, 0.9993401169776917, 0.3319483697414398, 0.9994174242019653, 0.1944880336523056, 0.38610634207725525, 0.9972564578056335, 0.2628765106201172, 0.36046797037124634, 0.9039720296859741, 0.1155737116932869, 0.5486772060394287, 0.7137491703033447, 0.09241869300603867, 0.6827964782714844, 0.5760876536369324, 0.6764712333679199, 0.11680901795625687, 0.27046358585357666, 0.6250004768371582, 0.27096813917160034, 0.10638321936130524, 0.23859155178070068, 0.6164901256561279, 0.10601455718278885, 0.7855405807495117, 0.37765181064605713], [0.5275920629501343, 0.6918988823890686, 0.9992775321006775, 0.4067939221858978, 0.5745014548301697, 0.7759471535682678, 0.4573441445827484, 0.7855983972549438, 0.9892646670341492, 0.12466621398925781, 0.24893279373645782, 0.5205827355384827, 0.1483597457408905, 0.20669183135032654], [0.3975236415863037, 0.7956671118736267, 0.9987686276435852, 0.2918820083141327, 0.7295985221862793, 0.9133650660514832, 0.9951485991477966, 0.2197703719139099, 0.3591327965259552, 0.7899836301803589, 0.157074972987175, 0.16558510065078735, 0.5574177503585815, 0.19054818153381348, 0.07619516551494598, 0.5499320030212402], [0.47347337007522583, 0.9988231062889099, 0.9749237895011902, 0.9990463852882385, 0.7832419872283936, 0.9762914776802063, 0.9962749481201172, 0.5146465301513672, 0.9981532692909241, 0.9970766305923462, 0.1993233561515808, 0.9730879664421082, 0.9982870221138, 0.9959306120872498, 0.978329598903656, 0.17345605790615082, 0.8958773016929626, 0.9986211061477661, 0.7545211315155029, 0.9697619676589966, 0.14316920936107635, 0.9927971959114075, 0.9847081899642944, 0.9929519295692444, 0.11545167863368988, 0.7102552056312561, 0.541310727596283, 0.08538955450057983, 0.981801450252533, 0.9814317226409912, 0.9668371677398682, 0.0777866542339325, 0.9798423647880554, 0.9759180545806885, 0.9088221788406372, 0.08680964261293411, 0.5698642730712891, 0.35386309027671814, 0.08362067490816116, 0.9764180779457092, 0.9621138572692871, 0.8385258316993713, 0.0818217471241951, 0.3982029855251312, 0.2831733822822571, 0.07585655897855759, 0.5008584856987, 0.08149530738592148, 0.06958786398172379, 0.5281279683113098, 0.07852470129728317, 0.10124895721673965, 0.3239278197288513], [0.4949251413345337, 0.9356133341789246, 0.7440962195396423, 0.9985717535018921, 0.23311099410057068, 0.987139880657196, 0.14824342727661133, 0.17658287286758423, 0.6799952983856201, 0.3478272259235382, 0.14299942553043365, 0.5244332551956177, 0.3996083438396454, 0.15054407715797424, 0.45481446385383606, 0.3884100914001465, 0.15408703684806824], [0.17369958758354187, 0.9745663404464722, 0.2837195098400116, 0.9852572083473206, 0.6186208128929138, 0.9891570806503296, 0.3485576808452606, 0.9951521158218384, 0.5588447451591492, 0.9912185072898865, 0.21130293607711792, 0.8680793046951294, 0.9922288060188293, 0.10814104229211807, 0.25220316648483276, 0.9768702983856201, 0.07678280770778656, 0.20109392702579498, 0.9690802693367004, 0.07478821277618408, 0.216457799077034, 0.9704545140266418, 0.070365309715271, 0.1857096403837204, 0.9673998951911926, 0.0665324255824089, 0.514423131942749, 0.0425182580947876, 0.31967100501060486, 0.492396742105484, 0.06304138153791428, 0.37753957509994507], [0.40473777055740356, 0.9979028701782227, 0.5395445823669434, 0.9971491694450378, 0.29778599739074707, 0.8499706983566284, 0.7013639807701111, 0.8382148146629333, 0.9919004440307617, 0.9786246418952942, 0.1844767928123474, 0.9509174823760986, 0.9945878982543945, 0.15262790024280548, 0.5580547451972961, 0.9932343363761902, 0.2125983089208603, 0.8940667510032654, 0.6616750955581665, 0.3474244773387909, 0.8145995736122131, 0.06066489592194557, 0.5119739770889282, 0.12140852212905884], [0.3738429844379425, 0.9817824959754944, 0.9985374212265015, 0.34980323910713196, 0.9703006148338318, 0.5916154980659485, 0.9991039633750916, 0.20762944221496582, 0.9818135499954224, 0.48671433329582214, 0.17584355175495148, 0.95123291015625, 0.9912592768669128, 0.14325661957263947, 0.4553731381893158, 0.9436168074607849, 0.09472589939832687, 0.965856671333313, 0.41215693950653076], [0.6660073399543762, 0.9889132380485535, 0.6999402046203613, 0.1821288913488388, 0.5901105999946594, 0.9981566071510315, 0.0994921401143074, 0.9701583385467529, 0.13097161054611206, 0.6134127974510193, 0.08175810426473618, 0.5162511467933655], [0.27504903078079224, 0.8029110431671143, 0.9755024313926697, 0.4034113883972168, 0.9426705837249756, 0.5401360392570496, 0.8217609524726868, 0.9981325268745422, 0.7030231356620789, 0.988705575466156, 0.962285041809082, 0.38022708892822266, 0.9520122408866882, 0.5703189373016357, 0.9956297874450684, 0.08988972753286362, 0.46183890104293823, 0.9382191300392151, 0.2069959193468094, 0.5861306190490723, 0.9934285283088684, 0.09525293111801147, 0.2093672752380371, 0.9774012565612793, 0.06830643862485886, 0.12735800445079803], [0.4838130474090576, 0.9500420093536377, 0.9338479042053223, 0.9974810481071472, 0.24268729984760284, 0.6664321422576904, 0.9989799857139587, 0.2180117517709732, 0.9537508487701416, 0.9602124691009521, 0.14665091037750244, 0.8861855864524841, 0.781960129737854, 0.15299303829669952, 0.9608611464500427, 0.9182597994804382, 0.11636047065258026, 0.6482858061790466, 0.8919311761856079, 0.10741748660802841, 0.4880574941635132, 0.9201757311820984, 0.13853631913661957, 0.6163554191589355, 0.9104129672050476, 0.14743778109550476, 0.7788771390914917, 0.10205163061618805, 0.294182151556015], [0.7636297345161438, 0.7325927019119263, 0.970282256603241, 0.24208708107471466, 0.9594314098358154, 0.759502649307251, 0.4551100730895996, 0.9989997744560242, 0.1660257875919342, 0.3947140872478485, 0.5762600302696228, 0.10553373396396637, 0.8217502236366272], [0.24527814984321594, 0.48512545228004456, 0.6561741232872009, 0.35809528827667236, 0.5233054757118225, 0.8344801664352417, 0.31438925862312317, 0.997209370136261, 0.160522922873497, 0.9994392991065979, 0.6945328712463379, 0.08858618140220642, 0.9958927631378174, 0.09432707726955414, 0.47975954413414, 0.2519914507865906, 0.9976316690444946, 0.2115095853805542, 0.9609867334365845, 0.12637706100940704, 0.8140411972999573, 0.43424326181411743, 0.6981212496757507, 0.08978565037250519], [0.6671598553657532, 0.9985718727111816, 0.9981637597084045, 0.3435782492160797, 0.9527571201324463, 0.9979684948921204, 0.23954154551029205, 0.6853600740432739, 0.9932564496994019, 0.1312377005815506, 0.4776304364204407, 0.2840729355812073, 0.45967212319374084, 0.6655398011207581, 0.37518540024757385, 0.8088371753692627], [0.34366336464881897, 0.9649986624717712, 0.9256110191345215, 0.2602948248386383, 0.46934789419174194, 0.301697701215744, 0.7714877128601074, 0.12866269052028656, 0.13923810422420502], [0.2989042401313782, 0.5496634840965271, 0.9964279532432556, 0.3933769762516022, 0.26069051027297974, 0.9990308284759521, 0.22627748548984528, 0.936581552028656, 0.8699755668640137, 0.8994742035865784, 0.12517307698726654, 0.12006884813308716, 0.6801769137382507, 0.1672520935535431, 0.9334975481033325], [0.29373350739479065, 0.9937440752983093, 0.15724752843379974, 0.9701743721961975, 0.3368177115917206, 0.7664704322814941, 0.999210000038147, 0.2644146978855133, 0.6859616637229919, 0.9985089898109436, 0.09512853622436523, 0.7586928606033325, 0.994373083114624, 0.15108053386211395, 0.6167330145835876, 0.9975454211235046, 0.09833874553442001, 0.5315513610839844], [0.6216245889663696, 0.6532232165336609, 0.9990968704223633, 0.2178487330675125, 0.6835268139839172, 0.9984520673751831, 0.2922719717025757, 0.31877297163009644, 0.5169440507888794, 0.35830479860305786, 0.6304707527160645, 0.8845824003219604, 0.22247283160686493, 0.5428631901741028], [0.46589016914367676, 0.9294534921646118, 0.7087626457214355, 0.30835428833961487, 0.9030129313468933, 0.24448129534721375, 0.8725544214248657, 0.6047071814537048, 0.17091575264930725, 0.3319753110408783], [0.8275770545005798, 0.9884949326515198, 0.9987064599990845, 0.5186874270439148, 0.9988054037094116, 0.9890924692153931, 0.9990634322166443, 0.5094838738441467, 0.30648139119148254], [0.46044453978538513, 0.6576035618782043, 0.46310755610466003, 0.9793633222579956, 0.8664518594741821, 0.26190727949142456, 0.6272411942481995, 0.9992890357971191, 0.2996337115764618, 0.6942946314811707, 0.9975847005844116, 0.19620980322360992, 0.6611394286155701, 0.9582537412643433, 0.7775172591209412, 0.9983162879943848, 0.0821772888302803, 0.33088478446006775], [0.38904088735580444, 0.7246688008308411, 0.5175194144248962, 0.7906429171562195, 0.9986807703971863, 0.7591373324394226, 0.9005854725837708, 0.4672180712223053, 0.9025760889053345, 0.9780296087265015, 0.9929794669151306, 0.16034674644470215, 0.2821301519870758, 0.6051406860351562, 0.04542050138115883, 0.17455615103244781], [0.8539137840270996, 0.6932790279388428, 0.9992886781692505, 0.5513404607772827, 0.7069828510284424, 0.9989069700241089, 0.14112359285354614, 0.9721158146858215, 0.9928103685379028, 0.3118882477283478, 0.9791936278343201, 0.9981129169464111, 0.08842501789331436, 0.4488448202610016, 0.5466145277023315, 0.09705571085214615, 0.9834286570549011, 0.4563905894756317], [0.2889876961708069, 0.9842639565467834, 0.5914875864982605, 0.9970705509185791, 0.2931051254272461, 0.8506003022193909, 0.21616029739379883, 0.7324623465538025, 0.9869292974472046, 0.9914242625236511, 0.6013663411140442, 0.9871177077293396, 0.954348623752594, 0.08188942819833755, 0.9556238055229187, 0.7706688642501831, 0.04564819857478142, 0.8853996992111206], [0.820893406867981, 0.9605119228363037, 0.9985949397087097, 0.755083441734314, 0.9766790866851807, 0.9331774115562439, 0.9988952875137329, 0.1290733516216278, 0.9741405844688416, 0.1403178721666336, 0.8823291063308716, 0.9987020492553711, 0.24708031117916107, 0.6794626712799072], [0.42292848229408264, 0.9828813076019287, 0.9988307356834412, 0.34785568714141846, 0.4875182807445526, 0.9987321496009827, 0.7007824778556824, 0.9994623064994812, 0.9648153185844421, 0.9986699819564819, 0.199961319565773, 0.9986169338226318, 0.8721475601196289, 0.8853963613510132, 0.19006198644638062, 0.9185306429862976, 0.056181371212005615, 0.9858518838882446, 0.06805907934904099, 0.5731658935546875, 0.038585368543863297, 0.5773353576660156, 0.02386176958680153, 0.33217963576316833, 0.19090837240219116, 0.2107132226228714, 0.9991161227226257, 0.9406205415725708], [0.27503418922424316, 0.7864837646484375, 0.45653611421585083, 0.9977184534072876, 0.468880295753479, 0.960486650466919, 0.4800250828266144, 0.23504480719566345, 0.5082151293754578, 0.9976466298103333, 0.19477413594722748, 0.46848535537719727, 0.9694737195968628, 0.19774098694324493, 0.3262012004852295], [0.7551256418228149, 0.9981120824813843, 0.9992096424102783, 0.8045422434806824, 0.9990414977073669, 0.9908086657524109, 0.12262466549873352, 0.5049440264701843, 0.9990860223770142, 0.11477860063314438, 0.9895727038383484, 0.0699370801448822, 0.58065265417099, 0.6931526064872742, 0.99578458070755, 0.05525713786482811, 0.27336397767066956, 0.9081412553787231, 0.5361876487731934, 0.09266757220029831, 0.2683507204055786, 0.8282840847969055, 0.5879560112953186, 0.07402361929416656, 0.2434321939945221, 0.9053979516029358, 0.5789229869842529, 0.06035909801721573, 0.24938562512397766, 0.917458176612854, 0.5439778566360474, 0.04311375319957733, 0.23223106563091278], [0.8074308037757874, 0.9343919157981873, 0.8631616234779358, 0.9967511892318726, 0.9982700347900391, 0.4930030107498169, 0.9574893116950989, 0.1894119381904602, 0.3953506648540497, 0.7171355485916138, 0.7647700905799866], [0.5017717480659485, 0.862305760383606, 0.9687941074371338, 0.40642526745796204, 0.750978946685791, 0.983959972858429, 0.3312459886074066, 0.6094943284988403, 0.8848708868026733, 0.3552134037017822, 0.5249565839767456, 0.8760854005813599, 0.3625243008136749, 0.43237534165382385, 0.8122302293777466, 0.3575117290019989, 0.3829435408115387, 0.77889084815979, 0.3459903299808502, 0.3440883457660675, 0.7759159207344055, 0.3204982578754425, 0.3389936089515686, 0.8101339340209961, 0.30984705686569214, 0.3084821105003357, 0.8509199619293213, 0.294193297624588, 0.2808399796485901, 0.8720002174377441, 0.2597934901714325, 0.2825804054737091, 0.8713980913162231, 0.1772201806306839, 0.2742515802383423, 0.8476089835166931, 0.14413344860076904, 0.24772796034812927, 0.8421877026557922, 0.1200738400220871, 0.24455437064170837, 0.789789080619812, 0.09690627455711365, 0.22037065029144287, 0.6806691288948059, 0.08334168791770935, 0.20558077096939087, 0.6863721609115601, 0.07029302418231964, 0.19296607375144958, 0.6838841438293457, 0.05326581001281738, 0.19654470682144165, 0.6446658968925476, 0.04718349501490593, 0.177648663520813, 0.6294087171554565, 0.046387527137994766, 0.7260810136795044], [0.6431198120117188, 0.43197134137153625, 0.6439662575721741, 0.9858434796333313, 0.13696476817131042, 0.9956796765327454, 0.15584589540958405, 0.8276468515396118], [0.5549614429473877, 0.719770073890686, 0.9601256251335144, 0.3022496998310089, 0.700474202632904, 0.9990956783294678, 0.2259778082370758, 0.7058421969413757, 0.9797325134277344, 0.9990701079368591, 0.13666687905788422, 0.38381245732307434, 0.5671953558921814, 0.08866135776042938, 0.37103039026260376], [0.38078737258911133, 0.7399348616600037, 0.9982665777206421, 0.5844537019729614, 0.9980030655860901, 0.958045482635498, 0.999249279499054, 0.8147662281990051, 0.3529132604598999, 0.8769020438194275, 0.9860018491744995, 0.4445459246635437, 0.1715533435344696, 0.5585811734199524, 0.37102383375167847, 0.24258992075920105], [0.26321983337402344, 0.7313475608825684, 0.998625636100769, 0.2396618276834488, 0.9278668165206909, 0.9986458420753479, 0.18854422867298126, 0.8141537308692932, 0.5898192524909973, 0.995124876499176, 0.1764441728591919, 0.9482917785644531], [0.8583804368972778, 0.9520866870880127, 0.9877761602401733, 0.5922250747680664, 0.7964146137237549, 0.996757447719574, 0.6126183271408081, 0.923988401889801, 0.9986594915390015, 0.36733943223953247, 0.28264251351356506, 0.9920211434364319, 0.08178389817476273, 0.9775757789611816, 0.09722086042165756], [0.49721837043762207, 0.5972943305969238, 0.2967709004878998, 0.4981004297733307, 0.999311089515686, 0.15708620846271515, 0.3968731760978699, 0.9908009171485901, 0.11819618195295334, 0.5268588066101074, 0.6073570847511292, 0.10482583940029144, 0.6243237257003784, 0.5134177803993225, 0.08775817602872849, 0.5930848121643066], [0.26925307512283325, 0.9994932413101196, 0.527002215385437, 0.4946649372577667, 0.9989917874336243, 0.7502560019493103, 0.999357283115387, 0.5601205229759216, 0.9928228855133057, 0.9986363053321838, 0.9989522695541382, 0.3121775686740875, 0.625227153301239, 0.9988430738449097, 0.14854547381401062, 0.4760017693042755, 0.9230397343635559, 0.6752095818519592], [0.3920466899871826, 0.8421593904495239, 0.6382914781570435, 0.9354095458984375, 0.9812706708908081, 0.38159412145614624, 0.9211956262588501, 0.1286488026380539, 0.9433614611625671, 0.07825113832950592, 0.9569208025932312, 0.05721317231655121, 0.9571930170059204, 0.05489252507686615, 0.9559061527252197, 0.06037895753979683, 0.9574413299560547, 0.06373000890016556, 0.9475569725036621, 0.06525365263223648, 0.9191718697547913, 0.07373505085706711, 0.8801733255386353, 0.07414969056844711, 0.8484976887702942, 0.06539119780063629, 0.8216627240180969, 0.05741571635007858, 0.7662672996520996, 0.04931000620126724, 0.7157345414161682, 0.04879896342754364, 0.16487647593021393], [0.7585580348968506, 0.7956302165985107, 0.9990355968475342, 0.44690003991127014, 0.9827690720558167, 0.49913284182548523, 0.9992257356643677, 0.22106344997882843, 0.8576584458351135, 0.6764183044433594, 0.2431820034980774, 0.910969614982605, 0.13851581513881683, 0.9834604859352112, 0.5837593078613281, 0.8172434568405151, 0.1036849096417427, 0.2753634452819824, 0.5558388829231262, 0.0844002291560173, 0.22655045986175537, 0.5687151551246643, 0.08708952367305756, 0.23447878658771515, 0.5807237029075623, 0.09177453070878983, 0.25856414437294006, 0.5543991327285767, 0.09075203537940979, 0.29427018761634827, 0.5334275960922241, 0.09159774333238602, 0.30572450160980225, 0.5305728912353516, 0.09698948264122009, 0.3699524700641632, 0.5066564083099365, 0.10072700679302216, 0.40918925404548645, 0.5090344548225403, 0.10057875514030457, 0.4135356545448303, 0.4800775945186615, 0.09943507611751556, 0.39928993582725525, 0.4806135594844818, 0.09894580394029617, 0.40079712867736816, 0.4808741509914398, 0.10413990914821625, 0.3992626965045929, 0.4916447401046753, 0.09605316817760468, 0.38737252354621887, 0.5082417726516724, 0.09153680503368378, 0.3976316452026367, 0.5029271841049194, 0.09867744147777557, 0.4027169942855835], [0.21597500145435333, 0.5178926587104797, 0.8434339761734009, 0.4200800061225891, 0.9017340540885925, 0.9963731169700623, 0.1221470907330513, 0.8824525475502014, 0.991776704788208, 0.12701115012168884, 0.9815603494644165, 0.8975404500961304, 0.07800855487585068, 0.36539748311042786, 0.28581658005714417, 0.6585957407951355, 0.06184370070695877, 0.4268015921115875, 0.36316442489624023, 0.5429559350013733, 0.06026418134570122, 0.5504898428916931, 0.7012320756912231, 0.7887408137321472, 0.8648927807807922, 0.6411625742912292, 0.902038037776947], [0.28345203399658203, 0.9949106574058533, 0.3315781354904175, 0.7153720259666443, 0.9911800026893616, 0.2870478630065918, 0.8897835612297058, 0.19394445419311523, 0.5819627046585083, 0.9924506545066833, 0.2597184181213379, 0.43630242347717285], [0.600607693195343, 0.9840837121009827, 0.9969544410705566, 0.5635896325111389, 0.9825087785720825, 0.48417913913726807, 0.30142685770988464, 0.9983975291252136, 0.2894562780857086, 0.9985112547874451, 0.4673236906528473, 0.8552278280258179, 0.18800652027130127, 0.21323177218437195], [0.6798198223114014, 0.9771022200584412, 0.8255443572998047, 0.39035311341285706, 0.992900013923645, 0.7824745774269104, 0.6288200616836548, 0.9926736950874329, 0.26899656653404236, 0.8330264687538147, 0.9843016266822815, 0.9730668663978577, 0.8786762356758118, 0.9984954595565796, 0.29811203479766846, 0.9009181261062622, 0.999237060546875, 0.16241274774074554, 0.9853609204292297, 0.8541547060012817, 0.1377325803041458, 0.904029369354248, 0.8432425260543823, 0.9882767796516418, 0.09505151212215424, 0.15818922221660614, 0.40249601006507874, 0.9869096875190735, 0.528679370880127, 0.08645428717136383, 0.2377241998910904], [0.6003143787384033, 0.9787384867668152, 0.722383975982666, 0.4402139484882355, 0.996852695941925, 0.34339162707328796, 0.9941467046737671, 0.5838165879249573, 0.9977322816848755, 0.14233583211898804, 0.27895185351371765, 0.5024259686470032, 0.17984963953495026, 0.3162497580051422], [0.4361138343811035, 0.988420844078064, 0.5468738079071045, 0.949043333530426, 0.4883195459842682, 0.8692372441291809, 0.998925507068634, 0.07715023308992386, 0.9805924892425537, 0.21955157816410065, 0.6458988189697266, 0.0918547585606575, 0.1368672251701355], [0.2868243455886841, 0.720815896987915, 0.17070519924163818, 0.9010617136955261, 0.29673248529434204, 0.8289244771003723, 0.1344282478094101, 0.21541525423526764], [0.49634477496147156, 0.9378142952919006, 0.9991614818572998, 0.5571552515029907, 0.9788104295730591, 0.9989107847213745, 0.5306409001350403, 0.9444665908813477, 0.9619880318641663, 0.0789262130856514, 0.18935902416706085, 0.6391960978507996, 0.14627870917320251, 0.12677203118801117, 0.4999757409095764, 0.14953985810279846, 0.1573207676410675], [0.3451114296913147, 0.9929083585739136, 0.5564014315605164, 0.9145380854606628, 0.26681873202323914, 0.5383734107017517, 0.13655410706996918, 0.42707687616348267, 0.10127302259206772, 0.5165006518363953, 0.27691295742988586, 0.9979516863822937, 0.06676224619150162, 0.16424483060836792], [0.4848206341266632, 0.898205041885376, 0.38614901900291443, 0.8107632994651794, 0.9991316199302673, 0.4763045907020569, 0.4862031638622284, 0.9981675148010254, 0.11222220212221146, 0.5280759334564209, 0.9988307356834412, 0.14193566143512726, 0.8860281705856323, 0.9986057877540588, 0.2266903668642044, 0.7450628876686096, 0.9988002777099609, 0.15399403870105743, 0.4624106287956238], [0.5907368659973145, 0.5743948817253113, 0.999275267124176, 0.7381637692451477, 0.9932020306587219, 0.8456949591636658, 0.9993399977684021, 0.4987512528896332, 0.8522034287452698, 0.9984992742538452, 0.2145078033208847, 0.9019076824188232, 0.9975581169128418, 0.9986628293991089, 0.12191753089427948, 0.34980326890945435, 0.7400529980659485, 0.05924772098660469, 0.34207749366760254, 0.5871289968490601, 0.05159015953540802, 0.33996346592903137, 0.5555892586708069, 0.052430085837841034, 0.3203919529914856, 0.5450974702835083, 0.052034277468919754, 0.3103911578655243, 0.5054379105567932, 0.06148234009742737, 0.32953232526779175], [0.5477474927902222, 0.9799128770828247, 0.8967881798744202, 0.9815478324890137, 0.8435871005058289, 0.9992682337760925, 0.909741997718811, 0.9215425252914429, 0.9986153841018677, 0.4087330400943756, 0.9946702122688293, 0.2012595236301422, 0.993247389793396, 0.12727516889572144, 0.9921259880065918, 0.09429260343313217, 0.9916008710861206, 0.07256566733121872, 0.9904248118400574, 0.06697415560483932, 0.29674264788627625, 0.06413944810628891, 0.9499841332435608], [0.5963801741600037, 0.7546831965446472, 0.477516233921051, 0.5526219010353088, 0.2104412168264389, 0.5073725581169128, 0.16410201787948608, 0.8863286375999451, 0.03907249867916107, 0.9983781576156616, 0.09664848446846008, 0.7888940572738647, 0.06347053498029709, 0.9561516046524048, 0.10154090821743011, 0.9874622225761414, 0.09369806945323944, 0.7920216917991638, 0.30964896082878113, 0.7394974231719971, 0.030386654660105705, 0.84705650806427, 0.3937705457210541, 0.049659691751003265, 0.4997836649417877, 0.0425800122320652, 0.48486703634262085, 0.038694996386766434, 0.4718732535839081, 0.03617601469159126, 0.45796263217926025, 0.0348561555147171], [0.9372991323471069, 0.9487252831459045, 0.9992434978485107, 0.585920512676239, 0.9797866344451904, 0.9841585159301758, 0.31102678179740906, 0.8731102347373962, 0.13624942302703857, 0.1664290577173233, 0.5646786093711853, 0.31950101256370544, 0.18015794456005096, 0.5210261344909668, 0.34124186635017395, 0.17465730011463165, 0.5178534984588623, 0.3491804003715515, 0.17454558610916138, 0.5378949046134949, 0.3621407449245453, 0.15525057911872864, 0.5519901514053345, 0.38923180103302, 0.1720937043428421, 0.5307314395904541, 0.4204108715057373, 0.1764141470193863], [0.5159214735031128, 0.7575661540031433, 0.9986780285835266, 0.290676087141037, 0.9670937657356262, 0.9986728429794312, 0.15218575298786163, 0.4003138542175293, 0.9630886316299438, 0.1132136732339859, 0.43138450384140015, 0.9961530566215515, 0.12672549486160278, 0.321073979139328, 0.9951209425926208, 0.1054493710398674, 0.29898136854171753, 0.9941775798797607, 0.13394469022750854, 0.26975125074386597, 0.9924387335777283, 0.13413618505001068, 0.2571834623813629, 0.9940839409828186, 0.1271388679742813, 0.24236585199832916, 0.9937773942947388, 0.1163909062743187, 0.21719644963741302, 0.9934446811676025, 0.10378353297710419, 0.2093004435300827, 0.9923934936523438, 0.08508698642253876, 0.2030794322490692, 0.9904688000679016, 0.06689521670341492, 0.26894405484199524, 0.5205084085464478, 0.06835029274225235, 0.14374521374702454, 0.5969730615615845, 0.07172947376966476, 0.15587279200553894, 0.6124168634414673, 0.04753976687788963, 0.15315033495426178, 0.6660135388374329, 0.0450943186879158, 0.25647854804992676], [0.5471184849739075, 0.8312773704528809, 0.9910570383071899, 0.659082293510437, 0.9874301552772522, 0.9928994178771973, 0.8269702196121216, 0.6163462996482849, 0.9965465664863586, 0.16225698590278625, 0.976731538772583, 0.9939008951187134, 0.9911182522773743, 0.2528446316719055, 0.6818931102752686, 0.9967895150184631, 0.16875393688678741, 0.7862145304679871, 0.9905638694763184, 0.2444826066493988, 0.9963815212249756, 0.6224597096443176, 0.978171706199646, 0.14963115751743317, 0.9878701567649841, 0.6113436818122864, 0.9682862162590027, 0.14720554649829865, 0.5197591185569763], [0.5054344534873962, 0.9789886474609375, 0.998988687992096, 0.45555856823921204, 0.47237536311149597, 0.9993715882301331, 0.42005130648612976, 0.983729898929596, 0.8694154620170593, 0.9734821915626526, 0.25653600692749023, 0.9898394346237183, 0.18980208039283752, 0.31965386867523193], [0.2899755537509918, 0.9972403049468994, 0.7712715268135071, 0.962434709072113, 0.9032387137413025, 0.4062916934490204, 0.9965081810951233, 0.07636459916830063, 0.42008176445961, 0.996453046798706, 0.043477028608322144, 0.7152206897735596, 0.9962754249572754, 0.04348065331578255, 0.23654812574386597, 0.989520788192749, 0.0852075144648552, 0.9593572020530701, 0.22261202335357666, 0.8442938923835754, 0.21746055781841278, 0.7309963703155518, 0.08780086040496826, 0.5943148732185364, 0.5692005157470703, 0.08678421378135681, 0.6972820162773132, 0.5002864003181458, 0.06952828913927078, 0.7331010103225708], [0.6004537343978882, 0.9803197383880615, 0.5111956000328064, 0.6265895962715149, 0.9924222826957703, 0.6557403802871704, 0.9988155364990234, 0.5293418765068054, 0.7161176800727844, 0.9989302754402161, 0.7429392337799072, 0.6743969321250916, 0.999054491519928, 0.3896280527114868, 0.6077113747596741, 0.999101996421814, 0.23987048864364624, 0.47872301936149597, 0.9990115165710449, 0.246903195977211, 0.9958826303482056, 0.9991839528083801, 0.10689159482717514, 0.6262231469154358, 0.9989928603172302, 0.28326231241226196, 0.2920457720756531, 0.5277303457260132, 0.3290351629257202, 0.3972472846508026, 0.19323313236236572, 0.3286791741847992, 0.4444309175014496], [0.6273775100708008, 0.8747087121009827, 0.999273955821991, 0.3960481584072113, 0.9942352175712585, 0.862831175327301, 0.224248468875885, 0.8716243505477905, 0.9991300702095032, 0.4005366563796997, 0.8061922192573547, 0.9991661310195923, 0.26556891202926636, 0.9893620610237122, 0.3944655954837799, 0.21564820408821106, 0.9923801422119141, 0.1475754827260971, 0.9900314807891846, 0.9974449872970581, 0.09793476015329361, 0.8564445376396179, 0.5421687364578247, 0.8514273762702942, 0.137741819024086, 0.8581770658493042, 0.13698303699493408, 0.7361263036727905, 0.062312524765729904, 0.7124836444854736, 0.6004732251167297, 0.1836402267217636, 0.7404276132583618, 0.5198479294776917, 0.1962842494249344, 0.7536813020706177], [0.5164005160331726, 0.48585402965545654, 0.8024047613143921, 0.9992338418960571, 0.19526715576648712, 0.9863417744636536, 0.39983946084976196, 0.8212899565696716, 0.09940310567617416, 0.6534243226051331], [0.5140220522880554, 0.7452380657196045, 0.9988791346549988, 0.5907499194145203, 0.6122897863388062, 0.8271963596343994, 0.19455035030841827, 0.7525020241737366, 0.32748717069625854, 0.8324397206306458, 0.1083688959479332, 0.30739790201187134, 0.9574329257011414, 0.09896771609783173, 0.1943790465593338, 0.9063942432403564, 0.08363384008407593, 0.1842888593673706, 0.8464173674583435, 0.08428390324115753, 0.9386389851570129, 0.13125328719615936, 0.31909722089767456, 0.9862133860588074, 0.10845350474119186, 0.17614828050136566, 0.9771127700805664, 0.11598824709653854, 0.2080465853214264, 0.5489211678504944], [0.4229860305786133, 0.915686309337616, 0.957378089427948, 0.10061279684305191, 0.6954220533370972, 0.9983617663383484, 0.6913619041442871, 0.9985289573669434, 0.08381790667772293, 0.32284122705459595, 0.7616819143295288, 0.07535301148891449, 0.6373288035392761, 0.6126598119735718, 0.0725376307964325, 0.9331580996513367, 0.5708393454551697, 0.07332924008369446, 0.931186318397522, 0.5319673418998718, 0.0620371513068676, 0.9293839335441589, 0.529848039150238, 0.06402558833360672, 0.4748716652393341], [0.5295932292938232, 0.6272982358932495, 0.9654702544212341, 0.17593972384929657, 0.942470133304596, 0.8774375319480896, 0.9246870875358582, 0.10566540062427521, 0.46244096755981445, 0.10715235024690628, 0.5948001146316528, 0.17715942859649658, 0.6180561780929565, 0.42903932929039, 0.6232354640960693, 0.6453762650489807, 0.6173297762870789, 0.7725126147270203, 0.5732095241546631, 0.845391035079956, 0.5282629728317261, 0.8605666160583496, 0.5016341805458069, 0.8717501163482666], [0.3740045130252838, 0.5846408009529114, 0.9982726573944092, 0.7034626007080078, 0.9941809773445129, 0.9017419815063477, 0.31523430347442627, 0.9993371367454529, 0.6292464137077332, 0.1793426275253296, 0.622124433517456, 0.9668476581573486, 0.09629695117473602, 0.9974414110183716, 0.31287074089050293, 0.595871090888977, 0.12655845284461975, 0.3163628876209259], [0.3382202088832855, 0.7324476838111877, 0.9991264939308167, 0.14690494537353516, 0.8085995316505432, 0.45507165789604187, 0.9472870826721191, 0.9800728559494019, 0.04740584269165993, 0.17077170312404633, 0.6713089346885681, 0.04983660951256752, 0.37648993730545044], [0.37865278124809265, 0.5598275065422058, 0.9977420568466187, 0.2267802357673645, 0.9015018343925476, 0.9246501922607422, 0.13093248009681702, 0.18570037186145782, 0.13947665691375732, 0.7165524959564209, 0.14064978063106537, 0.3389633893966675, 0.2600525915622711, 0.5650955438613892, 0.1289794147014618, 0.3164196014404297, 0.24887776374816895, 0.4881303012371063, 0.10820470750331879, 0.28247323632240295, 0.291297972202301, 0.5060554146766663, 0.0957128033041954, 0.26200559735298157, 0.21225324273109436, 0.4915805757045746, 0.09027367830276489, 0.20603826642036438, 0.16731449961662292], [0.3532940745353699, 0.5315608978271484, 0.802909255027771, 0.9987980127334595, 0.34780004620552063, 0.9939578771591187, 0.970535397529602, 0.6319741606712341, 0.9986397624015808, 0.15120607614517212, 0.2965368926525116, 0.5101869702339172, 0.17674145102500916, 0.5329030156135559], [0.35461312532424927, 0.9771859645843506, 0.992783784866333, 0.5958772897720337, 0.8497520685195923, 0.999140739440918, 0.18459519743919373, 0.4210694432258606, 0.43189769983291626, 0.7882272601127625, 0.16407474875450134, 0.2543104290962219], [0.44532838463783264, 0.8535915613174438, 0.9076215028762817, 0.9868310689926147, 0.9712730050086975, 0.10580908507108688, 0.3561978042125702, 0.11785885691642761, 0.39724162220954895], [0.21344093978405, 0.9984225034713745, 0.23453983664512634, 0.5024053454399109, 0.8785803914070129, 0.16472478210926056, 0.993796706199646, 0.19832779467105865, 0.9958781003952026, 0.9648737907409668, 0.3161057233810425, 0.6567129492759705, 0.16427893936634064, 0.9985458850860596, 0.2716483473777771, 0.9992311000823975, 0.2165689766407013, 0.9486000537872314, 0.17333994805812836, 0.9420642256736755, 0.21606586873531342, 0.9993578791618347, 0.18825314939022064, 0.8271844387054443, 0.4738136827945709, 0.9987357258796692, 0.23412175476551056, 0.9941171407699585, 0.23228256404399872, 0.9872313141822815, 0.13392657041549683, 0.9739536046981812, 0.08644688129425049, 0.9882674813270569, 0.15341375768184662, 0.9840091466903687, 0.1530887335538864, 0.9834754467010498, 0.14432495832443237, 0.9821891188621521, 0.1329624205827713, 0.9775534272193909, 0.13163858652114868, 0.9729657173156738, 0.1300400048494339, 0.9707337021827698, 0.11982356011867523, 0.9704453349113464, 0.11312083899974823, 0.9689207673072815, 0.11494086682796478, 0.9636533260345459, 0.1122465580701828, 0.9584643244743347, 0.10158985108137131, 0.9606304168701172, 0.09456434100866318, 0.9682230353355408, 0.0955323800444603, 0.9728273749351501], [0.8011289238929749, 0.9946199655532837, 0.9980900883674622, 0.8330469727516174, 0.998948872089386, 0.9968134760856628, 0.46605417132377625, 0.9605690240859985, 0.9890651702880859, 0.9964975714683533, 0.10050975531339645, 0.545469343662262, 0.964918315410614, 0.9864029884338379, 0.08955642580986023, 0.5706897377967834, 0.30666330456733704, 0.9259047508239746, 0.09755309671163559, 0.2110942155122757, 0.27318352460861206], [0.24969683587551117, 0.9804291725158691, 0.9979885816574097, 0.6955706477165222, 0.8194668292999268, 0.9991891980171204, 0.3258824944496155, 0.9944508075714111, 0.6216763854026794, 0.9989275336265564, 0.2747191786766052, 0.5486363172531128, 0.6425542235374451, 0.29249945282936096, 0.37163373827934265, 0.493873655796051, 0.31217798590660095, 0.3720710873603821], [0.5402562618255615, 0.9992212057113647, 0.7610304951667786, 0.9991804957389832, 0.601957380771637, 0.9354109168052673, 0.9537466168403625, 0.47232329845428467, 0.3592427372932434, 0.999016523361206, 0.27879050374031067, 0.4253906011581421, 0.7316515445709229, 0.5698577165603638, 0.9627401232719421, 0.2021138221025467, 0.9033077359199524, 0.9878537654876709, 0.10344837605953217, 0.40119946002960205, 0.5359676480293274, 0.07017862051725388, 0.4658593535423279, 0.5025487542152405, 0.07120155543088913, 0.3948502540588379], [0.3520592451095581, 0.9910554885864258, 0.7339380383491516, 0.7563777565956116, 0.999099850654602, 0.08608249574899673, 0.4429250955581665, 0.5968772172927856, 0.7231022119522095, 0.0689377561211586, 0.3173915445804596], [0.3574325144290924, 0.774905264377594, 0.3689694404602051, 0.9972543120384216, 0.17535865306854248, 0.7041943073272705, 0.9986070990562439, 0.14875158667564392, 0.39726540446281433, 0.998969554901123, 0.23998014628887177, 0.7268155813217163, 0.662588357925415, 0.9976587295532227, 0.1318073272705078, 0.11117053776979446, 0.48786303400993347, 0.06934903562068939, 0.17293351888656616, 0.48304858803749084, 0.05637182295322418, 0.24283486604690552, 0.5127218961715698, 0.05204569548368454, 0.2952752411365509, 0.5129662156105042, 0.04826108738780022, 0.3530481457710266, 0.48682618141174316, 0.05156300961971283, 0.44160595536231995, 0.47771215438842773, 0.05747223645448685, 0.5079735517501831], [0.5059306025505066, 0.9023513197898865, 0.4260581135749817, 0.8600851893424988, 0.6391245126724243, 0.5400518178939819, 0.9957135915756226, 0.27202939987182617, 0.9963654279708862, 0.3082232177257538, 0.5822774767875671, 0.195320725440979, 0.9980751276016235, 0.21684975922107697, 0.9988710284233093, 0.23402689397335052, 0.9542644619941711, 0.8960622549057007, 0.10565845668315887, 0.7743128538131714, 0.9017345309257507, 0.11289703100919724, 0.6141326427459717, 0.20810088515281677], [0.8168444633483887, 0.8604536056518555, 0.9987970590591431, 0.13521552085876465, 0.2733110785484314, 0.9236785173416138, 0.09657035022974014, 0.28999754786491394, 0.5382102131843567, 0.10275379568338394, 0.255234956741333, 0.5107201337814331, 0.10824944823980331, 0.24018050730228424], [0.5513795018196106, 0.5092325210571289, 0.7150878310203552, 0.4750272035598755, 0.9991974234580994, 0.3088216483592987, 0.76189124584198, 0.7109649181365967, 0.9982131719589233, 0.22835631668567657, 0.9106994271278381, 0.28842929005622864, 0.88820481300354, 0.30257904529571533, 0.9716783761978149, 0.9475225806236267, 0.11302822828292847, 0.478691428899765, 0.1040286272764206, 0.24049773812294006, 0.33350279927253723, 0.12286625802516937, 0.24769768118858337, 0.2802690267562866, 0.1303648054599762, 0.26987573504447937], [0.433576762676239, 0.46386632323265076, 0.9986345171928406, 0.5222561359405518, 0.6216580867767334, 0.5143644213676453, 0.27363112568855286, 0.9095971584320068, 0.5734962821006775, 0.999398946762085, 0.2463439255952835, 0.45966920256614685, 0.9992497563362122, 0.11087996512651443, 0.6094939112663269, 0.14615213871002197, 0.785383939743042, 0.9987704157829285, 0.13929836452007294, 0.7744514346122742, 0.9987766146659851, 0.1700916290283203, 0.5248705148696899, 0.3119027614593506, 0.7744964957237244, 0.9988731741905212, 0.19746485352516174, 0.7553834319114685, 0.9983487129211426, 0.18122054636478424, 0.7513070106506348, 0.9975674152374268, 0.19040818512439728, 0.7556440234184265, 0.9970115423202515, 0.18832235038280487, 0.7678982019424438, 0.9971653819084167, 0.20064117014408112, 0.7720288038253784, 0.9963265061378479, 0.16363225877285004, 0.746303141117096, 0.9946889877319336, 0.20203588902950287, 0.9946411848068237, 0.16276884078979492, 0.9953896999359131, 0.1544150710105896, 0.7330400347709656, 0.9959197044372559, 0.16975626349449158, 0.7445088028907776, 0.9936050772666931, 0.16198506951332092, 0.7492110729217529, 0.9938183426856995, 0.15854260325431824, 0.7484248876571655, 0.9943175911903381], [0.40515199303627014, 0.9929297566413879, 0.9973920583724976, 0.32486921548843384, 0.9983874559402466, 0.5727463364601135, 0.5126755833625793, 0.6493252515792847, 0.21272550523281097, 0.9864422082901001, 0.5321788191795349, 0.9759442806243896, 0.10267261415719986, 0.22714990377426147, 0.4591034948825836, 0.08612438291311264, 0.2866993248462677], [0.34578442573547363, 0.5520172715187073, 0.4912305176258087, 0.9964975714683533, 0.19509755074977875, 0.15367728471755981, 0.09664026647806168, 0.5002457499504089, 0.5483663082122803, 0.10352536290884018, 0.08060025423765182], [0.7111915946006775, 0.8362765312194824, 0.7218092679977417, 0.47892796993255615, 0.7408972978591919, 0.9990901947021484, 0.3706941306591034, 0.9993311166763306, 0.9969280362129211, 0.19935815036296844, 0.8958720564842224, 0.9911589026451111, 0.8992410898208618, 0.11295894533395767, 0.9408584237098694, 0.9122993350028992, 0.08938991278409958, 0.4356432557106018, 0.9922282099723816, 0.6113079786300659, 0.08943484723567963, 0.34669405221939087, 0.6762158274650574, 0.10826905071735382, 0.46991395950317383, 0.5463873744010925, 0.0933283194899559, 0.5362608432769775, 0.3001863658428192, 0.5569064617156982, 0.07664892822504044, 0.43551456928253174, 0.804218590259552, 0.5369384288787842, 0.0825406014919281, 0.54655921459198, 0.719050407409668, 0.5075633525848389, 0.07684406638145447, 0.6196527481079102, 0.7114440202713013], [0.5360158681869507, 0.8771952986717224, 0.753497838973999, 0.6396048069000244, 0.759512186050415, 0.7454302310943604, 0.9032723307609558, 0.2667911946773529, 0.5855233669281006, 0.9938137531280518, 0.146251380443573, 0.5242002010345459, 0.9962912797927856, 0.12424423545598984, 0.537114679813385, 0.16298598051071167, 0.9181637763977051, 0.049196094274520874, 0.9107231497764587, 0.04262612760066986, 0.9203138947486877, 0.03848375752568245, 0.9269261956214905, 0.0452919602394104, 0.6653791069984436, 0.05525069683790207, 0.43860965967178345, 0.6567272543907166, 0.5104243755340576, 0.08003450930118561, 0.7143908739089966, 0.7316412329673767], [0.530478835105896, 0.784230649471283, 0.619907796382904, 0.4571143686771393, 0.8373064994812012, 0.3134201467037201, 0.7752811312675476, 0.37823486328125, 0.7446433901786804, 0.2619549632072449, 0.8115509748458862, 0.4569551348686218, 0.6103084087371826, 0.16717760264873505], [0.6399475932121277, 0.9884633421897888, 0.9534399509429932, 0.22059352695941925, 0.8168044090270996, 0.9983483552932739, 0.21667104959487915, 0.9798765778541565, 0.6941710114479065, 0.8961324691772461, 0.1764407902956009, 0.8218011856079102, 0.9933227896690369, 0.10197484493255615, 0.8971253037452698, 0.9984194040298462, 0.7430984377861023, 0.6401511430740356, 0.08412113785743713, 0.5836126804351807], [0.3800562918186188, 0.4272750914096832, 0.9420628547668457, 0.27484801411628723, 0.9968511462211609, 0.40001967549324036, 0.9899229407310486, 0.11024610698223114, 0.9407744407653809, 0.1587134301662445, 0.8211360573768616, 0.26813021302223206, 0.7600530385971069, 0.39732927083969116, 0.7499770522117615, 0.49724194407463074, 0.7329251766204834, 0.5713592767715454, 0.6970711946487427, 0.6472788453102112, 0.650303304195404, 0.6987263560295105, 0.6172756552696228, 0.7372976541519165, 0.5736880898475647, 0.7975130081176758, 0.5310346484184265, 0.8392812013626099, 0.4952642619609833, 0.8619735240936279], [0.8792954683303833, 0.7497451305389404, 0.9714203476905823, 0.29293423891067505, 0.5691480040550232, 0.9978644251823425, 0.1252959668636322, 0.6748493313789368, 0.9864814281463623, 0.11497332155704498, 0.6500810980796814, 0.9563191533088684, 0.13828961551189423, 0.2028738260269165], [0.42151665687561035, 0.5498587489128113, 0.7714028358459473, 0.9272345900535583, 0.9343289136886597, 0.9980146884918213, 0.6950746178627014, 0.551702082157135, 0.2172485738992691, 0.6722233891487122, 0.9948339462280273, 0.19979792833328247, 0.760074257850647, 0.6170482039451599, 0.07843922078609467, 0.5654301643371582], [0.816810667514801, 0.5312924385070801, 0.9830227494239807, 0.45309019088745117, 0.7071940302848816, 0.7525234222412109, 0.9942119717597961, 0.13079506158828735, 0.962428867816925, 0.8435734510421753, 0.1012081578373909, 0.503081202507019, 0.07870890945196152, 0.7167719006538391, 0.41977658867836, 0.7581068873405457, 0.060189977288246155, 0.701587975025177, 0.34693560004234314, 0.5963104367256165, 0.0576234869658947, 0.6794462203979492, 0.35215702652931213, 0.5290244817733765, 0.05734315514564514, 0.34526199102401733, 0.24292254447937012, 0.5973071455955505, 0.061816997826099396, 0.484703928232193, 0.5070869326591492, 0.6144305467605591, 0.06961548328399658, 0.4989498257637024, 0.4899236559867859, 0.6178744435310364, 0.07900212705135345, 0.5533699989318848, 0.44124698638916016, 0.6445080637931824, 0.0784711167216301, 0.5793406963348389, 0.3565446436405182, 0.6760817766189575, 0.0814632698893547, 0.6090030074119568, 0.2757960557937622, 0.6953083276748657, 0.0794912651181221, 0.6220852732658386], [0.43265876173973083, 0.6396186947822571, 0.9982290863990784, 0.1296774297952652, 0.9750571846961975, 0.9956652522087097, 0.2126004695892334, 0.6707293391227722, 0.5482057929039001, 0.9418157935142517, 0.9882689714431763, 0.2123243659734726, 0.721219003200531, 0.9949495792388916, 0.16931965947151184, 0.40253233909606934, 0.9761473536491394, 0.15896740555763245, 0.8613641858100891, 0.7765592336654663, 0.5899912118911743, 0.17039287090301514, 0.8558082580566406, 0.7677587270736694, 0.5581810474395752, 0.16250890493392944, 0.30100807547569275, 0.5232191681861877, 0.14735151827335358, 0.30573076009750366], [0.8103465437889099, 0.671073853969574, 0.9985278844833374, 0.6721625924110413, 0.9990371465682983, 0.5235835313796997, 0.19734402000904083, 0.9975225329399109, 0.22667691111564636, 0.9803494215011597, 0.9379751086235046, 0.6714726686477661, 0.9992372989654541, 0.21529555320739746, 0.999327540397644, 0.26751065254211426, 0.9991099238395691, 0.13382400572299957, 0.987194836139679, 0.27760255336761475, 0.9993280172348022, 0.2108495682477951, 0.9983955025672913, 0.24934381246566772, 0.9960241317749023, 0.2110237330198288, 0.9919223785400391, 0.18174147605895996, 0.9864909648895264, 0.15114133059978485, 0.9729218482971191, 0.12902778387069702, 0.9416967034339905, 0.11444008350372314, 0.9032755494117737, 0.10204210877418518, 0.8812875747680664, 0.10533090680837631, 0.9207048416137695, 0.389344185590744, 0.7163346409797668, 0.08922043442726135, 0.22265492379665375, 0.1946718692779541, 0.4842101037502289, 0.10027763247489929, 0.30368563532829285, 0.23476167023181915], [0.46499940752983093, 0.4213640093803406, 0.5333518385887146, 0.9854515194892883, 0.2598063349723816, 0.9005929231643677, 0.9981441497802734, 0.31459924578666687, 0.9982788562774658, 0.16197147965431213, 0.7649178504943848, 0.28257861733436584, 0.9773833751678467, 0.25441619753837585, 0.9844121336936951, 0.1769036203622818, 0.984027624130249, 0.11513260751962662, 0.9750596880912781, 0.08527871966362, 0.9528453946113586, 0.08774124830961227, 0.3124353587627411, 0.7357400059700012, 0.08498256653547287, 0.5132473707199097, 0.6000989675521851, 0.08386137336492538, 0.5212197303771973, 0.5092152953147888, 0.08142351359128952, 0.5877845883369446, 0.2524109482765198], [0.43712031841278076, 0.9504055380821228, 0.980496883392334, 0.9969754219055176, 0.3850457966327667, 0.9677085876464844, 0.8943877816200256, 0.03919106349349022, 0.5391915440559387, 0.500415563583374, 0.05401545390486717, 0.14481382071971893, 0.4086645543575287], [0.5265432000160217, 0.4552096128463745, 0.9990059733390808, 0.27858155965805054, 0.8538912534713745, 0.9977145195007324, 0.61979079246521, 0.34884077310562134, 0.9989749193191528, 0.3996553421020508, 0.37770915031433105, 0.9887774586677551, 0.16651201248168945, 0.15464191138744354], [0.32758262753486633, 0.9988917708396912, 0.6819753050804138, 0.9573932886123657, 0.5866183042526245, 0.9992884397506714, 0.3754661977291107, 0.9658318758010864, 0.9990110397338867, 0.40200015902519226, 0.9016026854515076, 0.9990957975387573, 0.2376939058303833, 0.995194137096405, 0.4253862202167511, 0.9985048770904541, 0.19207504391670227, 0.9984930753707886, 0.1428198516368866, 0.9984354376792908, 0.139016255736351, 0.9984694123268127, 0.18590736389160156, 0.9724158048629761, 0.2172965407371521, 0.9025384187698364, 0.21936891973018646, 0.8018269538879395, 0.1982506364583969, 0.6200871467590332, 0.17651014029979706, 0.4838274419307709, 0.17355360090732574, 0.4795013666152954, 0.9493321180343628, 0.21289727091789246, 0.6371275782585144, 0.9173805117607117, 0.19447173178195953, 0.5838131308555603, 0.8984039425849915, 0.199775829911232, 0.6057234406471252, 0.8376208543777466, 0.20121680200099945, 0.47993582487106323, 0.17639398574829102, 0.4938734173774719, 0.16741538047790527, 0.4713512063026428, 0.16840693354606628, 0.49658676981925964, 0.8161275386810303, 0.170316681265831, 0.6983945965766907, 0.1506621241569519, 0.733628511428833, 0.14029757678508759, 0.7775249481201172, 0.14016816020011902], [0.5590724945068359, 0.666316032409668, 0.999096155166626, 0.6921555399894714, 0.42511218786239624, 0.9982605576515198, 0.6125292778015137, 0.9986960291862488, 0.9974070191383362, 0.3028782606124878, 0.9656156301498413, 0.9981562495231628, 0.1829410195350647, 0.9612624049186707, 0.9990622401237488, 0.10354524850845337, 0.9153837561607361, 0.5569452047348022, 0.3275134861469269, 0.7735879421234131, 0.5708926916122437, 0.3484313488006592, 0.7639349102973938, 0.5996130108833313, 0.37738150358200073, 0.7594950199127197, 0.592328667640686, 0.3824969530105591, 0.7477399110794067, 0.5493460893630981, 0.3525489866733551, 0.6980595588684082, 0.500314474105835, 0.3273012340068817, 0.7071611881256104], [0.43522146344184875, 0.9899930357933044, 0.853657603263855, 0.9118718504905701, 0.8059049844741821, 0.9952699542045593, 0.32347771525382996, 0.9935592412948608, 0.2207111120223999, 0.9980921149253845, 0.4781726002693176, 0.7983019351959229, 0.3646325469017029, 0.672451376914978, 0.09735965728759766, 0.3720197081565857, 0.44151148200035095], [0.38731247186660767, 0.9938588738441467, 0.2938966155052185, 0.7379323244094849, 0.9975990653038025, 0.17581701278686523, 0.9494678378105164, 0.9986221790313721, 0.15376682579517365, 0.7084479331970215, 0.31136196851730347, 0.9969182014465332, 0.14471665024757385, 0.8728114366531372, 0.9963208436965942, 0.24541409313678741, 0.8253739476203918, 0.9956062436103821, 0.2651975750923157, 0.7805602550506592, 0.9937264919281006, 0.2494667023420334, 0.8120667934417725, 0.9908531308174133, 0.25165459513664246, 0.7841566205024719, 0.9898949265480042, 0.2592317461967468, 0.8319820761680603, 0.9872604608535767, 0.26935791969299316, 0.8425217270851135, 0.9703580141067505, 0.2680715024471283, 0.836183488368988, 0.7887814044952393, 0.28790155053138733, 0.8436028361320496, 0.6368657946586609, 0.2729845643043518, 0.8243893980979919, 0.3146083652973175, 0.2676514983177185, 0.8022286295890808, 0.400409460067749, 0.26106467843055725, 0.8199346661567688, 0.49048781394958496, 0.23755018413066864, 0.8035032153129578, 0.4403504729270935, 0.23064985871315002, 0.7818648219108582, 0.34206244349479675, 0.2192229926586151, 0.7564593553543091, 0.22662995755672455, 0.20659711956977844, 0.7861214876174927, 0.33241739869117737], [0.2481204718351364, 0.6956007480621338, 0.9976838827133179, 0.4526642858982086, 0.4435046315193176, 0.9992191791534424, 0.1908489465713501, 0.2970171272754669, 0.5906893610954285, 0.13968102633953094, 0.11830523610115051, 0.25914937257766724], [0.45120856165885925, 0.5469134449958801, 0.9988529682159424, 0.20365969836711884, 0.8291394710540771, 0.9958826303482056, 0.25759032368659973, 0.9939447045326233, 0.684493899345398, 0.10255429148674011, 0.9843887090682983], [0.5945456624031067, 0.7804500460624695, 0.9964964985847473, 0.36370280385017395, 0.8557695150375366, 0.22091896831989288, 0.9937313199043274, 0.2548372149467468, 0.4412534236907959, 0.9965502023696899, 0.11779449880123138, 0.6495092511177063, 0.9948486089706421, 0.07945229113101959, 0.6702962517738342, 0.9925243258476257, 0.060647059231996536, 0.6902686357498169, 0.9879134297370911, 0.05559040233492851, 0.5676206350326538], [0.8256530165672302, 0.9991132616996765, 0.9986703395843506, 0.3280186653137207, 0.8940293788909912, 0.9626309871673584, 0.9981164932250977, 0.10301696509122849, 0.9448754191398621, 0.9950438737869263, 0.1108957976102829, 0.34808120131492615], [0.3786329925060272, 0.9922702312469482, 0.8568423986434937, 0.41120898723602295, 0.6014062762260437, 0.9985563158988953, 0.49609458446502686, 0.8656218647956848, 0.5817365646362305, 0.25893646478652954, 0.8681044578552246], [0.6013411283493042, 0.9866417646408081, 0.5305534601211548, 0.9977983236312866, 0.494441419839859, 0.9994521737098694, 0.2777441143989563, 0.9992387294769287, 0.1874215006828308, 0.9992648959159851, 0.21100424230098724, 0.6616095900535583, 0.14820417761802673, 0.9992918968200684, 0.16983717679977417, 0.5770401954650879, 0.1705576777458191, 0.9984886646270752, 0.1555563509464264, 0.6524519324302673, 0.9993122816085815, 0.21275535225868225, 0.9961967468261719, 0.08293446898460388, 0.5855609178543091, 0.8922573924064636, 0.6988574266433716, 0.1401071846485138, 0.4293527901172638, 0.7010493278503418, 0.10905422270298004, 0.9801826477050781], [0.31661921739578247, 0.9863791465759277, 0.7601407766342163, 0.9991760849952698, 0.3893048167228699, 0.9952905178070068, 0.9963616728782654, 0.19810490310192108, 0.9725239276885986, 0.9621619582176208, 0.9980782270431519, 0.21267090737819672, 0.9946086406707764, 0.889433741569519, 0.9481034874916077, 0.21854132413864136, 0.1432606428861618], [0.536975622177124, 0.9717808961868286, 0.9895980358123779, 0.5867059826850891, 0.9315767288208008, 0.998863935470581, 0.3754214346408844, 0.9483521580696106, 0.9989964365959167, 0.4400557577610016, 0.7545177340507507, 0.9981564879417419, 0.19099833071231842, 0.9615806937217712, 0.34327635169029236, 0.9724630117416382, 0.29060253500938416, 0.9946228265762329, 0.11275530606508255, 0.9130460619926453, 0.07479476183652878, 0.3994685709476471, 0.5334486365318298, 0.0922645851969719, 0.5852411985397339, 0.49597296118736267, 0.06329959630966187, 0.6342429518699646], [0.9302296042442322, 0.9990906715393066, 0.9991967082023621, 0.35121557116508484, 0.9978452920913696, 0.9990154504776001, 0.25580260157585144, 0.9837521314620972, 0.9962199330329895, 0.20925571024417877, 0.9822795987129211, 0.5446834564208984, 0.9990144968032837, 0.2546316087245941, 0.986060619354248, 0.445470929145813, 0.9963095784187317, 0.08073222637176514, 0.17414236068725586], [0.3870771825313568, 0.9948364496231079, 0.2704671323299408, 0.9988018274307251, 0.4016548693180084, 0.9910286068916321, 0.1083180382847786, 0.18441075086593628, 0.774894118309021, 0.1355942338705063, 0.30129414796829224], [0.40742048621177673, 0.9864132404327393, 0.798288106918335, 0.9911854863166809, 0.48019418120384216, 0.9984596967697144, 0.13093188405036926, 0.36803340911865234], [0.24342185258865356, 0.7767418026924133, 0.7790449261665344, 0.8829695582389832, 0.2833568751811981, 0.8542379140853882, 0.335241436958313, 0.9960067868232727, 0.6376206874847412, 0.9987102746963501, 0.19820167124271393, 0.5137434601783752, 0.3822408616542816, 0.17221106588840485, 0.9980692267417908, 0.7688583135604858, 0.9972430467605591, 0.11026784777641296, 0.5870029926300049, 0.9158402681350708, 0.0828801766037941, 0.9968630075454712, 0.595018208026886, 0.9724076986312866, 0.08737437427043915, 0.5868897438049316, 0.6098161935806274], [0.7339462041854858, 0.6263008713722229, 0.9992945194244385, 0.6094526648521423, 0.672206461429596, 0.7146192193031311, 0.296968549489975, 0.9409588575363159, 0.28801122307777405, 0.9078940749168396, 0.9992119073867798, 0.18467840552330017, 0.904632568359375, 0.8324806094169617, 0.1567036360502243, 0.9527527689933777, 0.8255700469017029, 0.15419095754623413, 0.6278844475746155, 0.8554412126541138, 0.9791402816772461, 0.9950809478759766, 0.4556969106197357, 0.49924975633621216, 0.7015547156333923, 0.2050812840461731, 0.34151333570480347, 0.6163438558578491, 0.9967536330223083, 0.18104605376720428, 0.33086204528808594, 0.7071971893310547, 0.9787762761116028, 0.14374032616615295, 0.41012778878211975, 0.5477625727653503, 0.19464726746082306, 0.5042887926101685, 0.6357287168502808, 0.18516381084918976, 0.5464608073234558, 0.6445165872573853, 0.1696138083934784, 0.48856043815612793, 0.6248282790184021, 0.16142769157886505, 0.45024818181991577, 0.6444545984268188, 0.14545901119709015, 0.43625056743621826, 0.689063549041748, 0.14931190013885498, 0.39776650071144104, 0.7068005204200745, 0.14383789896965027, 0.3685406446456909, 0.712816596031189, 0.14523005485534668, 0.34059107303619385, 0.749868631362915], [0.4115501642227173, 0.9860926270484924, 0.9957718253135681, 0.15432687103748322, 0.6852997541427612, 0.23078979551792145, 0.4792003929615021, 0.9922796487808228, 0.09795677661895752, 0.28970786929130554, 0.5517584085464478, 0.04614495113492012, 0.2120118886232376, 0.16480372846126556, 0.19825546443462372], [0.9488978385925293, 0.9528018832206726, 0.9990505576133728, 0.8875248432159424, 0.9784547686576843, 0.9884004592895508, 0.11043132096529007, 0.6108150482177734, 0.99672532081604, 0.15273231267929077, 0.40419983863830566, 0.9946563243865967, 0.16166453063488007, 0.35225585103034973, 0.9933286905288696, 0.1626419872045517, 0.3370017409324646, 0.9934802055358887, 0.15945954620838165, 0.4054792821407318, 0.9941232800483704, 0.15399491786956787, 0.6797399520874023, 0.8430790901184082, 0.1021733507514, 0.27086687088012695, 0.9699880480766296, 0.1383724957704544, 0.25733116269111633, 0.9521393775939941, 0.15045104920864105, 0.2802553176879883, 0.9489833116531372, 0.13176123797893524, 0.3287826180458069, 0.9276186227798462, 0.10489638894796371, 0.3357394337654114, 0.9099147915840149, 0.10381466895341873, 0.3401755094528198, 0.9113603234291077, 0.08190421760082245, 0.7881376147270203, 0.5131953954696655, 0.11588913202285767, 0.7752004861831665], [0.6366555094718933, 0.8515727519989014, 0.9971101880073547, 0.23479662835597992, 0.9512522220611572, 0.9880908727645874, 0.2281104326248169, 0.6077751517295837, 0.9776846766471863, 0.2594640851020813, 0.5076386332511902, 0.9721689820289612, 0.28624972701072693, 0.47529172897338867, 0.9663418531417847, 0.31289830803871155, 0.5083563923835754, 0.940739631652832, 0.3396754562854767, 0.5188562273979187, 0.9397373795509338, 0.35789239406585693, 0.5173852443695068, 0.9016655683517456, 0.3427146375179291, 0.5065828561782837, 0.7453303337097168, 0.3478100299835205, 0.5159052014350891, 0.6192029714584351, 0.38876792788505554, 0.5066138505935669, 0.5021535754203796, 0.41202613711357117, 0.49314501881599426], [0.35284921526908875, 0.5668737292289734, 0.9888801574707031, 0.3083157241344452, 0.9319233894348145, 0.6654115319252014, 0.17894484102725983, 0.6461455225944519, 0.5720918774604797, 0.8238884210586548, 0.8161884546279907, 0.11481109261512756, 0.1301579624414444, 0.08575575053691864, 0.15526533126831055, 0.6374468207359314, 0.10027584433555603, 0.1876799464225769, 0.5976974368095398, 0.11664581298828125, 0.17788231372833252, 0.5742810964584351, 0.12033940851688385, 0.16852736473083496, 0.5729213356971741, 0.11282758414745331, 0.1605653017759323, 0.5610669851303101, 0.1256847381591797, 0.16224226355552673, 0.5399174690246582, 0.11585645377635956, 0.15675711631774902, 0.5034112334251404, 0.11902132630348206, 0.16609978675842285], [0.3361675441265106, 0.9946724772453308, 0.9981579184532166, 0.7420951724052429, 0.9970171451568604, 0.6817521452903748, 0.9993332028388977, 0.3559246063232422, 0.9874626994132996, 0.9972278475761414, 0.13319486379623413, 0.932582676410675, 0.6499563455581665, 0.09015573561191559, 0.13217473030090332, 0.19576771557331085], [0.6060253977775574, 0.5367621779441833, 0.9960547685623169, 0.3595375418663025, 0.7122523188591003, 0.30033332109451294, 0.45718106627464294, 0.3013116717338562, 0.3564716577529907, 0.35937848687171936, 0.24925312399864197, 0.31393975019454956, 0.24109557271003723, 0.2887301743030548, 0.2759222984313965, 0.2690272927284241, 0.3017413914203644, 0.2288588583469391, 0.32928499579429626, 0.18150629103183746, 0.358171671628952, 0.23318171501159668, 0.9977838397026062, 0.2590992748737335, 0.16043633222579956, 0.9917105436325073, 0.33120864629745483, 0.16039644181728363, 0.9875801205635071, 0.3150174915790558, 0.15747898817062378, 0.9828096032142639, 0.29349157214164734, 0.17998149991035461, 0.8249270915985107, 0.32644563913345337, 0.14985685050487518, 0.6488237380981445, 0.2822309136390686, 0.13716211915016174, 0.9635655283927917, 0.2741859555244446, 0.1702893078327179, 0.9584479928016663, 0.2464093714952469, 0.17331185936927795, 0.963266909122467, 0.2552264332771301, 0.1669555902481079, 0.6076285243034363, 0.22033904492855072, 0.16343049705028534, 0.5603080987930298, 0.21861501038074493, 0.1501503586769104, 0.6283029913902283, 0.19910505414009094, 0.15274542570114136, 0.5904444456100464, 0.19310972094535828], [0.720254123210907, 0.9800217747688293, 0.9982889294624329, 0.6266942024230957, 0.988152801990509, 0.5013785362243652, 0.9989773035049438, 0.18181701004505157, 0.6115575432777405, 0.904952347278595, 0.995028555393219, 0.14264363050460815, 0.38243407011032104, 0.6264159083366394, 0.9821350574493408, 0.14446432888507843, 0.36942625045776367, 0.9965575933456421, 0.17465783655643463, 0.9961755275726318, 0.8813596963882446, 0.9136017560958862, 0.1918441653251648, 0.20810315012931824, 0.28037160634994507, 0.6534512639045715, 0.21751326322555542, 0.16459673643112183, 0.33813607692718506, 0.587358295917511, 0.20968295633792877, 0.24217164516448975, 0.47406142950057983, 0.528003990650177, 0.20951303839683533, 0.30553117394447327, 0.47757452726364136, 0.5176727771759033, 0.1707397997379303, 0.2057555615901947, 0.4333829879760742, 0.49884480237960815, 0.15959478914737701, 0.22425207495689392, 0.40258023142814636], [0.4267320930957794, 0.9984404444694519, 0.4741875231266022, 0.6566542983055115, 0.5356593132019043, 0.9851787686347961, 0.9985322952270508, 0.10481416434049606, 0.5301087498664856, 0.07572440057992935, 0.6690284609794617, 0.11030583828687668, 0.9239494204521179], [0.7627533674240112, 0.5555285215377808, 0.9973823428153992, 0.31334546208381653, 0.9184479713439941, 0.9942928552627563, 0.3675627112388611, 0.4504950940608978, 0.8554844260215759, 0.17761577665805817, 0.9634584188461304, 0.6822457313537598, 0.20040328800678253, 0.3483773171901703, 0.13314230740070343, 0.5777015686035156, 0.23442943394184113, 0.33163222670555115, 0.15521204471588135], [0.1119445413351059, 0.9933235049247742, 0.16758431494235992, 0.8436315655708313, 0.33829501271247864, 0.9971829652786255, 0.15387077629566193, 0.9517953991889954, 0.9574158787727356, 0.9985228180885315, 0.16438044607639313, 0.7632184028625488, 0.44499093294143677, 0.8270599842071533, 0.11755095422267914, 0.8726270198822021, 0.12003334611654282, 0.9591413736343384, 0.04778828099370003, 0.16560548543930054], [0.18976181745529175, 0.6857725381851196, 0.9992340803146362, 0.299715131521225, 0.5989181399345398, 0.9290568828582764, 0.18191030621528625, 0.8722550868988037, 0.5984417200088501, 0.2709549069404602, 0.817689836025238, 0.5353963971138, 0.314526230096817, 0.794929563999176], [0.34807154536247253, 0.8236292600631714, 0.9953138828277588, 0.2810344994068146, 0.974764883518219, 0.848362386226654, 0.9974019527435303, 0.14412064850330353, 0.9040818810462952, 0.3555683493614197, 0.9940151572227478, 0.0999051108956337, 0.8106658458709717, 0.9620237946510315, 0.3105895221233368, 0.8428043723106384, 0.9965018033981323, 0.1032710149884224, 0.26211246848106384, 0.5142734050750732], [0.46528834104537964, 0.9982652068138123, 0.7421644330024719, 0.9182019829750061, 0.8718280792236328, 0.1626310646533966, 0.9682230353355408, 0.9969694018363953, 0.16513054072856903, 0.2701711356639862, 0.574255645275116, 0.30763763189315796, 0.2418714016675949, 0.34840112924575806, 0.32734936475753784, 0.28472381830215454, 0.30547580122947693, 0.32583561539649963, 0.28235623240470886, 0.31259235739707947, 0.30959412455558777, 0.29507768154144287, 0.3535410463809967, 0.30827200412750244, 0.3001822829246521, 0.3882691264152527, 0.2795397639274597, 0.310034841299057, 0.3987317681312561, 0.27377766370773315, 0.34168821573257446, 0.3941977620124817, 0.2797289788722992, 0.3381006717681885, 0.39209094643592834, 0.29879653453826904, 0.29579421877861023, 0.38434720039367676, 0.26587972044944763, 0.24888820946216583, 0.39222252368927, 0.24462534487247467, 0.2557916045188904, 0.41610702872276306, 0.2145395129919052, 0.21668531000614166, 0.4137411415576935, 0.207838237285614, 0.20157422125339508, 0.4306904077529907, 0.18206626176834106, 0.18752411007881165, 0.4216531813144684, 0.1919141262769699, 0.1833871603012085, 0.4398355185985565, 0.17958107590675354, 0.18792882561683655, 0.4293847382068634, 0.14898689091205597], [0.414725124835968, 0.9207894206047058, 0.3451688885688782, 0.9974870681762695, 0.2997526228427887, 0.69395911693573, 0.9990506768226624, 0.48896145820617676, 0.849529504776001, 0.5640489459037781, 0.9979853630065918, 0.2052752673625946, 0.9799859523773193, 0.6565449237823486, 0.998936116695404, 0.1305892914533615, 0.8185259699821472, 0.9987733960151672, 0.17354273796081543, 0.9951745867729187, 0.9386770129203796, 0.1283101886510849, 0.9778053760528564, 0.4094386100769043, 0.5681560635566711, 0.2822030186653137, 0.820737898349762, 0.12449797987937927, 0.6718744039535522, 0.4088124632835388, 0.28903546929359436, 0.5096124410629272, 0.17737576365470886, 0.6546716094017029, 0.2313266396522522, 0.5350480675697327], [0.70498126745224, 0.983319103717804, 0.9989897608757019, 0.47474685311317444, 0.6576330065727234, 0.9984708428382874, 0.25886741280555725, 0.7546448111534119, 0.9752829670906067, 0.19621913135051727, 0.7850576043128967, 0.14126354455947876, 0.8358866572380066, 0.11410241574048996, 0.8117108345031738, 0.09876856952905655, 0.8983662724494934, 0.8622338771820068, 0.13473232090473175, 0.6326066851615906], [0.9028177857398987, 0.5469250082969666, 0.9956870675086975, 0.533457338809967, 0.9812042117118835, 0.7271316051483154, 0.5323392152786255, 0.3494049608707428, 0.5808483362197876, 0.6374468207359314, 0.25597071647644043, 0.99073326587677, 0.8894354104995728, 0.9122132062911987, 0.9990647435188293, 0.3138347268104553, 0.9580005407333374, 0.995815098285675, 0.09363370388746262, 0.582445502281189], [0.6912908554077148, 0.9976093769073486, 0.9760401248931885, 0.9985313415527344, 0.9989709854125977, 0.30938777327537537, 0.9984682202339172, 0.9983951449394226, 0.36521995067596436, 0.7508471608161926, 0.9975977540016174, 0.10178262740373611, 0.2897392213344574], [0.817989706993103, 0.8870223164558411, 0.92216557264328, 0.5196508169174194, 0.9634358286857605, 0.9874854683876038, 0.36237069964408875, 0.9527162909507751, 0.32519271969795227, 0.9906390905380249, 0.9879988431930542, 0.9953116774559021, 0.11071161180734634, 0.19586478173732758, 0.13694266974925995, 0.5264383554458618, 0.15354663133621216, 0.2752346098423004, 0.3550163209438324], [0.38625383377075195, 0.7249546051025391, 0.9870380163192749, 0.5086044073104858, 0.44007012248039246, 0.9984496831893921, 0.16109885275363922, 0.5431380271911621, 0.23404905200004578, 0.9916620254516602, 0.11768647283315659, 0.9815607070922852, 0.08567294478416443, 0.9398990273475647, 0.06982538849115372, 0.15655732154846191], [0.8355652689933777, 0.9848378896713257, 0.7480983138084412, 0.33054840564727783, 0.9751866459846497, 0.9872931241989136, 0.20421519875526428, 0.5211520791053772, 0.07637184858322144, 0.7005259394645691, 0.03434962034225464, 0.9955182671546936, 0.10286577045917511, 0.8488938808441162, 0.51239013671875, 0.04809227213263512, 0.2929881513118744, 0.30163756012916565], [0.3712717592716217, 0.4099562168121338, 0.9983571171760559, 0.8783637881278992, 0.989345371723175, 0.29483097791671753, 0.9137454628944397, 0.9968565702438354, 0.20452766120433807, 0.9981258511543274, 0.41907191276550293, 0.9132610559463501, 0.056875020265579224, 0.2918664813041687, 0.6060919761657715, 0.07482045888900757, 0.2611345648765564, 0.36198315024375916, 0.5613827109336853, 0.05091136693954468, 0.14826464653015137, 0.36551952362060547, 0.5214682817459106, 0.04582007974386215, 0.5280465483665466, 0.5396834015846252, 0.05933191254734993, 0.21283671259880066, 0.5302895903587341, 0.06181732565164566, 0.16253779828548431, 0.520790159702301, 0.05882507562637329, 0.2485276609659195], [0.572679877281189, 0.9978504180908203, 0.8800379633903503, 0.2214057594537735, 0.4497312307357788, 0.9822602868080139, 0.14582403004169464, 0.8125781416893005, 0.5010290145874023, 0.08951343595981598, 0.4517214894294739, 0.8187158703804016], [0.6225637793540955, 0.9976503252983093, 0.2757887542247772, 0.9862349629402161, 0.9531444311141968, 0.20014426112174988, 0.4923909306526184, 0.5531229972839355, 0.14571283757686615, 0.48564761877059937, 0.49094751477241516, 0.17122572660446167, 0.10528234392404556], [0.35647454857826233, 0.9382030963897705, 0.9947604537010193, 0.46560871601104736, 0.5847516059875488, 0.5939433574676514, 0.9945803284645081, 0.5046582221984863, 0.9865277409553528, 0.7852879166603088, 0.9973270893096924, 0.998984158039093, 0.13413944840431213, 0.29610931873321533], [0.3497430384159088, 0.9981447458267212, 0.6530342102050781, 0.4590405523777008, 0.2823539674282074, 0.7786929607391357, 0.9986072182655334, 0.17475536465644836, 0.809958815574646, 0.997799813747406, 0.150260329246521, 0.9499799609184265, 0.9975343942642212, 0.11283327639102936, 0.2118583768606186, 0.6815226078033447, 0.11985784769058228, 0.19601064920425415], [0.37408557534217834, 0.7788305878639221, 0.5399941802024841, 0.9978755712509155, 0.4658566117286682, 0.7737862467765808, 0.9728105664253235, 0.9971182346343994, 0.550352931022644, 0.3098481297492981, 0.8997567892074585, 0.21955722570419312, 0.26811105012893677, 0.954976499080658, 0.41225504875183105, 0.3272826373577118, 0.8748911023139954, 0.18169493973255157, 0.26883286237716675, 0.819371223449707, 0.16637413203716278, 0.2788022756576538, 0.41355082392692566, 0.9308452606201172, 0.2456669956445694, 0.2855570912361145, 0.751153826713562, 0.14766237139701843, 0.27360525727272034, 0.3788035213947296, 0.9365419149398804, 0.2631252408027649, 0.3302806615829468, 0.7055323123931885, 0.11531849950551987, 0.37125933170318604, 0.3956300914287567, 0.891995906829834, 0.19244462251663208, 0.30931204557418823, 0.6710253357887268, 0.09849995374679565, 0.3532680571079254, 0.3838844299316406, 0.8740885853767395, 0.11412731558084488, 0.3115667998790741, 0.6517390012741089, 0.08017951250076294, 0.29477307200431824, 0.38080117106437683, 0.9094435572624207, 0.09196487069129944, 0.30777251720428467, 0.6103456020355225, 0.07004676014184952, 0.29915326833724976, 0.4164277911186218, 0.9201803803443909, 0.07551328092813492], [0.4954105317592621, 0.7288817167282104, 0.3676602244377136, 0.5489886999130249, 0.9936434030532837, 0.11681154370307922, 0.5072746276855469, 0.6823228001594543, 0.18084436655044556, 0.3138096332550049, 0.614181637763977, 0.15785221755504608, 0.2700326442718506, 0.5778152942657471, 0.1387489289045334, 0.249574676156044, 0.673105776309967, 0.12377675622701645, 0.2289295792579651, 0.6409331560134888, 0.12076012790203094, 0.21939776837825775, 0.7130254507064819, 0.11095915734767914, 0.20290203392505646, 0.8377289175987244, 0.11124057322740555, 0.18058837950229645, 0.499867707490921, 0.12029670923948288, 0.23034141957759857], [0.4890693128108978, 0.8835641145706177, 0.9988487958908081, 0.18689976632595062, 0.9929221868515015, 0.37686875462532043, 0.5952760577201843, 0.9986873269081116, 0.1731823980808258, 0.43867889046669006, 0.9948862195014954, 0.10284754633903503, 0.4803723990917206, 0.0906248465180397, 0.13258038461208344, 0.917191207408905, 0.07571354508399963, 0.9599799513816833, 0.5729063153266907, 0.857632040977478, 0.36410242319107056, 0.28175368905067444, 0.16039545834064484, 0.5895347595214844, 0.07641521841287613, 0.4076898694038391, 0.21016177535057068, 0.19971135258674622, 0.688214123249054], [0.46519050002098083, 0.8315859436988831, 0.9990220069885254, 0.3230968713760376, 0.8508393168449402, 0.1971755027770996, 0.9973370432853699, 0.22994323074817657, 0.22658699750900269, 0.6282398700714111, 0.1014958843588829, 0.18339760601520538], [0.3960762023925781, 0.9545208811759949, 0.998706579208374, 0.17109966278076172, 0.9680176973342896, 0.9450911283493042, 0.9988366961479187, 0.3818272650241852, 0.5947940349578857, 0.9809346795082092, 0.15027783811092377, 0.8421642184257507, 0.1791848987340927, 0.49458152055740356, 0.08022493124008179, 0.8798864483833313], [0.77805095911026, 0.8339095711708069, 0.7746663689613342, 0.9929470419883728, 0.35937824845314026, 0.6336303353309631, 0.9949349761009216, 0.21955032646656036, 0.7274211645126343, 0.9645541906356812, 0.05345397815108299, 0.09305954724550247], [0.3578314781188965, 0.684422492980957, 0.998588502407074, 0.42021745443344116, 0.3391871154308319, 0.9943439960479736, 0.46824562549591064, 0.9738262891769409, 0.5847474932670593, 0.9958285689353943, 0.24548165500164032, 0.9750188589096069, 0.6115500926971436, 0.9974408149719238, 0.12701557576656342, 0.32207030057907104, 0.9813387393951416, 0.11229804158210754, 0.10050608217716217, 0.9508909583091736, 0.10302077233791351, 0.08766279369592667, 0.9337367415428162, 0.09802369773387909, 0.5412589311599731, 0.6806010603904724, 0.6060463190078735, 0.13027678430080414, 0.4540111720561981, 0.5907682180404663, 0.5385708212852478, 0.1516781896352768, 0.5273460745811462, 0.6013995409011841, 0.5083510875701904, 0.15770858526229858, 0.5839648842811584, 0.5753042101860046, 0.5154387354850769, 0.13491515815258026, 0.625106692314148, 0.5587295293807983, 0.5233081579208374, 0.13151313364505768, 0.5999995470046997, 0.5736240148544312, 0.5674819350242615, 0.12935078144073486, 0.6456191539764404, 0.6022555232048035, 0.5631796717643738, 0.12753544747829437, 0.6481934189796448, 0.5783055424690247, 0.46586012840270996, 0.14773225784301758, 0.6974419951438904, 0.5562292337417603, 0.4655866026878357, 0.14035965502262115], [0.3028881549835205, 0.4145192503929138, 0.9973272085189819, 0.18504293262958527, 0.9074499607086182, 0.1834477037191391, 0.9938253164291382, 0.998710036277771, 0.18142345547676086, 0.9938561320304871, 0.9939775466918945, 0.13719488680362701, 0.8923072218894958, 0.8844794034957886, 0.08113889396190643, 0.9589993357658386, 0.9976754784584045, 0.11197185516357422, 0.3479074239730835, 0.966065526008606, 0.09885799139738083, 0.16158658266067505, 0.9376659393310547, 0.11198396980762482, 0.14111940562725067, 0.8998213410377502, 0.11530555039644241, 0.15060724318027496, 0.8531967997550964, 0.12753109633922577, 0.14268456399440765, 0.8374574780464172, 0.1416073888540268, 0.1336774379014969, 0.7469114065170288, 0.1503710299730301, 0.12431765347719193, 0.672616720199585, 0.1470412313938141, 0.1205604150891304, 0.6765661239624023, 0.13943320512771606, 0.10190542042255402, 0.6041812300682068, 0.13819573819637299, 0.0959937646985054, 0.459980845451355], [0.5337597131729126, 0.9958718419075012, 0.9773920774459839, 0.9978156089782715, 0.2050885260105133, 0.6977590322494507, 0.9952607750892639, 0.2474498450756073, 0.9832700490951538, 0.8340243101119995, 0.054917845875024796, 0.2023981809616089, 0.544851541519165, 0.0864180326461792, 0.31870752573013306], [0.26656574010849, 0.5787632465362549, 0.983234167098999, 0.29250890016555786, 0.9974799752235413, 0.21198633313179016, 0.8324581980705261, 0.5595792531967163, 0.5899630784988403, 0.5238392949104309, 0.9638031125068665, 0.1059328094124794, 0.6022021770477295, 0.1459328979253769, 0.5148060321807861, 0.15615856647491455, 0.27711889147758484], [0.7310221791267395, 0.9183716773986816, 0.9188773036003113, 0.7832357883453369, 0.998581051826477, 0.2342585176229477, 0.5574252009391785, 0.8529566526412964, 0.19129766523838043, 0.308209091424942, 0.8231724500656128, 0.1873118281364441, 0.565040111541748, 0.9893999695777893, 0.19658158719539642, 0.310020387172699], [0.38089779019355774, 0.7954839468002319, 0.7703706622123718, 0.8467805981636047, 0.9991387128829956, 0.10643208026885986, 0.9358113408088684, 0.910069465637207, 0.42703795433044434, 0.9851658940315247, 0.1009865254163742, 0.25907281041145325, 0.12718471884727478, 0.7319917678833008, 0.11343890428543091, 0.2058866173028946, 0.1277385652065277], [0.35338032245635986, 0.9802066087722778, 0.5807569026947021, 0.9993153810501099, 0.2580268085002899, 0.9328492879867554, 0.30143457651138306, 0.4641956090927124, 0.997990608215332, 0.21566341817378998, 0.9889087080955505, 0.15268190205097198, 0.5786170959472656, 0.9581250548362732, 0.06895117461681366, 0.862365186214447, 0.07547864317893982, 0.21276922523975372, 0.9327296614646912, 0.07140419632196426, 0.15835247933864594, 0.571527898311615, 0.07990974932909012, 0.3110402822494507, 0.5249310731887817, 0.07553216069936752, 0.34549450874328613], [0.7202672362327576, 0.7559782266616821, 0.9986870884895325, 0.4276134669780731, 0.5301050543785095, 0.9978808164596558, 0.24636636674404144, 0.8379774689674377, 0.1390959471464157, 0.6526287198066711, 0.06909433007240295, 0.7993916273117065, 0.08150175958871841, 0.9884698390960693, 0.04790756478905678, 0.32519468665122986, 0.9623910188674927, 0.07019747048616409, 0.3634553849697113, 0.9836020469665527, 0.04342387616634369, 0.28125059604644775], [0.42856088280677795, 0.4427081346511841, 0.5310007929801941, 0.8174076676368713, 0.25207436084747314, 0.7778584361076355, 0.14599618315696716, 0.3667629063129425, 0.9413949251174927, 0.0934610366821289, 0.39992204308509827, 0.6917170882225037, 0.08375002443790436, 0.23499906063079834, 0.5437533855438232, 0.08601456880569458, 0.2641567289829254], [0.5724378824234009, 0.9523717164993286, 0.9660746455192566, 0.2931675314903259, 0.8972154259681702, 0.9972487092018127, 0.37426525354385376, 0.5594897866249084, 0.9966488480567932, 0.3447168469429016, 0.3284728527069092, 0.9953723549842834, 0.2896841764450073, 0.3042488098144531, 0.9899717569351196, 0.17387007176876068, 0.24810802936553955, 0.9773979783058167, 0.21840345859527588, 0.30759114027023315, 0.9751511216163635, 0.23286788165569305, 0.32675427198410034, 0.9759111404418945, 0.2437204122543335, 0.35323256254196167, 0.9756458401679993, 0.25658029317855835, 0.359348863363266, 0.9712305068969727, 0.26740044355392456, 0.3918522596359253, 0.9703695774078369, 0.2809273600578308, 0.4302372634410858, 0.9645097851753235, 0.2884337902069092, 0.4339524805545807, 0.9647728204727173, 0.2825949490070343, 0.45336905121803284, 0.9651475548744202, 0.26891443133354187, 0.41629159450531006, 0.9616952538490295, 0.2645917236804962, 0.39779964089393616, 0.9677218794822693, 0.26909902691841125, 0.4218498766422272, 0.9699664115905762, 0.2681460678577423, 0.3802874982357025, 0.9684181809425354, 0.24886642396450043, 0.38714540004730225, 0.9700788259506226, 0.2504483461380005, 0.3975012004375458, 0.9736262559890747], [0.2143663465976715, 0.8545177578926086, 0.23203204572200775, 0.39634275436401367, 0.12117665261030197, 0.8413679003715515, 0.07865644246339798, 0.9862673282623291, 0.09236424416303635, 0.9875831007957458, 0.08584265410900116, 0.9874802231788635, 0.07575368881225586, 0.985878586769104, 0.0726427286863327, 0.9844655394554138, 0.07163538783788681, 0.9837772846221924, 0.06753207743167877, 0.9813288450241089, 0.07089244574308395, 0.9768689274787903, 0.07287713140249252, 0.9984012246131897, 0.0569339320063591, 0.9976557493209839, 0.0335693433880806, 0.2317487597465515, 0.7349430322647095, 0.042077917605638504, 0.131390780210495, 0.18297970294952393], [0.5764104723930359, 0.5693168044090271, 0.3329475224018097, 0.9985326528549194, 0.316488653421402, 0.9845941066741943, 0.9989493489265442, 0.34494829177856445, 0.883569598197937, 0.07913564890623093, 0.7184540629386902, 0.07674814760684967, 0.5205121636390686], [0.19558733701705933, 0.9974653720855713, 0.26536551117897034, 0.9983283877372742, 0.979706346988678, 0.15249134600162506, 0.5370528101921082, 0.6535828709602356, 0.17316529154777527, 0.32853829860687256, 0.5309060215950012, 0.18465758860111237, 0.3184249699115753], [0.40132734179496765, 0.8347978591918945, 0.8117293119430542, 0.9989826083183289, 0.39803653955459595, 0.5340963006019592, 0.26167061924934387, 0.975177526473999, 0.9591771960258484, 0.9763134121894836, 0.1552419662475586, 0.5667760968208313, 0.13252407312393188, 0.3458211123943329, 0.8507174849510193, 0.16140565276145935, 0.2790760397911072, 0.9835636615753174, 0.13323171436786652, 0.90940260887146, 0.624998152256012, 0.8708648085594177, 0.13228891789913177, 0.10100959986448288, 0.4876069128513336, 0.13234907388687134, 0.11755010485649109], [0.9173568487167358, 0.491048663854599, 0.9982916712760925, 0.8029155731201172, 0.9838405251502991, 0.9853519797325134, 0.4588339030742645, 0.9526468515396118, 0.9989199638366699, 0.2464427351951599, 0.9827480912208557, 0.7998301982879639, 0.1673666536808014, 0.5722993016242981], [0.6471248269081116, 0.9962543249130249, 0.9798020124435425, 0.6216544508934021, 0.9929752349853516, 0.9986407160758972, 0.31339773535728455, 0.6605846285820007, 0.9938732385635376, 0.11821845173835754, 0.6156328916549683, 0.9193537831306458, 0.0980127602815628, 0.9323218464851379, 0.6608248949050903, 0.08011146634817123, 0.6828179359436035, 0.7655100226402283, 0.09020800143480301, 0.22577422857284546, 0.9848847389221191, 0.06211564689874649, 0.31821203231811523, 0.5752838850021362, 0.0706535205245018, 0.36339521408081055, 0.5642140507698059, 0.10315201431512833, 0.3704543709754944, 0.508285403251648, 0.11663736402988434, 0.3691861927509308, 0.49627965688705444, 0.12903466820716858, 0.3445560932159424, 0.5107483267784119, 0.1377515345811844, 0.3416665196418762, 0.5075493454933167, 0.14656583964824677, 0.3264334201812744, 0.4835679531097412, 0.1668969988822937, 0.3088393807411194, 0.4930741786956787, 0.1595047116279602, 0.2947717607021332, 0.500312089920044, 0.1647801548242569, 0.27035415172576904, 0.5111129283905029, 0.16174611449241638, 0.27718713879585266, 0.4944319725036621, 0.15466274321079254, 0.28355926275253296, 0.4651550352573395, 0.14471741020679474, 0.29604417085647583, 0.5361754298210144], [0.39198869466781616, 0.9433336853981018, 0.9993245601654053, 0.34470289945602417, 0.4606628119945526, 0.6965864896774292, 0.20169709622859955, 0.39687713980674744, 0.9751518368721008, 0.3565981984138489, 0.4789263606071472, 0.9985972046852112, 0.25433099269866943, 0.9465448260307312, 0.9988430738449097, 0.091240294277668, 0.861135721206665, 0.8404132127761841, 0.6632565259933472, 0.860413670539856], [0.4833243191242218, 0.9680138826370239, 0.9989452958106995, 0.4687063992023468, 0.9958431124687195, 0.986236572265625, 0.23453621566295624, 0.8648856282234192, 0.8218554854393005, 0.21985751390457153, 0.8084732294082642], [0.6599007844924927, 0.7996780276298523, 0.9992318153381348, 0.6618342995643616, 0.9958876967430115, 0.98720782995224, 0.2192956507205963, 0.9963036775588989, 0.9191922545433044, 0.9979711174964905, 0.19299441576004028, 0.9658371806144714], [0.2684994041919708, 0.8582146763801575, 0.9948309063911438, 0.507934033870697, 0.3631499409675598, 0.9961930513381958, 0.2256789207458496, 0.9947443008422852, 0.14908742904663086, 0.9909701347351074, 0.17666113376617432, 0.35871827602386475, 0.5870477557182312, 0.11932888627052307, 0.4677944481372833, 0.5643594861030579, 0.09687024354934692, 0.43391814827919006, 0.5260977149009705, 0.10542874783277512, 0.5405362248420715], [0.5265948176383972, 0.8708350658416748, 0.9381463527679443, 0.9990755319595337, 0.33514609932899475, 0.5369372367858887, 0.1029500886797905, 0.3847021162509918, 0.163359135389328, 0.9902172684669495, 0.9979009628295898, 0.9984520673751831, 0.18718215823173523, 0.9782680869102478, 0.674823522567749, 0.995557963848114, 0.3815152645111084, 0.4857274293899536, 0.987809419631958, 0.9950356483459473, 0.14532431960105896, 0.9940047860145569, 0.3299069106578827, 0.9685750603675842, 0.18934191763401031, 0.31917455792427063, 0.979425847530365, 0.9951568245887756, 0.1317519247531891, 0.9724206328392029, 0.4527164101600647, 0.9287311434745789, 0.14163738489151, 0.4325420558452606, 0.9853648543357849, 0.9900087118148804, 0.1336762011051178, 0.9749910831451416, 0.5120294690132141, 0.8827968835830688, 0.13960249722003937, 0.9562638998031616, 0.48947182297706604, 0.9005674123764038, 0.13842655718326569, 0.9479770064353943, 0.48969486355781555, 0.8989297151565552, 0.127146378159523, 0.9385395050048828, 0.4857471287250519, 0.9049730896949768, 0.1282394528388977, 0.9402524828910828, 0.500963032245636, 0.8833787441253662, 0.11876548826694489, 0.9350475668907166, 0.5036848187446594, 0.9098275303840637], [0.37035873532295227, 0.962013304233551, 0.4176633358001709, 0.9915443658828735, 0.9985180497169495, 0.3672739565372467, 0.729138970375061, 0.9992963075637817, 0.3358885645866394, 0.5211217403411865, 0.2431534379720688, 0.995766282081604, 0.9841353297233582, 0.08653287589550018, 0.1710137277841568], [0.49079906940460205, 0.9980039000511169, 0.965061604976654, 0.6188662648200989, 0.902594268321991, 0.850878894329071, 0.7175984382629395, 0.9988982677459717, 0.34212052822113037, 0.5386088490486145, 0.9986315369606018, 0.245080828666687, 0.5869945883750916, 0.9985426664352417, 0.2738984227180481, 0.614595353603363, 0.9167400598526001, 0.1677451878786087, 0.5998814702033997, 0.882734477519989, 0.09093154966831207, 0.24195167422294617, 0.26948994398117065, 0.44135135412216187, 0.46479251980781555, 0.814648449420929, 0.47000783681869507, 0.1050848662853241, 0.24514932930469513, 0.3722531199455261], [0.3316410779953003, 0.9840578436851501, 0.996757447719574, 0.2643314301967621, 0.6431188583374023, 0.7316550612449646, 0.9990720748901367, 0.3770894706249237, 0.9952865242958069, 0.9711862802505493, 0.9989966750144958, 0.18382708728313446, 0.1971433460712433, 0.7840208411216736, 0.19696557521820068, 0.5944117903709412, 0.746360719203949, 0.44526541233062744, 0.1712941974401474, 0.6133261322975159, 0.71312016248703, 0.46250149607658386, 0.1416393369436264, 0.6276894807815552, 0.715377926826477, 0.5079818367958069, 0.11237399280071259, 0.5818582773208618, 0.6713871955871582, 0.5891761779785156, 0.11232941597700119, 0.6225703358650208, 0.6197952032089233, 0.7584244012832642, 0.10694390535354614, 0.682098388671875, 0.5261158347129822, 0.12308155745267868, 0.6810896992683411], [0.7113925218582153, 0.7269248366355896, 0.8620907068252563, 0.3142860233783722, 0.1858270764350891, 0.997713565826416, 0.20118124783039093, 0.9901331663131714, 0.7923673987388611, 0.9352251887321472, 0.9765424728393555, 0.6701797246932983, 0.9984026551246643, 0.20256704092025757, 0.6118994355201721, 0.8055498600006104, 0.9976658821105957, 0.10764718055725098, 0.4977226257324219, 0.6205719113349915, 0.9797619581222534, 0.10176495462656021, 0.20035311579704285, 0.6939098834991455, 0.13950933516025543, 0.15660099685192108, 0.5550932884216309, 0.17846238613128662, 0.17934955656528473, 0.5948226451873779, 0.1682242453098297, 0.1962285190820694, 0.5359525680541992, 0.16730837523937225, 0.22359968721866608], [0.20010173320770264, 0.9834172129631042, 0.16989125311374664, 0.9096981883049011, 0.9779337048530579, 0.2564161717891693, 0.8637158870697021, 0.13303887844085693, 0.9573131799697876, 0.9978671073913574, 0.15263134241104126, 0.6885562539100647, 0.10371217876672745, 0.7436138987541199, 0.15485364198684692, 0.12278106808662415, 0.6398190259933472, 0.182778462767601, 0.1431744396686554, 0.6086245775222778, 0.20755283534526825, 0.18601487576961517, 0.587378740310669, 0.22245022654533386, 0.20944437384605408, 0.5585134625434875, 0.21747829020023346, 0.22291269898414612, 0.5086497068405151, 0.24489657580852509, 0.1845410317182541], [0.24009980261325836, 0.971598207950592, 0.9984655380249023, 0.3964388072490692, 0.9931802749633789, 0.9986730813980103, 0.14436720311641693, 0.7219247817993164, 0.9968979358673096, 0.1224920004606247, 0.41277745366096497, 0.5890458226203918, 0.0779881626367569, 0.5581977963447571], [0.8397789597511292, 0.9629882574081421, 0.9991748929023743, 0.27669066190719604, 0.9991693496704102, 0.6886972784996033, 0.7580671310424805, 0.9992361068725586, 0.19811105728149414, 0.9734704494476318, 0.8053308725357056, 0.8910022377967834, 0.35082218050956726, 0.780105471611023, 0.1210833340883255, 0.24940113723278046, 0.5562917590141296, 0.10360664129257202, 0.7513828277587891, 0.5287691354751587, 0.15990005433559418, 0.5516871809959412, 0.5318408608436584, 0.18088190257549286, 0.5389894247055054, 0.5398238897323608, 0.2162746638059616, 0.5741948485374451, 0.5138201713562012, 0.21584933996200562, 0.5540894269943237], [0.5162736177444458, 0.8160044550895691, 0.9988090991973877, 0.27861759066581726, 0.9675007462501526, 0.7876664996147156, 0.9993607401847839, 0.2078409492969513, 0.9921277761459351, 0.44324877858161926, 0.17880120873451233, 0.8928984999656677, 0.2288331538438797, 0.935432493686676, 0.35768845677375793, 0.8613072633743286, 0.44887763261795044, 0.9369451999664307, 0.1607721745967865, 0.920088529586792, 0.1132725402712822, 0.306781530380249], [0.25327736139297485, 0.7619105577468872, 0.5029757022857666, 0.9935526847839355, 0.13982786238193512, 0.9472717046737671, 0.3006702959537506, 0.8728219270706177, 0.16380563378334045, 0.7645806670188904, 0.06429391354322433, 0.35343652963638306, 0.7028008103370667, 0.12894320487976074, 0.3569501042366028, 0.6230288147926331, 0.12180215865373611, 0.3352052569389343, 0.6179249882698059, 0.11979866027832031, 0.32610875368118286, 0.6051600575447083, 0.11310853809118271, 0.3476300835609436, 0.6029973030090332, 0.13327012956142426, 0.33961132168769836, 0.5685685276985168, 0.1149730309844017, 0.3602890968322754, 0.5196080803871155, 0.10309364646673203, 0.3971690833568573], [0.3970729410648346, 0.9853260517120361, 0.5866732001304626, 0.9917371869087219, 0.12979327142238617, 0.5560323596000671, 0.7239087224006653, 0.1960260421037674, 0.20089003443717957, 0.5767961740493774, 0.20123916864395142, 0.42605486512184143, 0.5091826915740967, 0.19086885452270508, 0.4922114908695221], [0.13219450414180756, 0.6481826901435852, 0.7074840664863586, 0.998731791973114, 0.19244420528411865, 0.41013389825820923, 0.11288996040821075, 0.8872528076171875, 0.995502769947052, 0.14634397625923157, 0.8783820867538452, 0.4728233218193054, 0.7140761017799377, 0.06905119121074677, 0.6934173703193665, 0.5832653641700745, 0.06442956626415253, 0.34269899129867554], [0.42732635140419006, 0.5931007266044617, 0.9972291588783264, 0.5696510076522827, 0.9921322464942932, 0.9421201944351196, 0.9990330934524536, 0.3508606255054474, 0.9852983951568604, 0.18328116834163666, 0.8836739659309387, 0.6828271746635437, 0.9840609431266785, 0.10780245810747147, 0.5047507286071777, 0.8774234056472778, 0.6714439988136292, 0.9108014702796936, 0.5118625164031982, 0.9195483326911926], [0.6951823234558105, 0.9327384233474731, 0.9444350600242615, 0.5711968541145325, 0.8426491022109985, 0.8930723667144775, 0.26144465804100037, 0.9337010383605957, 0.9929303526878357, 0.13685084879398346, 0.9930694699287415, 0.8802855610847473, 0.9511021971702576, 0.18895895779132843, 0.9990130662918091, 0.9940881729125977, 0.10886670649051666, 0.5474196076393127, 0.5819666981697083, 0.1321163922548294, 0.5956806540489197, 0.5579376816749573, 0.1293734908103943, 0.5780501365661621, 0.564900815486908, 0.12588149309158325, 0.645171046257019, 0.5403607487678528, 0.11969982832670212, 0.6719158887863159, 0.5126820802688599, 0.11266139894723892, 0.6897238492965698], [0.38135582208633423, 0.9273486137390137, 0.5218514204025269, 0.9984367489814758, 0.17709749937057495, 0.9888894557952881, 0.9950644373893738, 0.705576479434967, 0.2842707335948944, 0.6704599857330322, 0.9959790706634521, 0.3422529101371765, 0.8777533769607544, 0.22387954592704773, 0.6890825629234314, 0.9790730476379395, 0.11037086695432663, 0.9666129946708679, 0.9987891316413879, 0.07062992453575134, 0.4735969007015228, 0.9411593675613403, 0.08417457342147827, 0.4045802056789398, 0.9352894425392151, 0.08521822839975357, 0.37898632884025574, 0.9362547993659973, 0.08701177686452866, 0.33436304330825806, 0.939736545085907, 0.08262739330530167, 0.32255691289901733, 0.9451731443405151, 0.08404873311519623, 0.33581599593162537, 0.9433925747871399, 0.08759059011936188, 0.331552118062973, 0.9456586837768555, 0.08448412269353867, 0.31266433000564575, 0.9473753571510315, 0.08114258944988251, 0.2758466303348541, 0.9371791481971741, 0.07939396053552628, 0.2605094611644745, 0.953730046749115, 0.07959167659282684, 0.25800636410713196, 0.9515137672424316, 0.07305943965911865, 0.24810445308685303, 0.9460886120796204, 0.070157490670681, 0.24379898607730865, 0.9555109143257141, 0.0717669427394867, 0.24969474971294403], [0.4765077233314514, 0.9433386921882629, 0.3759288489818573, 0.720178484916687, 0.49176275730133057, 0.13112607598304749, 0.9890609979629517, 0.719322681427002, 0.11496543139219284, 0.9858784675598145, 0.49987342953681946, 0.13288290798664093, 0.906339704990387, 0.16081103682518005, 0.2985190153121948], [0.4113449156284332, 0.981198787689209, 0.9993523955345154, 0.9311376810073853, 0.9988452196121216, 0.385074645280838, 0.9165140986442566, 0.8060503602027893, 0.20131540298461914, 0.15468427538871765], [0.5912836790084839, 0.7311837077140808, 0.9986652135848999, 0.8097715973854065, 0.7922816872596741, 0.9950132966041565, 0.21146687865257263, 0.9961064457893372, 0.72046959400177, 0.9972694516181946, 0.7955448627471924, 0.9991458654403687, 0.2283707559108734, 0.9185562133789062, 0.7165464162826538, 0.9060378670692444, 0.3306589424610138, 0.9669517278671265, 0.2998877167701721, 0.6289106011390686, 0.19027720391750336, 0.7532052397727966, 0.14212407171726227, 0.7782554030418396, 0.11561869084835052, 0.7645055055618286, 0.09770374000072479, 0.8449198603630066, 0.1937730461359024, 0.740692138671875, 0.10505117475986481, 0.9862251281738281, 0.07810258120298386, 0.4224841296672821, 0.980401337146759, 0.07169514149427414, 0.6134732961654663, 0.5136903524398804, 0.10760192573070526, 0.6842027902603149], [0.4141268730163574, 0.8162689208984375, 0.9986995458602905, 0.6926308274269104, 0.9340276718139648, 0.8508251309394836, 0.9992125034332275, 0.2192702293395996, 0.8130678534507751, 0.9985812902450562, 0.1638784557580948, 0.6233412623405457, 0.8116558194160461, 0.14298203587532043, 0.7341169714927673, 0.9645097851753235, 0.22106102108955383, 0.4884006381034851, 0.17070090770721436], [0.29690828919410706, 0.8437073826789856, 0.4118357300758362, 0.8495106101036072, 0.9979379773139954, 0.5399313569068909, 0.8496924042701721, 0.6739249229431152, 0.9992446899414062, 0.2945384979248047, 0.7874042987823486, 0.9984506368637085, 0.19985520839691162, 0.7509450912475586, 0.1858997642993927, 0.781426191329956, 0.6720688939094543, 0.14948108792304993, 0.33311203122138977], [0.3427082896232605, 0.7832009196281433, 0.9990776777267456, 0.8108677864074707, 0.9961628913879395, 0.6029543280601501, 0.9977574944496155, 0.16445854306221008, 0.8065289258956909, 0.6041534543037415, 0.9949000477790833, 0.09523241221904755, 0.34572482109069824], [0.46804574131965637, 0.62630295753479, 0.8750464916229248, 0.930982232093811, 0.9987164735794067, 0.22048749029636383, 0.9602475166320801, 0.8627017140388489, 0.9990966320037842, 0.25340795516967773, 0.6725983023643494, 0.5284736752510071, 0.11048167943954468, 0.9892516732215881, 0.740007221698761, 0.9764244556427002, 0.08973748236894608, 0.9681701064109802, 0.7960106134414673, 0.9599781632423401, 0.07134700566530228, 0.947421669960022, 0.7880741357803345, 0.9445140361785889, 0.06664946675300598, 0.9451920986175537, 0.8063376545906067, 0.9324764013290405, 0.06724376976490021, 0.9309609532356262, 0.7957906723022461, 0.9278395771980286, 0.06017230078577995, 0.9143223166465759, 0.8004196286201477, 0.9202993512153625, 0.06061612814664841, 0.9367173314094543, 0.7686601281166077, 0.9318053126335144, 0.061042048037052155, 0.9248223900794983, 0.743907630443573, 0.9185488820075989, 0.057219140231609344, 0.9012534022331238, 0.7021108269691467, 0.9358003735542297, 0.053704045712947845, 0.1601356416940689, 0.856547474861145, 0.06084978207945824, 0.91780024766922, 0.617694616317749, 0.9048499464988708, 0.057362742722034454, 0.921907901763916, 0.6167696118354797, 0.9126675724983215, 0.05766548216342926], [0.4582722783088684, 0.965918242931366, 0.6311239004135132, 0.9966501593589783, 0.17760534584522247, 0.9994425177574158, 0.9922892451286316, 0.9887034296989441, 0.3676600754261017, 0.5428865551948547, 0.9992424249649048, 0.3458002507686615, 0.9533477425575256, 0.6128779053688049, 0.9989389777183533, 0.3261869251728058, 0.6816097497940063, 0.997307538986206, 0.8588578701019287, 0.998528242111206, 0.10918553918600082, 0.9260607361793518, 0.672020435333252, 0.8042706251144409, 0.7708225846290588, 0.5530373454093933, 0.8121788501739502], [0.5626766681671143, 0.9383191466331482, 0.9964176416397095, 0.4868636429309845, 0.9535506367683411, 0.9941079616546631, 0.38458704948425293, 0.9988594055175781, 0.9111800789833069, 0.9976776242256165, 0.15380509197711945, 0.9986461997032166, 0.7326920032501221, 0.9931642413139343, 0.10610514134168625, 0.9985030889511108, 0.6380957961082458, 0.9802256226539612, 0.08563805371522903, 0.657845139503479, 0.5467140674591064, 0.07105103135108948, 0.5620665550231934, 0.5019723176956177, 0.061074137687683105, 0.9979852437973022, 0.5640479326248169], [0.35314828157424927, 0.996168315410614, 0.9902468919754028, 0.9828981161117554, 0.37704387307167053, 0.6710843443870544, 0.49813953042030334, 0.9984997510910034, 0.2404462844133377, 0.4850635826587677, 0.9964765906333923, 0.9465709924697876, 0.9970439076423645, 0.07813076674938202, 0.16469928622245789, 0.5472078919410706, 0.10366053134202957, 0.1988726407289505, 0.5487470030784607, 0.10810931026935577, 0.18722617626190186, 0.6174379587173462, 0.12616989016532898, 0.9628006815910339, 0.9788984060287476, 0.10602627694606781, 0.7080891132354736, 0.5956048369407654, 0.12034875899553299, 0.14873094856739044], [0.6716454029083252, 0.8899231553077698, 0.9979016780853271, 0.6479987502098083, 0.7658908367156982, 0.9992033839225769, 0.27672016620635986, 0.9722228646278381, 0.6647045016288757, 0.3169979453086853, 0.9707794189453125, 0.9762162566184998, 0.3450411856174469, 0.5091995596885681, 0.9853135943412781, 0.08295240253210068, 0.0801316648721695], [0.6037046909332275, 0.8574435710906982, 0.6409651041030884, 0.9715566039085388, 0.3564475178718567, 0.5778312683105469, 0.9985429048538208, 0.17736753821372986, 0.41555657982826233, 0.6503484845161438, 0.10894374549388885, 0.815688967704773], [0.683530867099762, 0.5977532863616943, 0.9194485545158386, 0.1510164886713028, 0.895889937877655, 0.9948006868362427, 0.37235137820243835, 0.9983287453651428, 0.995642900466919, 0.3698609471321106, 0.890202522277832, 0.9843159317970276, 0.16275985538959503, 0.1699034720659256, 0.8440243601799011, 0.12487947940826416, 0.12427379190921783, 0.8646463751792908, 0.1131746917963028, 0.08563832193613052, 0.5450750589370728, 0.10938670486211777, 0.09522589296102524, 0.7739920020103455, 0.10238074511289597, 0.07037483900785446, 0.47283631563186646, 0.09469249844551086, 0.1680232286453247, 0.5452976226806641, 0.42608997225761414, 0.864020586013794], [0.4532316327095032, 0.7325650453567505, 0.8651605844497681, 0.9990466237068176, 0.9519814252853394, 0.9988963603973389, 0.9990739822387695, 0.20476596057415009, 0.997916042804718, 0.7122038006782532, 0.998740017414093, 0.25304487347602844, 0.9981372356414795, 0.9984220266342163, 0.06671213358640671, 0.18731670081615448, 0.9787999391555786, 0.06229082867503166, 0.3902844488620758, 0.13397841155529022], [0.30748701095581055, 0.9823516011238098, 0.7902402281761169, 0.9882899522781372, 0.6146979331970215, 0.6468855142593384, 0.9993805885314941, 0.40849587321281433, 0.9602137804031372, 0.9992685914039612, 0.4671942889690399, 0.8673313856124878, 0.9824835062026978, 0.2472415715456009, 0.9377314448356628, 0.9987542629241943, 0.07986950874328613, 0.8285479545593262, 0.9234472513198853, 0.1375460922718048, 0.5513152480125427, 0.8184043169021606, 0.3574015200138092, 0.43214020133018494, 0.7656130194664001, 0.5778599977493286, 0.47159361839294434, 0.7889381647109985], [0.2004603147506714, 0.9945861101150513, 0.9981265664100647, 0.4169025421142578, 0.6926019787788391, 0.9862185120582581, 0.751430332660675, 0.8041651844978333, 0.9988017082214355, 0.24370531737804413, 0.45423388481140137, 0.9808276295661926, 0.19007010757923126, 0.591403603553772, 0.40153637528419495], [0.29311153292655945, 0.23531170189380646, 0.998316764831543, 0.26673588156700134, 0.9672175049781799, 0.7828764915466309, 0.9989975094795227, 0.1681646704673767, 0.3746768832206726, 0.9810685515403748, 0.1580885350704193, 0.9962104558944702, 0.9252932667732239, 0.993740975856781, 0.9325472116470337, 0.9949929118156433, 0.08449717611074448, 0.27336299419403076, 0.9074551463127136, 0.05975575000047684, 0.1782298982143402, 0.8995370268821716, 0.05344143509864807, 0.22130891680717468, 0.8767312169075012, 0.05060986801981926, 0.25057828426361084, 0.85908442735672, 0.049812428653240204, 0.23956860601902008, 0.8244026899337769, 0.04771200567483902, 0.231787770986557, 0.8362371325492859, 0.046729594469070435, 0.2579523026943207, 0.8064512014389038, 0.04647378996014595, 0.22515657544136047, 0.8133876919746399, 0.04637214541435242, 0.21075958013534546, 0.7881829142570496, 0.04803140461444855, 0.20756004750728607, 0.7832370400428772, 0.045087601989507675, 0.2207956314086914, 0.8134743571281433, 0.046390000730752945, 0.18556515872478485, 0.8116768598556519, 0.04228871315717697, 0.1724802851676941, 0.7882867455482483, 0.043307114392519, 0.2813716530799866, 0.5422356128692627, 0.043025191873311996, 0.2828376889228821], [0.3116912543773651, 0.9890145659446716, 0.8033387064933777, 0.9987950325012207, 0.4411804974079132, 0.9607054591178894, 0.537832498550415, 0.7422151565551758, 0.9983305335044861, 0.43276938796043396, 0.9906579256057739, 0.9977102279663086, 0.38021764159202576, 0.992752194404602, 0.9437414407730103, 0.8952112793922424, 0.9936090707778931, 0.13315801322460175, 0.7647646069526672, 0.8118147253990173, 0.060254212468862534, 0.7145269513130188, 0.0411849170923233, 0.6781629920005798, 0.04082616791129112, 0.7059239745140076, 0.04834988713264465, 0.6467419266700745, 0.04954863339662552, 0.5528229475021362, 0.04289130121469498, 0.4917701780796051, 0.043570563197135925, 0.4403569996356964, 0.051782988011837006, 0.41062793135643005, 0.056004222482442856, 0.42063823342323303, 0.05485065281391144, 0.42189475893974304, 0.05002617835998535, 0.36845991015434265, 0.04725427180528641], [0.35850510001182556, 0.9906412959098816, 0.9318336844444275, 0.9991568326950073, 0.7022092938423157, 0.9167988896369934, 0.7989187240600586, 0.5272766351699829, 0.7439402341842651, 0.8003936409950256, 0.28497374057769775, 0.9851670861244202, 0.9858853816986084, 0.17369718849658966, 0.9931405186653137, 0.33657968044281006, 0.9972707629203796, 0.0968317911028862, 0.977719783782959, 0.7747187614440918, 0.5075021386146545, 0.059280626475811005, 0.933469831943512, 0.8908632397651672], [0.5994245409965515, 0.9382117986679077, 0.4821619391441345, 0.8718815445899963, 0.8186008930206299, 0.9980443716049194, 0.2504383325576782, 0.6352916955947876, 0.9824928045272827, 0.9981174468994141, 0.18660546839237213, 0.9760609269142151], [0.3119930028915405, 0.7054839134216309, 0.9945414662361145, 0.9010332822799683, 0.9725321531295776, 0.9974029660224915, 0.21223017573356628, 0.8264501094818115, 0.9974632263183594, 0.2382768988609314, 0.932057797908783, 0.9731715321540833, 0.1444275677204132, 0.789231538772583, 0.8295649290084839, 0.16166964173316956, 0.8588868379592896, 0.8847083449363708, 0.16187553107738495, 0.4336889982223511, 0.7226608395576477, 0.11749939620494843, 0.4226595163345337, 0.792698323726654, 0.12962645292282104, 0.38898810744285583, 0.8334946036338806, 0.12785868346691132, 0.34520238637924194, 0.8423399329185486, 0.12348604947328568, 0.3521095812320709, 0.0822194293141365, 0.7366937398910522, 0.6677224636077881, 0.0864015445113182, 0.7698473930358887, 0.5863388180732727, 0.10342864692211151, 0.7468125820159912], [0.4419795870780945, 0.8260631561279297, 0.9985693693161011, 0.8207707405090332, 0.9309117794036865, 0.9955234527587891, 0.2931026816368103, 0.990053653717041, 0.9490936398506165, 0.9984898567199707, 0.2054709494113922, 0.343878835439682, 0.4201265871524811, 0.8474550247192383, 0.19075703620910645, 0.17845256626605988, 0.3627980351448059], [0.7219074368476868, 0.9790270328521729, 0.9991459846496582, 0.7836198210716248, 0.7912712097167969, 0.82464200258255, 0.999302864074707, 0.23305223882198334, 0.7852910161018372, 0.9924476146697998, 0.6214664578437805, 0.9981454610824585, 0.08687645941972733, 0.40311112999916077, 0.14172671735286713, 0.830204427242279, 0.33212196826934814, 0.9965470433235168, 0.30229488015174866, 0.9975759387016296, 0.2673589587211609, 0.9979680180549622, 0.19928525388240814, 0.9980072379112244, 0.16200047731399536, 0.9994354844093323, 0.07263565063476562, 0.9987402558326721, 0.09550347924232483, 0.9992256164550781, 0.09286113828420639, 0.9989066123962402, 0.08560433983802795, 0.7519482970237732, 0.08159826695919037], [0.6047593355178833, 0.992561399936676, 0.9985639452934265, 0.48959940671920776, 0.9990091323852539, 0.8405158519744873, 0.8562932014465332, 0.9486694931983948, 0.9872949719429016, 0.2803647220134735, 0.7838560342788696, 0.5172923803329468, 0.24930602312088013, 0.5962402820587158, 0.1527537703514099, 0.9055117964744568, 0.4055641293525696, 0.905559241771698, 0.10561203956604004, 0.16118848323822021], [0.3711097836494446, 0.9974212646484375, 0.9990350008010864, 0.6895904541015625, 0.9990800619125366, 0.35042524337768555, 0.6751416325569153, 0.9953051805496216, 0.2885012924671173, 0.3805250823497772, 0.48995712399482727, 0.9959562420845032, 0.11499229818582535, 0.12453602254390717, 0.8957304358482361, 0.0966411828994751, 0.28636306524276733, 0.2846226692199707, 0.5760549902915955, 0.09984458237886429, 0.23820123076438904, 0.39797118306159973], [0.3351028263568878, 0.9889363646507263, 0.30435121059417725, 0.9994564652442932, 0.8616605997085571, 0.6058234572410583, 0.9523769021034241, 0.9991105198860168, 0.10976547747850418, 0.7921021580696106, 0.9673499464988708, 0.998415470123291, 0.12338091433048248, 0.911545991897583, 0.6595063209533691, 0.9963104128837585, 0.4478284418582916, 0.997245192527771, 0.4666841924190521, 0.9004208445549011, 0.9904050827026367, 0.16113588213920593, 0.9922024011611938, 0.305298775434494, 0.8832226991653442, 0.9888090491294861, 0.1512206345796585, 0.9831783175468445, 0.2529275715351105, 0.876728355884552, 0.9867110848426819, 0.152703195810318, 0.9717464447021484, 0.1937956064939499, 0.8718632459640503, 0.980195164680481, 0.1750793606042862, 0.9678660035133362, 0.16495509445667267, 0.8628219962120056, 0.9708530306816101, 0.16909758746623993, 0.9729824662208557, 0.15944716334342957, 0.9612987041473389, 0.14959004521369934, 0.9636306166648865, 0.1403760015964508, 0.8369224071502686, 0.9567276239395142, 0.1579882800579071, 0.9847359657287598, 0.15412206947803497, 0.9838418960571289, 0.14352668821811676, 0.98443603515625, 0.1398748904466629, 0.9858865737915039, 0.1354168951511383, 0.9869128465652466], [0.19823576509952545, 0.9632824063301086, 0.997994065284729, 0.15966422855854034, 0.30429038405418396, 0.9657604694366455, 0.8358936905860901, 0.16390880942344666, 0.7388707399368286, 0.5162474513053894, 0.19401031732559204, 0.4914795756340027], [0.41216185688972473, 0.9922078251838684, 0.9990755319595337, 0.34374070167541504, 0.9956383109092712, 0.9408437609672546, 0.7645729184150696, 0.9992652535438538, 0.397068053483963, 0.9768690466880798, 0.960655689239502, 0.13035614788532257, 0.8679257035255432, 0.8659635782241821, 0.49865490198135376, 0.06007591634988785, 0.5613227486610413], [0.7848324775695801, 0.9830212593078613, 0.9453105330467224, 0.26589372754096985, 0.28902706503868103, 0.9479659199714661, 0.662115752696991, 0.47805657982826233, 0.4914134740829468, 0.2634679675102234, 0.9023465514183044, 0.1548454761505127, 0.9957351684570312, 0.18834608793258667, 0.9647048115730286, 0.5418354272842407, 0.08671538531780243, 0.9452245831489563], [0.9429455995559692, 0.7753498554229736, 0.9975689053535461, 0.31725579500198364, 0.268664687871933, 0.23613983392715454, 0.9571328163146973, 0.9987108707427979, 0.19882887601852417, 0.4170350730419159, 0.20579543709754944, 0.8956411480903625, 0.9570595622062683, 0.0417567603290081, 0.9757153391838074, 0.038355108350515366, 0.4088640809059143], [0.30310896039009094, 0.9799988865852356, 0.9988391995429993, 0.37605923414230347, 0.9230713248252869, 0.9992831349372864, 0.5883775949478149, 0.9985640645027161, 0.9720849394798279, 0.7727490067481995, 0.5805920958518982, 0.9991583824157715, 0.07541968673467636, 0.4326655864715576], [0.4299776554107666, 0.9781016707420349, 0.5289790034294128, 0.9984936714172363, 0.9373494386672974, 0.9991399049758911, 0.9889259934425354, 0.4618050158023834, 0.8634609580039978, 0.34611034393310547, 0.947135329246521, 0.971786618232727, 0.05380231887102127, 0.6776676774024963, 0.37008315324783325, 0.6048028469085693, 0.03951113298535347, 0.5687577724456787, 0.36014559864997864, 0.6214056015014648, 0.04347531124949455, 0.5274345278739929, 0.3340819478034973, 0.6333135962486267, 0.03896643593907356, 0.46030759811401367, 0.3355801999568939, 0.6524437665939331, 0.04067308455705643, 0.43241333961486816, 0.29751577973365784, 0.6530467867851257, 0.04033217206597328, 0.41153284907341003, 0.25657162070274353, 0.6253364682197571, 0.043786004185676575, 0.4504876136779785, 0.21347984671592712, 0.5876098275184631, 0.04340384155511856, 0.4202705919742584, 0.18118491768836975, 0.5376806855201721, 0.04678060859441757, 0.3813540041446686, 0.1357257068157196, 0.5235370397567749, 0.034357279539108276, 0.42295700311660767, 0.1567283421754837, 0.043093375861644745, 0.5087528228759766, 0.12779363989830017, 0.042213622480630875, 0.4903174042701721, 0.12467807531356812], [0.5179855227470398, 0.9732261300086975, 0.9610945582389832, 0.7005840539932251, 0.9252312183380127, 0.998676598072052, 0.41843873262405396, 0.977527916431427, 0.4347783029079437, 0.13388745486736298, 0.37658461928367615, 0.9872384071350098, 0.11172307282686234, 0.09621679037809372], [0.54283207654953, 0.9907758831977844, 0.8457716107368469, 0.998890221118927, 0.5096949934959412, 0.9992471933364868, 0.9992850422859192, 0.8185491561889648, 0.9993250370025635, 0.19085237383842468, 0.8709221482276917, 0.9160414934158325, 0.08633013069629669, 0.4305824041366577, 0.8540904521942139, 0.06773384660482407, 0.41018739342689514, 0.7741468548774719, 0.0631677657365799, 0.3937295973300934, 0.675286054611206, 0.05935262143611908, 0.36496564745903015, 0.6796760559082031, 0.05915394052863121, 0.3842534124851227, 0.7281383275985718, 0.07658987492322922, 0.3075113594532013, 0.167616605758667, 0.30384111404418945, 0.14280244708061218, 0.3373734652996063, 0.11842036992311478], [0.3278292417526245, 0.9747251868247986, 0.5639410018920898, 0.9989967942237854, 0.40746012330055237, 0.992863118648529, 0.8238574266433716, 0.2554607689380646, 0.507017970085144, 0.9913738369941711, 0.15246045589447021, 0.9765664339065552, 0.24773773550987244, 0.8440782427787781, 0.13249407708644867, 0.9746477603912354], [0.6972037553787231, 0.9963505268096924, 0.9987012147903442, 0.31382715702056885, 0.9907780885696411, 0.9980913996696472, 0.3369700014591217, 0.8267373442649841, 0.9881852865219116, 0.23064470291137695, 0.8035330772399902, 0.9290888905525208, 0.11445273458957672, 0.4304703176021576, 0.8711512684822083, 0.09430206567049026, 0.3272281587123871, 0.8032503724098206, 0.08635788410902023, 0.8320233821868896, 0.9741650223731995, 0.07313612848520279, 0.26127517223358154, 0.6979692578315735, 0.9897811412811279, 0.903508186340332, 0.07132117450237274, 0.27017325162887573, 0.9923667311668396, 0.5706332921981812, 0.083241306245327, 0.29191383719444275], [0.3327145576477051, 0.503101646900177, 0.9969410300254822, 0.5496185421943665, 0.9763726592063904, 0.999377429485321, 0.5529636740684509, 0.6631092429161072, 0.998457670211792, 0.12266065180301666, 0.9395611882209778, 0.999224066734314, 0.12157559394836426, 0.7219943404197693, 0.9977948665618896, 0.1366756558418274, 0.997467041015625, 0.4709990918636322, 0.8514946699142456, 0.10162286460399628, 0.1851486712694168], [0.766086995601654, 0.9801555275917053, 0.997663140296936, 0.35737934708595276, 0.9109180569648743, 0.635756254196167, 0.9991503953933716, 0.2179202437400818, 0.9985311031341553, 0.6529592275619507, 0.9935256242752075, 0.14344513416290283, 0.32452669739723206], [0.5908353328704834, 0.9685606360435486, 0.9689496755599976, 0.25020164251327515, 0.5440526604652405, 0.9961956739425659, 0.20087771117687225, 0.9747112989425659, 0.5925386548042297, 0.9988654851913452, 0.13666976988315582, 0.9056001901626587, 0.967593252658844, 0.17055782675743103, 0.4685482084751129], [0.4997224509716034, 0.9967646598815918, 0.9815213084220886, 0.4245395064353943, 0.964576244354248, 0.9979884624481201, 0.990431010723114, 0.46175479888916016, 0.9970231652259827, 0.9876969456672668, 0.999258816242218, 0.45496681332588196, 0.8825060129165649, 0.8009858131408691, 0.9951226115226746, 0.1709759533405304, 0.9506933093070984, 0.9429930448532104, 0.9750446081161499, 0.5754467844963074, 0.9871222376823425, 0.9098398685455322, 0.996046245098114, 0.7058970928192139, 0.9992129802703857, 0.9546486139297485, 0.7365201711654663, 0.9978275895118713, 0.2113436460494995, 0.8440009951591492, 0.11739016324281693, 0.49646374583244324, 0.8748958110809326, 0.23932433128356934, 0.31775325536727905, 0.8882970809936523, 0.217352032661438, 0.16948054730892181, 0.8448415398597717, 0.19115640223026276, 0.1597960740327835, 0.8755744099617004, 0.18350893259048462, 0.15539932250976562, 0.8029934763908386, 0.16007882356643677, 0.14073717594146729, 0.8268836140632629, 0.15278129279613495, 0.1727127879858017, 0.7833262085914612, 0.14380010962486267, 0.14343515038490295, 0.7926023006439209, 0.13964779675006866, 0.13926690816879272, 0.7881525158882141, 0.1320127546787262, 0.13393469154834747, 0.7804467678070068], [0.2982751131057739, 0.8243167400360107, 0.8368866443634033, 0.995831310749054, 0.3291982114315033, 0.5612481236457825, 0.9359895586967468, 0.1808261126279831, 0.7233186960220337, 0.993187665939331, 0.5013930797576904, 0.14517861604690552, 0.4717472791671753, 0.9887992739677429, 0.08303070813417435, 0.18113268911838531, 0.5545481443405151, 0.09932547807693481, 0.20792125165462494, 0.5716717839241028, 0.1143682673573494, 0.25762176513671875, 0.6022612452507019, 0.1149873286485672, 0.24519802629947662, 0.6054657697677612, 0.12644286453723907, 0.24973152577877045, 0.5863387584686279, 0.11127552390098572, 0.22597654163837433, 0.5594035983085632, 0.11605554074048996, 0.23403573036193848, 0.5395625829696655, 0.12903189659118652, 0.21356703341007233], [0.29918670654296875, 0.9694170355796814, 0.8823309540748596, 0.9993219375610352, 0.28960442543029785, 0.31483161449432373, 0.8198341727256775, 0.9876604080200195, 0.1938069462776184, 0.990262508392334, 0.12463937699794769, 0.47581884264945984, 0.9981185793876648, 0.20979930460453033, 0.9065943956375122, 0.9904504418373108, 0.07615447789430618, 0.3567817211151123, 0.2030303031206131, 0.8812038898468018, 0.18903063237667084, 0.9086975455284119, 0.12304963916540146, 0.7453684210777283, 0.08081578463315964, 0.44472092390060425, 0.6045372486114502, 0.09079499542713165, 0.3020361363887787, 0.532478392124176, 0.08524003624916077, 0.3289853632450104, 0.49384805560112, 0.06741496175527573, 0.24742963910102844], [0.5276986360549927, 0.9857228398323059, 0.9944471120834351, 0.37979909777641296, 0.7547739148139954, 0.6419681906700134, 0.9985460042953491, 0.20214861631393433, 0.2829046845436096, 0.6535642147064209, 0.07683704048395157, 0.34566882252693176], [0.5978333950042725, 0.9879549741744995, 0.9991850256919861, 0.5831702947616577, 0.9447020292282104, 0.8339436054229736, 0.9994033575057983, 0.5529285073280334, 0.9893213510513306, 0.990642249584198, 0.8043879270553589, 0.12285296618938446, 0.41384637355804443], [0.45644429326057434, 0.958527684211731, 0.57109135389328, 0.9727422595024109, 0.21050497889518738, 0.7711740732192993, 0.8301419615745544, 0.5143584609031677, 0.459317684173584, 0.9928616881370544, 0.2094775289297104, 0.9753794074058533, 0.9624832272529602, 0.16057588160037994, 0.3178514242172241, 0.777969241142273, 0.07388941943645477, 0.2170053869485855], [0.2724626958370209, 0.9444025158882141, 0.5561127662658691, 0.9985800981521606, 0.2698923945426941, 0.9984371066093445, 0.36174753308296204, 0.6301750540733337, 0.27982762455940247, 0.9919959902763367, 0.2844212055206299, 0.696564793586731, 0.9954655766487122, 0.40644371509552, 0.9901506900787354, 0.1740606725215912, 0.9934155941009521, 0.9939182996749878, 0.9834727048873901, 0.36156386137008667, 0.4487614333629608, 0.1553693264722824, 0.9281378388404846, 0.9954553842544556, 0.07629819214344025, 0.1835113912820816], [0.4669089615345001, 0.8473176956176758, 0.9725189208984375, 0.9694273471832275, 0.9849128127098083, 0.39452067017555237, 0.9096786379814148, 0.9912722706794739, 0.1759200096130371, 0.9108033180236816, 0.9223103523254395, 0.2266996055841446, 0.8833362460136414, 0.9928256273269653, 0.13624301552772522, 0.7468545436859131, 0.6154650449752808, 0.39340752363204956, 0.5069179534912109, 0.12055384367704391, 0.8569023609161377, 0.543755054473877, 0.49944695830345154], [0.641110897064209, 0.9892597198486328, 0.9575822353363037, 0.47110146284103394, 0.9823930263519287, 0.9989058971405029, 0.4783816635608673, 0.8972712755203247, 0.9986888766288757, 0.15542134642601013, 0.9404929876327515, 0.9932779669761658, 0.1276828497648239, 0.46405962109565735], [0.3186173141002655, 0.9915844202041626, 0.9980105757713318, 0.27701714634895325, 0.9266205430030823, 0.9979134202003479, 0.3165704011917114, 0.9994434714317322, 0.5544021725654602, 0.6864304542541504, 0.13686420023441315, 0.42339378595352173, 0.6665496826171875, 0.46821650862693787, 0.09921048581600189, 0.9993233680725098, 0.7186620831489563], [0.36408761143684387, 0.9748045206069946, 0.9721964597702026, 0.5059555172920227, 0.9977239966392517, 0.9546592235565186, 0.9992640614509583, 0.30520400404930115, 0.5389971137046814, 0.9984051585197449, 0.13185769319534302, 0.9969929456710815, 0.9957796335220337, 0.9986099004745483, 0.1633220762014389, 0.3938145041465759], [0.7376964092254639, 0.8541626930236816, 0.9992098808288574, 0.31905850768089294, 0.9718441367149353, 0.22429800033569336, 0.999458372592926, 0.8519248962402344, 0.1814868003129959, 0.9813982844352722, 0.9761040806770325, 0.07937873899936676, 0.4480431079864502, 0.9831546545028687, 0.05111408978700638, 0.44570621848106384], [0.37787821888923645, 0.7556187510490417, 0.2865024507045746, 0.9745294451713562, 0.9989814162254333, 0.1520906239748001, 0.5989055037498474, 0.08467413485050201, 0.19740420579910278, 0.5526195168495178, 0.04682929813861847, 0.23658554255962372], [0.28042882680892944, 0.9920386075973511, 0.6635807156562805, 0.9099619388580322, 0.5729022026062012, 0.9908485412597656, 0.12862461805343628, 0.1579895317554474, 0.6636627912521362, 0.7936291694641113, 0.5313308835029602, 0.09592236578464508, 0.3022459149360657], [0.5658124685287476, 0.8463263511657715, 0.9929076433181763, 0.5734884738922119, 0.9992015957832336, 0.6948362588882446, 0.3631758987903595, 0.9784906506538391, 0.4778827130794525, 0.7705475091934204, 0.3277863562107086, 0.26522818207740784, 0.9975791573524475, 0.19804009795188904, 0.8819539546966553, 0.6978272795677185], [0.27063825726509094, 0.9859883189201355, 0.44904011487960815, 0.55287766456604, 0.9387133121490479, 0.9018097519874573, 0.933148980140686, 0.7028037309646606, 0.996746301651001, 0.9175558090209961, 0.3100813925266266, 0.4655939042568207, 0.9942383766174316, 0.2768195867538452, 0.5295148491859436, 0.9951766729354858, 0.25405746698379517, 0.5139001607894897, 0.9951346516609192, 0.24770700931549072, 0.5318397879600525, 0.9956804513931274, 0.23461556434631348, 0.5376272201538086, 0.9957695007324219, 0.22756551206111908, 0.5465431809425354, 0.9950584173202515, 0.2214505523443222, 0.5259165167808533, 0.9936025738716125, 0.19786036014556885, 0.46300187706947327, 0.9929138422012329, 0.18732652068138123, 0.4415799081325531, 0.990902841091156, 0.18984001874923706, 0.9974537491798401, 0.9951977133750916, 0.10372477769851685, 0.5840556621551514, 0.10625770688056946, 0.5050891041755676, 0.9780338406562805, 0.1024901419878006, 0.4104888141155243, 0.9782635569572449, 0.09195254743099213, 0.3555585741996765, 0.977776288986206, 0.0884619802236557, 0.33402127027511597, 0.9743479490280151, 0.08875703811645508, 0.3488045930862427, 0.9737352132797241, 0.09338564425706863, 0.3547980487346649, 0.9318709373474121], [0.46105214953422546, 0.9986565113067627, 0.9281445741653442, 0.6788146495819092, 0.9915348291397095, 0.9990422129631042, 0.38999712467193604, 0.9988468885421753, 0.9735237956047058, 0.2718810439109802, 0.5212062001228333, 0.2040063738822937, 0.8444350957870483, 0.9989224672317505, 0.3734099268913269, 0.3794468939304352, 0.15518508851528168, 0.44033268094062805, 0.18337294459342957, 0.3528609573841095, 0.8421180248260498, 0.09740715473890305, 0.2090301215648651, 0.6668189764022827, 0.06964722275733948, 0.7378712296485901, 0.8086859583854675, 0.6035782694816589, 0.09045761078596115], [0.5896255373954773, 0.9866014122962952, 0.8891488313674927, 0.9993347525596619, 0.4224868416786194, 0.7957364916801453, 0.9980575442314148, 0.3919066786766052, 0.9550570249557495, 0.9984467625617981, 0.9907435774803162, 0.07120923697948456, 0.5863391160964966, 0.9978335499763489, 0.15176042914390564, 0.9951056241989136, 0.9763182997703552, 0.07201970368623734, 0.45323213934898376, 0.9963165521621704, 0.09504804015159607, 0.93922358751297, 0.9576285481452942, 0.06295007467269897, 0.3318032920360565], [0.7835341691970825, 0.8145293593406677, 0.9975435137748718, 0.5482264161109924, 0.9964101910591125, 0.8666509985923767, 0.9992089867591858, 0.14798371493816376, 0.999342143535614, 0.9727247357368469, 0.9991733431816101, 0.20109204947948456, 0.4352988600730896, 0.9990116357803345, 0.3700883984565735, 0.9802576899528503, 0.9971597194671631, 0.11139725148677826, 0.5781431794166565, 0.0937691405415535, 0.930597186088562, 0.9962771534919739, 0.08266649395227432, 0.5518199801445007, 0.07583972066640854, 0.4577721655368805, 0.14063404500484467, 0.9923795461654663, 0.5852816104888916, 0.1284904181957245, 0.38532617688179016], [0.643930196762085, 0.8782215714454651, 0.9973776340484619, 0.29315605759620667, 0.9408839344978333, 0.21288329362869263, 0.9641546010971069, 0.9929921627044678, 0.9930905699729919, 0.9989221096038818, 0.23887388408184052, 0.6319093704223633, 0.41480115056037903, 0.9980670809745789, 0.28493180871009827, 0.719944179058075, 0.9289812445640564, 0.9940699934959412, 0.22084559500217438, 0.5572085380554199, 0.9855117201805115, 0.1365959793329239, 0.5591001510620117, 0.9804497957229614, 0.12836900353431702, 0.9858865737915039, 0.8179193735122681, 0.5885359644889832, 0.23989810049533844, 0.9890975952148438, 0.12653140723705292, 0.20804058015346527, 0.5867025256156921, 0.16461655497550964, 0.29835423827171326, 0.46966081857681274, 0.18094390630722046, 0.33167168498039246, 0.5829044580459595, 0.18253086507320404, 0.3524474501609802, 0.6212922930717468, 0.18477198481559753, 0.35380494594573975, 0.6440394520759583, 0.1811373233795166, 0.3876195549964905, 0.6789268851280212, 0.17976950109004974, 0.3974991738796234, 0.6933839917182922, 0.18136130273342133, 0.3859421908855438, 0.6951676607131958, 0.16917631030082703, 0.40298041701316833, 0.7224046587944031, 0.1701996773481369, 0.41254937648773193, 0.7716161012649536], [0.5032175779342651, 0.9370177388191223, 0.9991790652275085, 0.28498053550720215, 0.9986550807952881, 0.451891154050827, 0.999042809009552, 0.3872930407524109, 0.9901111721992493, 0.9985791444778442, 0.5423650145530701, 0.6923572421073914, 0.8872250318527222, 0.9988868832588196, 0.4099375605583191, 0.8671428561210632, 0.9805840253829956, 0.6208481192588806, 0.7694904208183289, 0.9943113327026367, 0.5277843475341797, 0.7196668982505798, 0.994475781917572, 0.3926142156124115, 0.679521918296814, 0.9932917356491089, 0.3147459030151367, 0.5832849740982056, 0.9894099235534668, 0.28537994623184204, 0.5766005516052246, 0.9855424165725708, 0.28636738657951355, 0.9985225796699524, 0.07226158678531647, 0.1842324137687683, 0.35279035568237305, 0.16286610066890717, 0.7316722869873047, 0.6653196811676025, 0.4030075669288635, 0.6848203539848328, 0.6028048992156982, 0.4009363055229187, 0.6313138008117676, 0.5688858032226562, 0.3780311942100525, 0.6075958013534546, 0.5414319634437561, 0.3805583119392395, 0.6276109218597412, 0.5266584753990173, 0.3810688555240631, 0.6330207586288452, 0.5164225101470947, 0.36235305666923523, 0.6120779514312744, 0.4979667365550995, 0.3160041272640228, 0.6657568216323853], [0.8218933939933777, 0.9969192743301392, 0.9987817406654358, 0.3230334520339966, 0.9260029792785645, 0.9966164231300354, 0.5080872178077698, 0.5242568254470825, 0.9314881563186646, 0.9992528557777405, 0.263253390789032, 0.9961131811141968, 0.7303213477134705, 0.9929144382476807, 0.26943033933639526, 0.9978354573249817, 0.9986793398857117, 0.9048814177513123, 0.10066692531108856, 0.9650968313217163, 0.32007741928100586, 0.8820118308067322, 0.17433981597423553, 0.8405943512916565, 0.1161336675286293, 0.7346504926681519, 0.061157360672950745, 0.5648196339607239, 0.5591715574264526, 0.06036736071109772, 0.7964931130409241], [0.3503514230251312, 0.9365427494049072, 0.3804641366004944, 0.9708767533302307, 0.20726077258586884, 0.9089943766593933, 0.9992311000823975, 0.3075086176395416, 0.3785994052886963, 0.38067734241485596, 0.9390307664871216, 0.9420443177223206, 0.15073902904987335, 0.9893150329589844, 0.5138013362884521, 0.9947488903999329, 0.14401927590370178, 0.488339900970459, 0.8281062841415405, 0.991305410861969, 0.2479153275489807, 0.988365650177002, 0.9676594734191895, 0.12734553217887878, 0.9543020725250244, 0.9774383902549744, 0.11161694675683975, 0.977342963218689, 0.07627877593040466, 0.3407770097255707, 0.5815708637237549, 0.08036048710346222, 0.37723010778427124, 0.479645699262619, 0.0869036614894867, 0.37208491563796997, 0.42080897092819214, 0.08061423152685165, 0.3531404137611389], [0.32405364513397217, 0.9992272853851318, 0.9323233366012573, 0.5403916835784912, 0.957186222076416, 0.5270728468894958, 0.40946587920188904, 0.9962000250816345, 0.9990198612213135, 0.24356487393379211, 0.9954931735992432, 0.4351663291454315, 0.594577968120575, 0.9916319251060486, 0.16533195972442627, 0.517778754234314, 0.9761971831321716, 0.0753316655755043, 0.8828683495521545, 0.6717806458473206, 0.6078460216522217, 0.1396561563014984, 0.8792955875396729, 0.6785163879394531, 0.5883742570877075, 0.1259029507637024, 0.3062329590320587], [0.5476119518280029, 0.4716440439224243, 0.7980908751487732, 0.9991914629936218, 0.39680078625679016, 0.9899561405181885, 0.19343449175357819, 0.4448629915714264, 0.9969421029090881, 0.19376987218856812, 0.6553376317024231, 0.7437525987625122, 0.9984388947486877, 0.07377808541059494, 0.49910420179367065, 0.9902378916740417, 0.07274463772773743, 0.5045520663261414, 0.9875404238700867, 0.06545866280794144, 0.7980118989944458, 0.7517780661582947, 0.9376689791679382, 0.07251963764429092, 0.8637709021568298, 0.19039300084114075, 0.9190167784690857, 0.11394955217838287, 0.8099454045295715, 0.9939911961555481, 0.08248536288738251, 0.6668654084205627, 0.7224103212356567, 0.4781336486339569, 0.0904848575592041, 0.8026540875434875, 0.7871211767196655, 0.4858931601047516, 0.0898032933473587, 0.3753802180290222], [0.7104375958442688, 0.9765868782997131, 0.9739470481872559, 0.9991397857666016, 0.3462999761104584, 0.7273011803627014, 0.99847012758255, 0.1861647665500641, 0.9559399485588074, 0.9978647828102112, 0.06773339211940765, 0.641335129737854, 0.06769180297851562, 0.896091103553772], [0.5081095695495605, 0.9881249666213989, 0.9779403209686279, 0.9988546371459961, 0.4111713767051697, 0.9792948365211487, 0.1840505301952362, 0.916753888130188, 0.9937445521354675, 0.9916137456893921, 0.9981332421302795, 0.203634113073349, 0.4015786349773407], [0.5969570875167847, 0.9801546931266785, 0.7011433839797974, 0.37131592631340027, 0.7806163430213928, 0.9989346861839294, 0.2565471827983856, 0.8659470081329346, 0.9914112091064453, 0.2324298769235611, 0.990432858467102, 0.9967736601829529, 0.26843518018722534, 0.9977722764015198, 0.671519935131073, 0.9963212013244629, 0.7549776434898376, 0.9885899424552917, 0.9991679191589355, 0.12465566396713257, 0.2687727212905884, 0.5482787489891052, 0.09318191558122635, 0.2508024573326111, 0.5004231333732605, 0.07716415822505951, 0.26639842987060547], [0.821338951587677, 0.8077277541160583, 0.6975315809249878, 0.997283935546875, 0.5085567831993103, 0.9953218102455139, 0.5543686747550964, 0.9265086054801941, 0.8759912848472595, 0.9983476400375366, 0.6252638697624207, 0.41378775238990784, 0.9771883487701416, 0.8697942495346069, 0.18277280032634735, 0.8072091341018677, 0.9879279732704163, 0.850973904132843, 0.2319890707731247, 0.4801863133907318, 0.9732820391654968, 0.5188915133476257, 0.7255392074584961, 0.9866586327552795, 0.5088092088699341, 0.7292059659957886, 0.9880407452583313, 0.4919203221797943, 0.7248678803443909, 0.9836689829826355, 0.42651745676994324, 0.7226658463478088, 0.9560522437095642, 0.4091506898403168, 0.7242077589035034, 0.930819034576416, 0.37671440839767456, 0.7194100022315979, 0.8645232319831848, 0.30235913395881653, 0.7005566358566284, 0.7582808136940002, 0.2768492102622986, 0.696171224117279, 0.7343394160270691, 0.27744072675704956, 0.6964130401611328, 0.8165282011032104, 0.22240567207336426, 0.6941401362419128, 0.5962920188903809, 0.2472563236951828, 0.6985065937042236, 0.5892022252082825, 0.2249968945980072, 0.7068579196929932, 0.6378615498542786, 0.22885797917842865, 0.7387109994888306, 0.9693265557289124], [0.2991550862789154, 0.7366761565208435, 0.9961414933204651, 0.44811078906059265, 0.8672537207603455, 0.9978806972503662, 0.27273300290107727, 0.9292109608650208, 0.6552748680114746, 0.17051085829734802, 0.9830167889595032, 0.17010709643363953, 0.5777854323387146, 0.9957528114318848, 0.08298031240701675, 0.4213683009147644], [0.41362622380256653, 0.9969826340675354, 0.17358216643333435, 0.6827184557914734, 0.9983358979225159, 0.12100376188755035, 0.22896969318389893, 0.6700876951217651, 0.14243753254413605, 0.7130662798881531, 0.6248027682304382, 0.08033987134695053, 0.21066434681415558, 0.5332459807395935, 0.061929330229759216, 0.3684556782245636], [0.355643630027771, 0.9613763093948364, 0.9988754391670227, 0.8562489151954651, 0.9926929473876953, 0.6305542588233948, 0.138109028339386, 0.9712601900100708, 0.9861136078834534, 0.09114661812782288, 0.2082718312740326, 0.786994457244873, 0.31497859954833984, 0.9432357549667358], [0.4125722646713257, 0.9990860223770142, 0.9988941550254822, 0.9709639549255371, 0.47105830907821655, 0.8451889753341675, 0.2512301206588745, 0.9623411893844604, 0.9988601207733154, 0.17575086653232574, 0.40826016664505005, 0.9946445226669312, 0.07894867658615112, 0.17661242187023163], [0.17225052416324615, 0.821266233921051, 0.6375520825386047, 0.9983932375907898, 0.21855154633522034, 0.3378916084766388, 0.7673181295394897, 0.15691448748111725, 0.23505106568336487, 0.9984117746353149, 0.46728619933128357, 0.14243686199188232, 0.3018271028995514], [0.27146393060684204, 0.9967303276062012, 0.2399497628211975, 0.9992055296897888, 0.8685308694839478, 0.38572412729263306, 0.23985563218593597, 0.9778474569320679, 0.26359596848487854, 0.4536404311656952, 0.20959648489952087, 0.9981460571289062, 0.6692938208580017, 0.9974555373191833, 0.14344274997711182, 0.9844845533370972, 0.9990717172622681, 0.09220566600561142, 0.9809858202934265, 0.332381933927536, 0.8137407302856445, 0.17625167965888977, 0.8704484105110168, 0.1524936705827713, 0.23749035596847534, 0.526190459728241, 0.17388662695884705, 0.2774287164211273], [0.2244294285774231, 0.876246452331543, 0.9971231818199158, 0.17893147468566895, 0.9943715333938599, 0.21075893938541412, 0.7068417072296143, 0.9909824728965759, 0.15220867097377777, 0.8974263072013855, 0.9961716532707214, 0.11304724961519241, 0.9202907085418701, 0.8814048767089844, 0.9918042421340942, 0.09640518575906754, 0.5209441184997559, 0.9428118467330933, 0.12206403911113739, 0.4629030227661133, 0.8946108222007751, 0.11502668261528015, 0.4235839247703552, 0.8652437329292297, 0.11882217973470688, 0.38062554597854614, 0.8379273414611816, 0.11124499887228012, 0.41286250948905945, 0.8330369591712952, 0.10302246361970901, 0.3982124924659729, 0.8163061738014221, 0.10357888787984848, 0.3878595232963562, 0.7916885018348694, 0.10187968611717224, 0.22651346027851105], [0.44327598810195923, 0.9705435633659363, 0.6311941146850586, 0.867797315120697, 0.33246633410453796, 0.8033429384231567, 0.3795192837715149, 0.3586778938770294, 0.9160149097442627, 0.9984878301620483, 0.19054847955703735, 0.5993455052375793, 0.9937466382980347, 0.12699751555919647, 0.45039302110671997, 0.7908928990364075, 0.737705647945404, 0.5570898056030273, 0.10481509566307068, 0.6251251697540283, 0.5473368763923645, 0.07500991970300674, 0.5531423687934875], [0.3795786201953888, 0.8705261945724487, 0.998748779296875, 0.3289603590965271, 0.8640111088752747, 0.8460608720779419, 0.999427318572998, 0.1827516406774521, 0.8288346529006958, 0.7304314970970154, 0.2541693150997162, 0.9153359532356262, 0.9984037280082703, 0.7264331579208374, 0.9821787476539612, 0.9981638789176941, 0.07116615772247314, 0.4516112804412842, 0.7259668111801147, 0.09194264560937881, 0.5733407139778137, 0.5348923802375793, 0.8447844982147217, 0.660554051399231, 0.7068914771080017, 0.7390875816345215, 0.5016627311706543, 0.7867192029953003], [0.4130041301250458, 0.5909436941146851, 0.9899485111236572, 0.24834643304347992, 0.9066222906112671, 0.996353268623352, 0.13239724934101105, 0.3880455493927002, 0.9664652347564697, 0.25355297327041626, 0.42470747232437134], [0.1993637979030609, 0.9046275615692139, 0.9474758505821228, 0.9990808963775635, 0.6904407739639282, 0.6648430228233337, 0.9989607334136963, 0.46842509508132935, 0.9458553791046143, 0.9950439929962158, 0.16289161145687103, 0.6654857397079468, 0.9893654584884644, 0.1121663972735405, 0.44634005427360535, 0.9852160215377808, 0.09650377929210663, 0.42186686396598816], [0.6017966866493225, 0.9962109327316284, 0.9544666409492493, 0.9972215890884399, 0.3833412826061249, 0.9807478189468384, 0.4716535210609436, 0.8540810346603394, 0.9992628693580627, 0.1491447240114212, 0.8763205409049988, 0.9973183274269104, 0.22171694040298462, 0.6500129699707031, 0.47389453649520874, 0.9984720349311829, 0.3043641746044159, 0.8601967096328735, 0.4177106022834778, 0.8520534038543701, 0.08862689137458801, 0.682294487953186, 0.6664701104164124, 0.5347273349761963, 0.06951132416725159, 0.3982579708099365, 0.855469286441803], [0.7847952842712402, 0.9951915740966797, 0.9950001239776611, 0.2427104413509369, 0.5888317823410034, 0.3770645260810852, 0.14300671219825745, 0.9944262504577637, 0.17147542536258698, 0.901504635810852, 0.23903749883174896, 0.13454405963420868, 0.6008207201957703, 0.21719534695148468, 0.09818610548973083], [0.2727601230144501, 0.5316452980041504, 0.6144982576370239, 0.9992762207984924, 0.19570106267929077, 0.99058598279953, 0.4349655508995056, 0.2538999319076538, 0.9603148102760315, 0.9984362721443176, 0.1787414401769638, 0.4788767099380493, 0.9866690635681152, 0.1546141654253006, 0.12963742017745972, 0.4955618381500244, 0.5776249766349792, 0.11948271095752716, 0.09726456552743912, 0.8336818814277649, 0.10763578861951828, 0.12968452274799347, 0.5414419770240784, 0.6503066420555115, 0.10986737906932831, 0.12394001334905624], [0.5655204653739929, 0.7899484038352966, 0.5458379983901978, 0.9992040991783142, 0.774472177028656, 0.5789844393730164, 0.9970782995223999, 0.2823396921157837, 0.2878102958202362, 0.4850141704082489, 0.19034087657928467, 0.6302513480186462, 0.9063981771469116, 0.13853739202022552, 0.31353434920310974, 0.8738205432891846, 0.12826210260391235, 0.8959330916404724, 0.5162087678909302, 0.31349244713783264, 0.8342899680137634, 0.9911043643951416, 0.19771265983581543, 0.7352743744850159, 0.5907804369926453, 0.12638548016548157, 0.7826352715492249, 0.5349851250648499, 0.11146458238363266, 0.7429770827293396, 0.44657909870147705, 0.10274361073970795, 0.8358913660049438, 0.11190705001354218, 0.3419393301010132, 0.22985802590847015, 0.11066913604736328, 0.4876525402069092, 0.2156340479850769, 0.09701016545295715, 0.5713712573051453, 0.20891456305980682, 0.0878438875079155, 0.586736798286438], [0.7844300866127014, 0.9973861575126648, 0.9969078898429871, 0.4153490960597992, 0.571599006652832, 0.9983428716659546, 0.2033146321773529, 0.8387959003448486, 0.9989307522773743, 0.23925462365150452, 0.5605753660202026, 0.8406943678855896, 0.16517522931098938, 0.4268086850643158, 0.6213528513908386, 0.1269146353006363, 0.39090147614479065, 0.534256637096405, 0.11162003129720688, 0.33300548791885376, 0.5428499579429626, 0.10653934627771378, 0.2874394953250885, 0.5640454292297363, 0.10275772213935852, 0.2285773605108261, 0.5498770475387573, 0.11635538190603256, 0.19713306427001953, 0.5260431170463562, 0.1276128590106964, 0.22587904334068298], [0.7026624083518982, 0.9653972387313843, 0.7453320622444153, 0.316097617149353, 0.7947708964347839, 0.5782955884933472, 0.9993914365768433, 0.17564725875854492, 0.8858044743537903, 0.998157799243927, 0.24566008150577545, 0.7686081528663635, 0.9914998412132263, 0.09091196954250336, 0.20938584208488464, 0.5985537171363831, 0.08472441136837006, 0.191457137465477], [0.49040722846984863, 0.9442580342292786, 0.9976165294647217, 0.34639447927474976, 0.5413711667060852, 0.9981935620307922, 0.09578108787536621, 0.8577933311462402, 0.9792858958244324, 0.16566801071166992, 0.5484399199485779, 0.37643346190452576, 0.5496889352798462, 0.07922673225402832, 0.6350082159042358], [0.510952889919281, 0.9821029901504517, 0.4151395857334137, 0.9969990253448486, 0.8779308199882507, 0.9099618792533875, 0.9989885687828064, 0.5366465449333191, 0.8572158217430115, 0.998306393623352, 0.4837523400783539, 0.7301723957061768, 0.998700737953186, 0.35473668575286865, 0.962368905544281, 0.9977559447288513, 0.48053085803985596, 0.6427541375160217, 0.9885718822479248, 0.3112083077430725, 0.5923776626586914, 0.9832321405410767, 0.3313712775707245, 0.5822722315788269, 0.986987829208374, 0.3561987280845642, 0.5654553174972534, 0.9876585602760315, 0.3865121603012085, 0.6552199721336365, 0.9891428351402283, 0.4301910400390625, 0.6638991236686707, 0.9876613616943359, 0.4465695023536682, 0.6965510845184326, 0.9824326038360596, 0.4535873532295227, 0.7165281176567078, 0.9803783297538757, 0.4516967236995697, 0.6389136910438538, 0.9771614670753479, 0.47533437609672546, 0.5219191312789917, 0.9704707264900208, 0.46795007586479187, 0.44653037190437317, 0.9720644354820251, 0.46594223380088806, 0.4484567642211914, 0.9717890024185181, 0.46098607778549194, 0.3952094614505768, 0.9679110050201416, 0.4498969614505768, 0.42145273089408875, 0.9676663875579834, 0.4721985459327698, 0.38129568099975586], [0.33438122272491455, 0.31044021248817444, 0.5141870975494385, 0.9298160672187805, 0.39280399680137634, 0.7229997515678406, 0.9992600083351135, 0.26457735896110535, 0.7901418209075928, 0.9725185036659241, 0.11769551038742065, 0.2722203731536865], [0.5842718482017517, 0.9969327449798584, 0.9984764456748962, 0.8786695599555969, 0.4663602411746979, 0.997430145740509, 0.9895983934402466, 0.7955906391143799, 0.6376124024391174, 0.9951363205909729, 0.1832212209701538, 0.9958274960517883, 0.46674323081970215, 0.998497724533081, 0.22675774991512299, 0.6985417604446411, 0.9908747673034668, 0.10752356052398682, 0.9739547371864319, 0.39680811762809753], [0.38233914971351624, 0.7416008114814758, 0.9976015686988831, 0.17482779920101166, 0.4715174734592438, 0.6251605749130249, 0.997464656829834, 0.10537421703338623, 0.5223381519317627, 0.864457905292511, 0.7875894904136658, 0.5749347805976868, 0.9061821699142456, 0.9609334468841553, 0.10917546600103378, 0.9250606298446655], [0.5320020914077759, 0.4092833697795868, 0.5590022206306458, 0.9986324906349182, 0.2866370379924774, 0.9869900345802307, 0.8018301129341125, 0.1790524274110794, 0.817162275314331, 0.7740751504898071, 0.09501346200704575, 0.9774993062019348, 0.5588966608047485, 0.07743292301893234, 0.5313606858253479, 0.8851321339607239, 0.12923377752304077, 0.27365437150001526, 0.8649762272834778, 0.1442098766565323, 0.23191413283348083, 0.8501410484313965, 0.14376750588417053, 0.19188696146011353, 0.8512198328971863, 0.15849235653877258, 0.19472481310367584, 0.8521168231964111, 0.15768425166606903, 0.19801625609397888, 0.8359113931655884, 0.17341402173042297, 0.20428681373596191, 0.8253822922706604, 0.18401506543159485, 0.23733869194984436, 0.82002854347229, 0.1861323118209839, 0.23143234848976135, 0.8132893443107605, 0.1814195066690445, 0.21953842043876648, 0.8074526786804199, 0.20439663529396057, 0.23205651342868805, 0.8025544285774231, 0.1993696242570877, 0.24036067724227905, 0.8144353032112122, 0.19489021599292755, 0.24014538526535034, 0.8123675584793091, 0.20777380466461182, 0.23780356347560883, 0.8438402414321899, 0.19794709980487823, 0.21483099460601807, 0.8542518615722656, 0.19547849893569946, 0.2192028909921646], [0.5832318067550659, 0.9920992851257324, 0.6690884232521057, 0.9992449283599854, 0.40488073229789734, 0.9099816679954529, 0.9912123084068298, 0.08290739357471466, 0.5560579895973206, 0.7679688930511475, 0.07888326048851013, 0.17620040476322174, 0.28665655851364136, 0.5225470066070557, 0.15313060581684113, 0.4471934139728546, 0.1558459848165512], [0.1672499179840088, 0.94663405418396, 0.9046981930732727, 0.412104070186615, 0.7988737225532532, 0.9990984201431274, 0.16389721632003784, 0.6241880655288696, 0.994526207447052, 0.15202032029628754, 0.4007532298564911, 0.9974019527435303, 0.1641872525215149, 0.4255240857601166, 0.99498450756073, 0.10892925411462784, 0.4140320420265198, 0.993543267250061, 0.11630390584468842, 0.5240644812583923, 0.9856544137001038, 0.13668836653232574, 0.6031798720359802, 0.9845198392868042, 0.1468607783317566, 0.4659995138645172, 0.9944029450416565, 0.14193598926067352, 0.4800277054309845, 0.9877111315727234, 0.17131777107715607, 0.5597915053367615, 0.984348475933075, 0.18397852778434753, 0.6384499073028564, 0.976677656173706, 0.19526971876621246, 0.6327273845672607, 0.971465528011322, 0.18820741772651672, 0.5967348217964172, 0.9659704566001892, 0.1910426765680313, 0.5432931184768677, 0.9623432755470276, 0.1870877742767334, 0.5330570936203003, 0.9644880890846252, 0.17973999679088593, 0.5158452987670898, 0.963802695274353, 0.17090952396392822, 0.4904489815235138, 0.9576515555381775, 0.1525811403989792, 0.5812692642211914, 0.9623773097991943, 0.14628039300441742, 0.4621882736682892, 0.9791223406791687], [0.6147192716598511, 0.728825569152832, 0.33551523089408875, 0.9993243217468262, 0.7129939198493958, 0.9947760105133057, 0.2314261645078659, 0.47442907094955444, 0.6701352596282959, 0.16560107469558716, 0.48434552550315857], [0.6386839151382446, 0.6776019930839539, 0.9993533492088318, 0.3929857909679413, 0.7390283346176147, 0.9979427456855774, 0.7271164059638977, 0.9950991272926331, 0.998954176902771, 0.4826101064682007, 0.9970627427101135, 0.9979204535484314, 0.9918919801712036, 0.3207693099975586, 0.46298858523368835, 0.8079867362976074, 0.18850237131118774, 0.38218390941619873], [0.5517869591712952, 0.9786079525947571, 0.47932326793670654, 0.4485834836959839, 0.9860219955444336, 0.9947770833969116, 0.9988846182823181, 0.17010626196861267, 0.8068701028823853, 0.9980661273002625, 0.12665955722332, 0.5486541390419006, 0.9918404817581177, 0.10049990564584732, 0.9993707537651062, 0.5408605337142944], [0.9069889783859253, 0.9133065342903137, 0.9987583160400391, 0.7646567225456238, 0.41374802589416504, 0.24008560180664062, 0.7265912890434265, 0.07951319962739944, 0.9983091354370117, 0.07506068795919418, 0.1352742314338684, 0.24618768692016602, 0.0625469759106636, 0.1365581899881363, 0.5167073011398315, 0.052130233496427536, 0.2576833665370941], [0.9039096832275391, 0.6547425985336304, 0.9944047927856445, 0.3885651230812073, 0.7626256942749023, 0.5269726514816284, 0.7049716711044312, 0.4672098457813263, 0.21464917063713074, 0.6821969747543335, 0.9983230233192444, 0.12934137880802155, 0.38103219866752625, 0.9967498779296875, 0.1681680828332901, 0.8204148411750793], [0.3206576406955719, 0.43883851170539856, 0.996777355670929, 0.3166610598564148, 0.7046180367469788, 0.5015752911567688, 0.26487523317337036, 0.6682024598121643, 0.9239455461502075, 0.1808708906173706, 0.6373966336250305, 0.9554092884063721, 0.1477680504322052, 0.6480562090873718, 0.9667243957519531, 0.14414608478546143, 0.6529655456542969, 0.9822139143943787, 0.13223542273044586, 0.6657366156578064, 0.9867580533027649, 0.19099263846874237, 0.9944871068000793, 0.14478729665279388, 0.7758855819702148, 0.19218957424163818, 0.9578825831413269, 0.05630272626876831, 0.3659344017505646, 0.5627207159996033, 0.5639362335205078, 0.07060231268405914, 0.38002079725265503, 0.590919017791748], [0.37759798765182495, 0.437911719083786, 0.869971513748169, 0.6912285089492798, 0.9993182420730591, 0.3456942141056061, 0.44910645484924316, 0.9803847074508667, 0.2892638146877289, 0.8527243733406067, 0.46680930256843567, 0.9268279671669006, 0.1711435168981552, 0.4820813536643982, 0.6891176104545593, 0.9738264083862305, 0.13305321335792542, 0.3638589382171631, 0.7528429627418518, 0.9694193005561829, 0.11753951758146286, 0.3821038603782654, 0.8068976402282715, 0.9499565958976746, 0.11210637539625168, 0.30655521154403687, 0.7908532619476318, 0.7921801805496216, 0.09968364983797073, 0.5282717943191528, 0.8290258049964905, 0.10088309645652771, 0.4263263940811157, 0.7274815440177917, 0.10616590082645416, 0.4743401110172272, 0.6310350894927979, 0.1018313467502594, 0.46556752920150757, 0.635349690914154, 0.09287232160568237, 0.4246596693992615, 0.5899866819381714, 0.08911871165037155, 0.3716118335723877, 0.5515747666358948, 0.0828525573015213, 0.4170438349246979, 0.5631079077720642, 0.08246947824954987, 0.38826337456703186, 0.5741702318191528, 0.07328861951828003, 0.37627771496772766, 0.5474175810813904, 0.06632577627897263, 0.3500647246837616, 0.7308828234672546, 0.05705895274877548, 0.3680463135242462], [0.5058400630950928, 0.444062739610672, 0.9679428339004517, 0.28916287422180176, 0.9065065979957581, 0.9989498257637024, 0.6297717690467834, 0.998721182346344, 0.99725741147995, 0.22949089109897614, 0.6542345881462097, 0.4156816601753235, 0.6684223413467407, 0.9982119798660278, 0.153601735830307, 0.9737713932991028, 0.9028847217559814, 0.0785880833864212, 0.19233877956867218], [0.3612614572048187, 0.9985814094543457, 0.5721524357795715, 0.9826774001121521, 0.4906572997570038, 0.9984153509140015, 0.7007299065589905, 0.9749914407730103, 0.9607694745063782, 0.9991686344146729, 0.2157633751630783, 0.9679133892059326, 0.4388529658317566, 0.5622260570526123, 0.199423685669899, 0.8087254166603088], [0.7881603837013245, 0.8271052241325378, 0.917540967464447, 0.37040942907333374, 0.7720156908035278, 0.18979902565479279, 0.9945853352546692, 0.17464512586593628, 0.9811788201332092, 0.991971492767334, 0.09083674103021622, 0.3469814956188202, 0.5977168679237366, 0.12857362627983093, 0.381059467792511], [0.700843870639801, 0.9732100963592529, 0.869171142578125, 0.9172189831733704, 0.9856672883033752, 0.9987420439720154, 0.16501416265964508, 0.9755094647407532, 0.9978606104850769, 0.5463142991065979, 0.9943641424179077, 0.7232218384742737, 0.6241694092750549, 0.9953535795211792, 0.15218816697597504, 0.9848150014877319, 0.8327571749687195, 0.7410190105438232, 0.9899048209190369, 0.11109987646341324, 0.9895681738853455, 0.7538996338844299, 0.07265984266996384, 0.18505357205867767, 0.21531659364700317, 0.6058986186981201, 0.6847882866859436, 0.13851584494113922, 0.08902525901794434, 0.35251718759536743, 0.7324855923652649, 0.6731547713279724, 0.14335153996944427, 0.09623704850673676], [0.7032723426818848, 0.9985660910606384, 0.8698015809059143, 0.8755956888198853, 0.38056543469429016, 0.5350542664527893, 0.8172134160995483, 0.18127073347568512, 0.9943060278892517, 0.45816078782081604, 0.981797456741333, 0.11597053706645966, 0.8245081901550293, 0.8018681406974792, 0.9963977336883545, 0.12548336386680603, 0.9857217073440552, 0.15709441900253296], [0.4759954512119293, 0.829255998134613, 0.989614725112915, 0.2413371205329895, 0.9365400671958923, 0.8290536999702454, 0.8128781318664551, 0.8116381168365479, 0.9982665777206421, 0.23666785657405853, 0.9879330992698669, 0.7141103744506836, 0.9265750050544739, 0.14486132562160492, 0.8649142384529114, 0.9978364109992981, 0.17413127422332764, 0.6439505815505981, 0.11410302668809891, 0.569254994392395, 0.08196404576301575, 0.5732508301734924, 0.0652720108628273, 0.5728746056556702, 0.05627888813614845, 0.47503381967544556, 0.05675654858350754, 0.7130593061447144, 0.9777463674545288, 0.08678555488586426, 0.1568300575017929], [0.36725178360939026, 0.945627748966217, 0.4621276259422302, 0.9947130084037781, 0.9985027313232422, 0.23276862502098083, 0.9121886491775513, 0.9973260164260864, 0.43199992179870605, 0.9910719990730286, 0.9966692328453064, 0.2942604422569275, 0.9712808728218079, 0.9968189001083374, 0.2690027952194214, 0.9471765160560608, 0.9971039891242981, 0.25568532943725586, 0.9243940711021423, 0.996857762336731, 0.23747237026691437, 0.8914341926574707, 0.9963234663009644, 0.2186567336320877, 0.8635379672050476, 0.9955353736877441, 0.25162386894226074, 0.8577998280525208, 0.9943835735321045, 0.2450881004333496, 0.8301104307174683, 0.9935097098350525, 0.2582318186759949, 0.8315898776054382, 0.9931406378746033, 0.25615349411964417, 0.8335012793540955, 0.9920216202735901, 0.2516416013240814, 0.8332970142364502, 0.9899997115135193, 0.24707023799419403, 0.7499975562095642, 0.9874374270439148, 0.2434893101453781, 0.7594497799873352, 0.9865408539772034, 0.2259007841348648, 0.7933825850486755, 0.9882315993309021, 0.2340611070394516, 0.7949972152709961, 0.9863406419754028, 0.2496052086353302, 0.816687822341919, 0.9831988215446472, 0.2460004687309265, 0.8547897934913635, 0.9861071109771729, 0.22568197548389435], [0.525360107421875, 0.9544519782066345, 0.9985344409942627, 0.5651326775550842, 0.9735441207885742, 0.7496236562728882, 0.9993896484375, 0.4082476794719696, 0.9862869381904602, 0.9936293959617615, 0.2882539629936218, 0.5458717346191406, 0.9973715543746948, 0.305044561624527, 0.3610129654407501, 0.6684836149215698, 0.1582900434732437, 0.3422452509403229, 0.5765805840492249, 0.12271001935005188, 0.3734579086303711, 0.5571184158325195, 0.11409930139780045, 0.9562098383903503], [0.768783688545227, 0.9532560110092163, 0.9980443716049194, 0.19508381187915802, 0.6120398044586182, 0.6664544343948364, 0.1883736401796341, 0.40580013394355774, 0.9820590615272522, 0.9833307862281799, 0.07296884059906006, 0.9132550358772278, 0.8994857668876648, 0.09734929352998734, 0.2972273826599121, 0.9719167947769165, 0.9808082580566406, 0.06967392563819885, 0.7845293283462524, 0.522310197353363, 0.0784321203827858, 0.4418160319328308], [0.6019031405448914, 0.959376335144043, 0.9985503554344177, 0.5707451105117798, 0.9855104684829712, 0.9991496801376343, 0.21416746079921722, 0.9870730638504028, 0.8025018572807312, 0.506881594657898, 0.9988492727279663, 0.23702114820480347, 0.6035103797912598, 0.5712515115737915, 0.8110160231590271, 0.1351727545261383, 0.41245773434638977, 0.12018385529518127, 0.8352207541465759, 0.1370856761932373, 0.36208197474479675, 0.11735906451940536, 0.8133598566055298, 0.1298709213733673, 0.34901347756385803, 0.10480143874883652, 0.8141428828239441, 0.14199230074882507, 0.2930976450443268, 0.09010235220193863, 0.7559521198272705, 0.1532926857471466, 0.29459574818611145, 0.4765801727771759], [0.5610317587852478, 0.4846971035003662, 0.6632073521614075, 0.6755377054214478, 0.4179743528366089, 0.9992613196372986, 0.38172659277915955, 0.9668452143669128, 0.9970560073852539, 0.15289944410324097, 0.805869460105896, 0.7761419415473938, 0.9988418221473694, 0.2618466019630432, 0.9629663825035095, 0.976207971572876, 0.9984278678894043, 0.10695905983448029, 0.521504819393158, 0.9952660799026489, 0.07427339255809784, 0.28869354724884033, 0.7694563269615173, 0.07562248408794403, 0.21083025634288788, 0.5283816456794739, 0.07356421649456024, 0.5035082101821899], [0.44106215238571167, 0.956000804901123, 0.9978228807449341, 0.7045944333076477, 0.9726232290267944, 0.9981093406677246, 0.33251509070396423, 0.992611825466156, 0.9042006731033325, 0.36463671922683716, 0.16758114099502563, 0.23460771143436432], [0.5116892457008362, 0.9606386423110962, 0.4878788888454437, 0.6050330400466919, 0.6117067337036133, 0.9991772770881653, 0.9017063975334167, 0.9858241081237793, 0.9965621829032898, 0.28232795000076294, 0.860028862953186, 0.1272812783718109, 0.9965379238128662, 0.14984211325645447, 0.3722609281539917, 0.9908696413040161, 0.07379202544689178, 0.09686321020126343, 0.3235558271408081], [0.28454312682151794, 0.557223916053772, 0.9969198703765869, 0.6349397301673889, 0.766191840171814, 0.9989911913871765, 0.571774423122406, 0.9471458196640015, 0.9978663325309753, 0.18764837086200714, 0.9265652894973755, 0.997000515460968, 0.192244753241539, 0.45858603715896606, 0.5888915657997131, 0.36482301354408264, 0.9524667263031006], [0.3921835720539093, 0.8637125492095947, 0.9921707510948181, 0.6729503870010376, 0.9841949939727783, 0.9964913725852966, 0.33246827125549316, 0.9931990504264832, 0.49786701798439026, 0.3712027072906494, 0.9985848665237427, 0.24408681690692902, 0.9701734781265259, 0.9904754757881165, 0.9926364421844482, 0.09691964834928513, 0.9824237823486328, 0.975090503692627, 0.9827532768249512, 0.07685907930135727, 0.9828617572784424, 0.9698708653450012, 0.970150351524353, 0.07408960163593292, 0.8132337927818298, 0.997890055179596, 0.06004669517278671, 0.950569212436676, 0.974501371383667, 0.8983951210975647, 0.0859743133187294, 0.964734673500061, 0.9772746562957764, 0.872070848941803, 0.09931543469429016, 0.9726260900497437, 0.9760070443153381, 0.7553886771202087, 0.09386387467384338, 0.9700751900672913, 0.9715170860290527, 0.7588322162628174, 0.07827942818403244, 0.9656082987785339, 0.9530690908432007, 0.6984547972679138, 0.06671565771102905, 0.49685630202293396, 0.3323848843574524, 0.07907629013061523, 0.4448196291923523, 0.3763550817966461, 0.08858455717563629, 0.43797069787979126, 0.4844803810119629, 0.09980940073728561, 0.422154039144516, 0.535329282283783, 0.10963509231805801, 0.40290501713752747], [0.4287642538547516, 0.9834800958633423, 0.994331955909729, 0.48108306527137756, 0.9953893423080444, 0.5567001700401306, 0.9993131160736084, 0.2057071477174759, 0.9636358618736267, 0.9498785138130188, 0.10817220062017441, 0.4299531579017639, 0.9965516328811646, 0.1027337834239006, 0.9482693672180176], [0.35768577456474304, 0.5336540341377258, 0.9950845837593079, 0.4775203764438629, 0.9912283420562744, 0.999056875705719, 0.20518314838409424, 0.23698469996452332, 0.6875386834144592, 0.12689539790153503, 0.264808714389801], [0.6469511389732361, 0.980068027973175, 0.5436952114105225, 0.35246843099594116, 0.9970487952232361, 0.18064354360103607, 0.3366473317146301], [0.3504762351512909, 0.947527289390564, 0.9991542100906372, 0.4872453510761261, 0.9874366521835327, 0.18748337030410767, 0.44214656949043274, 0.08283130079507828, 0.792155385017395, 0.949551522731781, 0.06786983460187912, 0.642769992351532], [0.706881046295166, 0.9975379705429077, 0.9975167512893677, 0.5624046325683594, 0.8899224400520325, 0.9988177418708801, 0.4903560280799866, 0.995891809463501, 0.998808741569519, 0.6104968190193176, 0.9124174118041992, 0.9989868998527527, 0.23134472966194153, 0.8949885964393616, 0.995126485824585, 0.0775025337934494, 0.768782913684845, 0.7966632843017578, 0.06121113523840904, 0.9506711363792419, 0.2089637666940689, 0.9718536138534546, 0.20569907128810883, 0.9835102558135986, 0.183884859085083, 0.9551100134849548, 0.994723916053772, 0.12498991191387177, 0.9895027875900269, 0.1415836364030838, 0.9916431903839111, 0.13456003367900848, 0.9924939870834351, 0.12687842547893524, 0.992572009563446, 0.12316802889108658, 0.9925089478492737, 0.11727464944124222, 0.9925191402435303, 0.11095387488603592, 0.9424347281455994, 0.9927142262458801, 0.10820658504962921, 0.9860575795173645, 0.1146625205874443, 0.9866499304771423, 0.10349120199680328, 0.9891844987869263, 0.0944158285856247, 0.99114990234375, 0.09606081247329712, 0.9915144443511963, 0.09421362727880478, 0.9907402992248535, 0.08464124798774719, 0.9911092519760132, 0.07756248861551285, 0.9928478002548218, 0.07525362074375153, 0.9940219521522522], [0.3168456554412842, 0.9897083044052124, 0.6236738562583923, 0.9992761015892029, 0.6023877859115601, 0.9374275803565979, 0.6028905510902405, 0.9992052912712097, 0.3169161379337311, 0.9921420812606812, 0.9053967595100403, 0.5276864767074585, 0.9990211725234985, 0.36284247040748596, 0.9642096757888794, 0.996716320514679, 0.6778463125228882, 0.9916714429855347, 0.9628094434738159, 0.24732202291488647, 0.9889318943023682, 0.9028902649879456, 0.17083950340747833, 0.6846387982368469], [0.8186428546905518, 0.9989834427833557, 0.9962314963340759, 0.9976229071617126, 0.25706419348716736, 0.8919283747673035, 0.9729017615318298, 0.241524338722229, 0.9818047881126404, 0.5720717906951904, 0.5915432572364807, 0.9979530572891235, 0.7124120593070984, 0.9986612796783447, 0.10712303966283798, 0.9195373058319092, 0.8181645274162292, 0.1858673095703125, 0.30006319284439087, 0.6571439504623413], [0.5058866739273071, 0.9921663999557495, 0.993066668510437, 0.9990241527557373, 0.8066186308860779, 0.9952515363693237, 0.9565942883491516, 0.9713883996009827, 0.2886718809604645, 0.993742048740387, 0.5113088488578796, 0.9986975193023682, 0.1066482812166214, 0.4921819269657135, 0.9241557717323303, 0.49010586738586426]], "entropies": [[0.5668387961148188, 0.6703223750295809, 0.0, 1.6704408220635591, 0.7277791017418417, 0.0, 2.5116151330138132, 1.06389023855218, 0.0, 2.8136773390832355, 0.0, 0.0, 2.9942173760985322, 0.0, 0.8601002854345031, 3.9078249784009107, 0.5976832964677776], [2.391999619125811, 0.0, 2.8164001003155623, 0.7182291482258234, 0.0, 4.556040063014356, 0.6840551917413578, 4.280004567468406, 0.0, 0.0, 5.162181122162463, 3.191537017544741, 0.0, 5.943766802237189, 4.282721367544783, 0.6909149288095773, 6.310063682307918, 1.7417883248749002], [2.212477847792665, 0.6021745812381113, 0.0, 1.60517573745896, 0.0, 0.0, 2.638648680431193, 1.25035558073932, 0.0, 3.2089717580893624, 0.8759618523844166, 0.35002544789350437, 3.9572376775556033, 1.9560972781027057, 1.9708792661662022], [2.2019204033226676, 0.927121529746568, 0.0, 3.182858010330542, 0.0, 3.6557200799704574, 0.0, 0.0, 3.856007382199605, 1.1767556094027356, 3.27171697187601, 0.6672207049215553, 4.86072046498183, 1.122664553728873, 3.2795525758673967], [2.7804127646213375, 0.7187989585029693, 0.21927363147577308, 3.5483619360759246, 3.608256816309269, 0.0, 5.056779028679585, 1.2509551497537312, 0.691065099606346, 6.574880870966104, 3.0524249195932724], [1.225347232106956, 0.22344525441487276, 1.9399703842326184, 1.1081283707756258, 2.7675992560964335, 1.5061900496386489, 0.0, 3.5338610124164846, 0.0, 4.530089159924818, 3.65773891243176], [0.7999482325438829, 0.510196831402723, 0.0, 2.656081798908609, 2.042184337338557, 0.3337027312832167, 4.128774269675121, 2.0025510939561015, 0.4865444243392823], [1.4734840366359045, 0.0, 0.9779365005249709, 0.0, 2.7128935376586067, 0.0, 0.2849110139379399, 2.871161469805713, 2.3076059108645604, 0.0, 4.1069298580841105, 2.9535768722056512, 0.302831395792869, 4.488478544747956, 3.4836966152067053, 1.7649835531905602, 1.2304429562528996], [2.6432083567675835, 0.6038401487473655, 0.0, 1.5970196693216603, 0.0, 2.599207022024197, 0.0, 0.0, 0.2041950615879381, 3.9450656705261364, 0.0, 0.0, 4.61432584804476, 0.8616451376677188, 0.0, 5.408949455705752, 1.6432916996383278, 0.0, 5.441118066989463, 2.065037242251754], [2.2010721838621783, 1.492495561959767, 0.6014703586631436, 3.4478349295446957, 0.5412399155908009, 0.0, 3.342841629112462, 1.9863554175145066, 0.9870362235776764, 0.8482777154632348, 0.0, 3.275918519509521, 1.0931685644856928, 0.6457813709261542, 4.7091702541024985, 1.678052699757992], [1.7335156051007572, 0.4099620453877645, 0.38818053082740656, 1.8273975232852566, 0.0, 1.1320237755824165, 0.0, 0.0, 3.3127570334202048, 0.0, 0.2320302587716907, 5.493404660276374, 2.6822882691486325, 1.563546086266122], [1.1137539347124694, 0.0, 0.0, 3.059901176300563, 0.5239292054539884, 0.36727726237478714, 3.957930790065785, 2.073161614174669, 0.6760122802102522, 4.001438422666787, 2.226588139563815], [1.1363245242051858, 0.2706884901350656, 0.3294393893163857, 0.0, 0.3913363036161836, 0.6342330880025052, 0.0, 1.2579703128404227, 0.0, 0.0, 2.6191152661734916, 0.0, 0.0, 3.4854533787886117, 0.0, 0.6689604451784026, 0.18899897698925905, 5.125410790023702, 0.0, 0.8532725132152724, 0.2574929825067601, 5.3342181362143215, 0.0, 0.9697567604307894, 0.3215520570313692, 5.385407671515624, 4.133832578676407, 0.7461527156440219, 5.404105307203836, 3.9925951330606155], [1.9089080794285354, 0.0, 0.8392414424592951, 0.0, 0.9482300449886988, 0.0, 0.0, 3.4218209145454983, 0.0, 0.0, 4.508373135189314, 0.2882411172521336, 0.10284532954308823, 5.11742646048877, 3.782047668479138], [0.765258980237901, 0.0, 0.0, 0.43689207772951477, 0.0, 2.680575871500083, 0.0, 3.018392885013402, 0.0, 5.337976039771831, 0.0, 5.982189726610054, 0.0, 6.139567127171409, 1.3289751239698337, 6.269765560366651, 0.054777831461958984, 6.423211063639892, 0.0, 6.595708400518521, 0.0, 6.665911819223677, 0.0, 6.713048532479732, 0.0, 6.7446098133752495, 0.0, 6.75112329712792, 0.0, 6.735740530675403, 0.0, 6.764385715553459, 0.0, 6.787917068663428, 0.0, 6.732740007893723, 0.0, 6.725048394508103, 0.0, 6.790000124761987, 0.0, 6.795034186483222, 0.28379938637426916, 6.808559911520078, 5.036086530990924, 3.094678543686702], [1.5398923672564955, 0.0, 2.5039527738985363, 0.25337336036684016, 0.8357312651566455, 2.2890966499686067, 0.6754363663585031, 0.0, 4.84043791807916, 0.0, 1.5410857686870467, 5.194634941521892, 1.563761443391998, 2.6197985308570613], [1.391909041846498, 0.0, 2.4304012463723184, 0.4523422840476209, 0.0, 4.706843847068964, 2.508649101270588, 0.6263165510804947, 5.370827452318884, 2.8940991268350347, 0.690690756892161, 5.475939643017043, 3.0427613956065382], [1.5561126236061742, 0.5921837706261334, 0.0, 1.0713995237357787, 0.5826426780572216, 2.2759358612933993, 0.0, 0.43971173366920435, 0.0, 3.002428285515416, 0.0, 0.0, 3.7484764964519792, 0.0, 0.2948317758311872, 0.0, 4.495452956571321, 1.2766652597686798], [2.13399971985457, 0.3539396466610076, 2.535833236343412, 0.1851472426021304, 0.0, 2.905607809374925, 0.6804725017804027, 0.0, 3.4162343644713196, 1.0166133026408692, 0.6421475914928204, 4.466517070267075, 1.3064024399881957], [1.412006708464218, 0.21067918625621218, 0.0, 1.1886346515727162, 0.17952316801837098, 1.955292986241754, 0.4719912799621335], [3.479966088985159, 0.5182425884806988, 0.0, 3.937776439125656, 0.0, 3.879189354745109, 0.0, 4.605353990181831, 0.43739891259563485, 0.0, 4.1232081520847705, 0.7948454774761551, 5.2531906082974835, 0.0, 0.3000824355390738, 5.448120248575373, 0.4283988403320387, 0.0, 6.175493567243872, 2.042234134461801, 5.600538308740582, 1.291811776727777, 4.22651020755076, 0.6919709734846086, 2.214379200437989, 0.6848535231113717, 1.0545942930127659], [0.8307587518609381, 0.0, 0.9819604319824026, 0.0, 0.7823111867018997, 0.6642716766693064, 0.0, 2.477161369761507, 0.0, 0.0, 1.9836849801649556, 0.0, 0.9939473375794365, 0.0, 2.6130601172009125, 0.6152830648598615, 1.0132405758665555, 0.0, 3.1322346340632383, 1.0408670925402774, 1.0445159835309354, 0.34672494525109837, 4.959488026723223, 0.5044000479635375, 0.7294239105014889, 4.767104533197722, 0.34379113539930456, 0.67035233856396, 4.37102450863284, 2.4315057182880726, 0.0, 4.904125394931876, 1.8840480404602131, 0.7796826560125665, 1.3699613903188967, 5.488657049504801, 0.21942896411032037, 1.6010314710959666, 5.74547233937525, 0.1877036116920947, 1.682658070339206, 5.640830038714379, 2.1013977277159324, 0.47954320039931275, 5.468511459511268, 1.978029424046524, 0.4630524969751789, 5.541099634245103, 3.246483121907631, 5.324481793404059], [1.4017828922648552, 0.0, 0.0, 2.8633786500697815, 0.0, 0.8894780332563239, 0.0, 3.0327230256493793, 3.789572136629408, 0.34800978352705764, 4.2356683793296, 4.465949996238713, 1.090811860922665, 4.717359712504231, 4.117443730546427], [1.2455050579484592, 0.0, 0.0, 1.075248539524606, 0.0, 0.0, 0.0, 2.7715928077249306, 0.0, 0.4513117930093131, 0.0, 3.7593182085260404, 3.121247491397488], [1.4339774930617712, 0.15817906264641832, 0.0, 0.7895232661339875, 0.0, 0.6623891988355728, 3.655293670903601, 0.0, 0.564713323526326, 0.0, 3.5276899627898115, 0.0], [0.5639464542974599, 0.0, 0.0, 1.9419406173991025, 0.0, 3.661532515077098, 0.0, 0.9742546767284203, 4.854115033790729, 1.4596280320558235, 2.992686505444593, 0.0, 2.831311780214224, 0.0, 3.6827784045618746, 0.36230850118307373, 4.602001949754552, 0.4234461870959711, 5.55161891159368, 0.0, 1.9590278974129371], [2.7368358402168917, 0.0, 0.0, 3.1798940519688363, 1.7551189133283622, 0.564780844533588, 5.207834961969674, 2.0631421994469292], [0.7257658254244943, 0.5614092072649532, 0.8865692595635138, 0.0, 2.4810616326925308, 0.0, 0.4868576254581385, 0.0, 3.4457777279399977, 0.0, 0.42940852256794637, 0.0, 4.999820192123285], [1.5064347765348478, 0.8150172635277364, 0.0, 2.2164858229461806, 0.0, 0.0, 3.8811395394842783, 0.0, 4.561539081006842, 0.14542345587511196, 4.963129352767244, 2.890868186679164], [1.3148977733628788, 0.0, 0.19786259853655727, 2.795008136048109, 0.7341880946705313, 0.0, 2.974160499230616, 0.3294418091931861, 0.0, 4.6863470708088215, 0.9704933229270531, 0.0, 4.738625036526883, 0.1640033160201828, 5.256918686354812, 3.7094166603077916, 0.6891575744652333, 5.603672810942083, 3.6073232438625977, 0.6831623106733776, 5.682097700443636, 3.5696597148573934, 0.6725533002241418, 5.78104449543251, 3.741465749672669, 0.6769811945655052, 5.789152359070995, 3.789505263657533, 0.68891700266017, 5.7861695064712695, 2.80518746522913], [1.847563096521939, 0.56649565858825, 1.006254606972034, 0.6003471770512689, 0.0, 2.2559643818506827, 0.6875679311046498, 0.0, 3.85376994975617, 0.39849476676236617, 3.7799181821090984, 0.0, 0.0, 3.8651562579324583, 0.606871415520149, 0.0, 5.240103381920286, 0.8816520776580744], [2.1255156042084336, 0.4099475908727534, 0.0, 2.046931871429837, 0.7185321787134524, 0.0, 4.500952678879824, 2.3050018261637915, 0.09443944017995434, 5.001132735338503, 2.811636908346096, 0.6040671030241376, 5.0412082990516245, 3.3928058704103767], [0.9916624884575561, 0.527747986567972, 2.4049840463315246, 0.0, 0.0, 3.1456447881218628, 0.0, 0.6525626684746558, 0.0, 3.2814994771013053, 0.0, 0.0, 3.6043173050392103, 1.1885607939742877, 0.0, 4.275237995914217, 0.4426397409432694, 4.734911913512932, 0.2696554547784501, 0.0, 5.2701981561776865, 1.0125935332391305, 0.0, 5.358463364831558, 1.177159171136109, 0.0, 5.380606533881143, 0.5663419436163005], [2.559281115547287, 0.09642404354298073, 0.9341431574860259, 0.0, 3.3876639518667426, 0.07734220343865855, 0.0, 4.467151442434649, 0.6827608301792382, 2.963595319457616, 0.896870861742102, 0.0, 4.680282540728766, 0.0, 3.0776239899513524, 3.385106966102392, 1.0101802365508064, 0.6263283223227907, 5.615723554901695, 0.0, 3.60869333403439, 3.694418978837823, 1.7657962008472377, 0.8821283957761195, 5.801518744730649, 4.554945035473033, 2.0670358267404096, 0.6931454813774305, 5.645494140370275, 1.1482473720333113], [1.8654530224334307, 0.0, 0.3810834313698032, 0.0, 2.1668121948125707, 0.0, 0.0, 2.77695084222714, 0.0, 0.0, 3.2767934709681588, 0.0, 0.0, 4.511278415318766, 1.301979986962892, 0.0, 5.257015014365748, 1.9904797967533812, 0.0, 5.365967103142441, 2.3909605105048084, 0.0, 5.548685432545706, 2.7275790561089845, 0.0, 5.624170893133851, 2.938219387839309, 0.0, 5.659832426157444, 2.995207177848864, 0.0, 5.690290700032309, 2.7046279612635846, 0.0, 5.72253284285822, 3.5360172266409826], [1.4458492385205317, 0.3461016098160155, 1.4344230750659228, 0.55553353081389, 0.0, 4.1033647945317595, 0.9724614110984466, 0.0, 3.948588075936082, 1.436099966205831, 5.111729097261143, 1.9228474880126785, 0.6562267431893734, 5.367456049631459, 0.8122022305006151, 0.6921678635386472, 5.284206833621611, 0.7612688810534126], [1.634903861079011, 1.2654433099515012, 0.0, 2.8699035844044705, 0.0, 0.0, 4.587908311310973, 1.6815925200810675, 0.0, 4.813430644165889, 0.7424801465397887, 0.0, 5.297947000379356, 1.890609517093659, 0.6687114233060181, 5.518336619545547, 3.6459651884438866, 2.800475485738241], [1.5527624168251792, 0.0, 1.9356554705065236, 0.0, 1.7003450558258095, 0.33478316722051565, 2.614141500767006, 0.38302706636922895, 4.148041975741025, 0.5442618966801254, 5.336376210755874, 3.4123134046035353, 2.201821090970674, 2.429763837850252, 0.6585497167154559, 5.711710176174775, 3.4234980307587346, 0.6923387693947324, 6.273294412740337, 2.733305112016019, 0.6910867303334842, 6.5553972273889975, 4.0439590946505035, 2.2530411787835822, 0.6844934220700711, 6.199719160048095, 4.781140042783325, 1.6579929869204848, 0.6851807331838582, 6.059884573628579, 4.844875726025152, 1.423104217838705, 0.6905882874131289, 5.911922740764925, 4.8609711161654126, 1.1400046961132715, 0.6929980258869544, 5.902152369697814, 4.778471837551064, 0.9533248804169372, 0.6931269495800916, 6.048162291681475, 4.803257811619652, 0.7619486207125779], [2.6929553067352, 0.7257291176487385, 0.0, 3.6346767943843874, 0.0, 0.0, 4.172844208709957, 0.0, 0.0, 4.303903878435657, 0.0, 0.0, 4.8902502084337245, 0.07802302462598637, 2.0703374279580338, 0.6792145312221312, 5.274566419131039, 0.5558729631075183, 2.4362792055958926], [0.7545367428042572, 0.0, 0.12204379545635007, 0.0, 3.592892918924227, 0.0, 0.0, 4.281627053232732, 3.3715099923881646, 0.6129563624466272, 5.1232847061829165, 2.350230710802392], [2.250867771976117, 1.1157205431641934, 0.4524095208840542, 0.0, 1.8995767106443544, 0.0, 1.0275213435648636, 2.5947902037830275, 0.0, 0.68775701053046, 0.0, 3.908013959991334, 0.10423558684271601, 0.0, 4.827328511387097, 1.51702961619803, 0.0, 5.041725010587691, 2.6120166215974727, 0.0, 5.223048117579116, 3.2874070826767006, 0.0, 5.376708048433563, 3.746537355259624, 0.692062337755345, 5.906682826085093, 3.6459953393029787], [0.6079089051542871, 1.0756035842830791, 0.0, 1.8419906325774265, 0.0, 0.8757193970019421, 2.7389066915717444, 0.34386260309563454, 4.094664429396969, 1.9670385360861287, 3.029142978014635, 0.6529454144279669, 5.162091261588331, 3.1011669710955188, 1.1658892663300575], [2.1685124435479195, 0.1924478083084601, 0.5456616829868015, 0.0, 2.0339680584242217, 0.0, 2.971147947958225, 0.16093375367560836, 0.0, 3.4076819956654276, 0.6259531695918011, 0.40567611801378, 4.342889402787379, 0.0, 0.0, 0.628757438685738, 0.0, 4.613960644723619, 0.35546420971603565, 0.6009592904415952, 4.683872341018548, 0.7229651840598736, 0.649912110360352, 4.797519917345116, 0.9665794548936669, 0.6859642575720653, 4.86975630994248, 2.0902888531275328], [3.046096210467145, 1.0532646241350077, 3.356126667281319, 0.707816913426701, 0.0, 0.0, 2.9040513426400967, 0.0, 5.053512608871127, 2.874997752939988, 0.6096920128668768, 5.7528434416478715, 2.9799287320579686], [2.088555798532365, 0.0, 2.759528794328365, 0.0, 1.2023086798315077, 3.469741390574904, 2.1480713099520194, 3.826867692833419, 0.42205771724325647, 0.0, 4.202893115332329, 0.9674511841728132, 0.0, 5.918845162795328, 0.0, 0.3102496084871351], [2.45418574988839, 0.21938901333669864, 0.0, 3.1247973185921363, 1.2186879701539326, 0.0, 3.2489670460818347, 0.0, 3.787697070082885, 0.0, 4.541018276428224, 1.9523131847482056, 0.6790104082144707, 4.610479867624906, 0.38579434854703903], [0.5442214520798826, 0.0, 1.8657499373868658, 0.8370981286304546, 0.4068158452130811, 1.7660738184566664, 0.9087899448553346, 0.6919114000962927, 2.3688468769499735, 0.8641704791826752], [2.641938831053941, 0.0, 1.996377470543904, 3.430798880445673, 0.0, 2.8056010906602933, 0.583237504279421, 0.15596581221917807, 0.0, 3.3826580700438793, 2.3779911957983826, 0.0, 2.1462636621221405, 0.6818634480368884, 1.5684575753482715, 0.48766211323779296, 4.163488322881066, 0.0], [1.1151361542468565, 0.3160295834440096, 2.912333973674448, 0.0, 0.0, 5.803280650436218, 2.346545958533185, 5.983199514557819, 4.505561621869308, 1.5116792157763905, 0.74348278601293, 6.397152385510464, 2.086125940171306, 6.425761121275284, 1.6729901049143154, 6.36830521737352, 1.3294055596076866, 6.0136943983905695, 0.9114772800570181, 5.094734799959954, 0.7679379963001475, 4.334410904013132, 0.6913052996195113, 3.388248112695048], [1.1678500630140147, 0.4222194809518437, 0.9505440647565906, 0.963271594980044, 0.0, 0.0, 3.8249864396921427, 0.0, 0.6708665282630715, 5.0526365963413005, 3.956304368052645, 0.19857806667028635], [1.0355437646357741, 0.6823555133271173, 0.0, 0.0, 2.975096283489453, 0.5105874342757863, 0.0, 4.336913939386202, 0.0, 0.0, 5.965637549553402, 0.6787187536212447, 6.345735376850579, 5.253776098159182], [1.628394920033129, 0.9962518667741682, 0.0, 2.9236335301667253, 0.0, 0.0, 3.3951122935040856, 0.16535853025028752, 0.0, 4.068670719524493, 3.146482469115622, 0.11697685816907985, 4.432312372696388, 3.59373216844689, 0.1262382722684455, 4.638166841760929, 3.588653049870753, 0.27192073937301964, 4.723567490171168, 3.5893901311859255, 0.3006944926070801, 4.763574654879582, 3.559061595161943, 0.3404250524000865, 4.764096929433169, 3.586255503155619, 0.36948954729684264, 4.754151342074307, 3.6282958513091055, 0.36957948373738025, 4.730132428471649, 3.4088613959743945], [1.0256946872305546, 1.351407175990409, 0.0, 0.1967886835450021, 0.34857703197725903, 0.0, 3.799549958358469, 0.9425211952703934, 0.0, 4.459288885492467, 6.08200441419121, 0.0, 2.8793703394444887, 5.922439234084822, 1.527497782828067, 4.269684574295335, 6.076895232431803, 4.654971575274827, 4.531787726318025, 6.161404461478574, 4.53777931324008, 4.782091819659396, 6.199695376916202, 3.7718197203653014, 4.861152375172693, 6.216261508426866, 3.0378052787090826, 4.8535550337462015, 6.152561342377092, 0.6046779236294768, 5.048022993099096, 6.065147377818484, 0.6202635375735333, 4.928973896321348, 6.01805622698032, 0.6448999808216901, 4.862254686346102, 5.987591872009102, 3.077998404686076, 4.983564589457119, 5.949437370804178], [1.6462273867340869, 0.5497576313510006, 0.0, 2.5089764380162154, 0.0, 0.0, 4.125715143594381, 0.3050159596916914, 0.0, 5.2470598593163915, 3.9798661322245104], [1.420057424776007, 0.0, 0.0, 1.8635954107344608, 0.9131111319250365, 0.0, 2.294934061913251, 0.2406822770787751], [1.3472718919571993, 0.6007655101391629, 0.0, 1.7659419947429655, 0.0, 0.0, 1.5144350625640894, 0.0, 0.0, 1.6443660771123672, 1.7553954827940454, 0.0, 3.684657183067445, 1.4781602746748166, 0.42949995493918214, 0.16655960935043052, 4.726331412572481, 2.495961252113071, 0.6165399307616121, 5.1289060526257035, 3.2320321357910493, 0.737349382177864, 0.6215075192250312, 5.283664760435026, 2.7500026290423243, 0.6703136224392463, 5.382239351836479, 3.351349764602077, 0.694422854544726, 1.0202254438056786, 5.47151110365645, 3.257632994468813, 0.6921047171408101, 5.491213343728223, 3.3951677318704876], [1.0966277506436604, 0.5154724215721266, 0.0, 1.144425895075572, 1.0782126877866427, 0.6334901143694356, 0.0, 2.793407240692681, 2.250933922761344, 0.0, 3.3642661848243933, 2.233201364955658, 0.09648557619539658, 3.5247453928959467, 3.5297258392907405, 0.9025081544518303, 4.090851096951476, 0.45655976698665746, 2.400135145267013, 0.0, 4.43810725557918, 0.3557874781005307, 2.122585863806781, 0.2982129091177592, 0.11752613620755488, 4.522393243420627, 3.9627379244233203, 2.699069853347498, 0.903893801074035, 2.8822066218994142, 0.6762605925240731, 4.657675406713805, 3.7056280688828593, 2.825366187023843, 0.9484739391630534, 1.2076381066837452, 0.689531973187795, 4.88601816589277, 3.4638267612545874, 3.0570397967068024, 1.3612366498005475, 2.576607238804355], [0.5584391549204728, 0.7890680425435455, 2.0331289270075987, 0.0, 2.394629711046967, 0.868591673717549, 0.0, 4.049491221140525, 0.8862825390732214, 0.0, 4.5146865138227605, 1.5922277632560795, 2.5462216134314057, 0.22649575080444959, 5.258504743412933, 0.920359584535999], [1.225254381556899, 0.26268063998114255, 0.0, 0.0, 2.0131478377797167, 1.1797783162779147, 0.0, 0.0, 2.8424975108391393, 0.8421464544727795, 0.0, 2.3187660623079127, 0.2926942665453971, 0.5141342652915242, 0.0, 3.2983925790625532, 0.0, 0.0, 0.0, 4.378979506094047, 0.0, 2.1359446869428313, 0.0, 4.140530131262268, 0.0, 4.409339316656978, 0.0, 4.388572130723884, 0.0, 4.379130495082009, 2.951642518061027, 0.6748092525401881, 4.767043646207065, 3.224587545251526, 0.0], [0.6975694481755006, 0.39771854762799336, 0.2859079062769394, 0.0, 0.90360947267274, 0.0, 0.0, 1.2963849044257365, 0.18712301307003903, 0.7673927132626414, 0.0, 2.541667524818972, 0.0, 0.0, 4.688339702351164, 2.893574344273118, 0.0, 0.0, 5.1103812699093165, 3.9815950991244566, 2.4153611985100953], [0.4849979670586737, 0.0, 0.0, 0.0, 2.886878257535252, 0.25735300071206896, 0.0, 3.7530908773233898, 0.8997901618550341, 0.6858734594419547, 4.470974307705889, 0.25580683231001394, 0.0, 2.0470766996055287], [2.160042988813979, 0.2228372530590122, 0.0, 3.303143034864509, 2.169829758469233, 4.112975120215003, 0.1398990039667641, 4.80378969455795, 0.21859115129752701, 0.09907933821697985, 0.5260984316843208, 5.0815441235448535, 1.8077483647486212], [2.6817414085247253, 0.4283927897052109, 1.9738959286249507, 0.0, 3.8805236575604902, 0.0, 4.216729693774756, 0.0, 5.474030986352255, 0.0, 6.210587702313371, 0.16078654692763109, 0.4281808868864144, 0.0, 6.662900592293832, 4.3012638685840585, 0.3389071605417781, 6.365314752007517, 5.354166289847755, 0.4568785707009001, 6.0359963559489325, 5.329043537680148, 0.5148394709299109, 5.8420392529653915, 5.251916315397568, 0.5570851195326381, 5.582727820609942, 5.2257714135970215, 0.5497929172819032, 5.423993256513482, 5.056499001211009, 0.5471592053765988, 5.2373147004096, 5.108687855507786, 0.5692000446900991, 4.969436028719594, 5.04242762417355, 0.5749108964110498, 4.8940287788997745, 5.085171314399745, 0.5688552455654077, 4.860173534028505, 5.282060666280111, 0.6005536782908333, 4.866391668471885, 5.320731949728451, 0.6065222846533829, 4.925025108739488, 5.319096032858372, 0.5926037203104564, 4.866027132352375, 5.372488849279323, 0.6042192291330702, 4.859561082269401, 5.382522608197266, 0.6041201413076345, 4.849128387551315, 5.397646120641048, 0.5929496364782676, 4.796542756985118], [2.048020222415111, 0.0, 0.0, 3.0737141576019535, 0.6749856157677552, 0.34633635783674604, 1.945600511679856, 0.0, 0.0, 3.6905698860524203, 3.0302065367886204, 0.0, 4.1159123788526495, 0.486028836012809, 0.0, 4.333645286546398, 2.4654078850208, 3.2717555240576695], [0.9527463427091525, 0.0, 0.0, 1.4060904510043069, 0.0, 2.3001542575542704, 0.816216377360103, 0.6316305291602019, 4.375417978810812, 0.23721398695022344, 0.3856368892745574, 5.268506187742951, 0.1251233971211375, 0.0, 5.704107389475367, 0.07975146157839687, 2.569776689000772], [2.511908154933301, 0.0, 0.0, 0.2556104003834424, 0.09799979808101471, 2.6675643918207306, 0.0, 0.34125809699800147, 0.0, 2.5954300425472208, 0.8772367372770008, 0.0, 3.898172122489078, 0.4590718881671588, 0.18307001385509591, 0.0, 4.1886866479743246, 0.0, 0.0, 0.0, 4.439244061231754, 0.0, 0.0], [2.11917164775282, 0.0, 2.480814550637116, 0.603267213332976, 0.23981482447190458, 4.531621246766251, 1.6948832569333312, 0.0, 4.9929067472902915, 1.214857860551714, 0.6656947840600429, 5.399796969275033, 3.794386576554806], [2.4619261211149497, 1.0759165531515007, 0.0, 1.747302436462354, 0.0, 0.7181625056397114, 0.0, 0.0, 4.020417105153937, 0.3662577820166639, 0.0, 4.050715701112192, 1.6281843619462275, 4.8279057280521025, 0.1408333798764768, 5.844419522614882, 0.20564382906636786, 5.977627376701478, 0.2864974154969542, 6.053129260995964, 0.4141792243178169, 6.104067483927168, 0.46573489972901183, 6.186885032747891, 0.6801358207732279, 6.240365365058615, 0.949298767447647, 6.200208145742938, 1.1168880877359812, 6.179774795608668, 1.3164774201098464, 6.235651749863065, 1.5557253814954706, 6.219239953243212, 1.6025758097042044, 6.143661867419458, 1.5885373115271981, 6.128881326036112, 1.7431939255353581, 6.137950511121312, 2.001451408962248, 6.129051752815098, 2.247046308538292, 6.149421494393288, 2.2795233618738666, 6.186924240080869, 1.9659601488669618, 6.190794455492736, 1.7118303261608971, 6.157910921582534, 1.7417118755444203, 6.13367403906258, 1.6986134055449025, 6.152204747693581, 1.556521900646229, 6.178548036784291, 1.3655340613831781, 6.20966833013411, 1.1976307115219909, 6.21026539923784], [1.2206177642318885, 0.0, 0.0, 0.8886972116618114, 0.3399001154622333, 0.0, 0.7065997286432485, 0.0, 0.0, 4.339311084974583, 0.0, 5.196072175629521, 5.06624839346834], [1.4821426625921708, 0.0, 0.0, 2.25378767265748, 0.0, 0.23321344889833093, 0.5533164851162662, 0.0, 2.819418847236487, 0.16608718913130313, 0.0, 3.8274104912187736, 0.32021510332518677, 0.26262354966787516, 0.6820251286000296, 0.0, 4.912843992974527, 2.8367508218438355], [1.4781282768540769, 0.4713130607362256, 0.0, 2.3038793191064295, 0.41640569515633563, 0.0, 3.52408076891871, 1.0960505159159315, 0.6813396254628084, 4.831769893295519, 0.7828870010556612], [0.9212917810388784, 0.21383777530325074, 0.0, 0.5425645908505291, 0.0, 0.0, 0.7798495221987478, 0.8017527395881074, 0.0, 2.9049175801022065, 0.0, 0.0, 0.0, 3.44303593303323, 0.6826819248143845, 2.6311231770348193, 0.6660779699571813, 3.999962233666508, 1.5537416347521165], [1.3404878967007101, 0.0, 2.0186937298010665, 0.6698825768096134, 0.0, 2.0580891306165645, 1.4087533650535193, 0.0, 2.8172838856265456, 1.973829203557902, 0.0, 3.4957274389480366, 4.016035208555982, 2.6505473624161358, 0.250027187060733, 4.475864408446619, 0.1299402979762836, 4.731604178520378, 0.5250993510272698, 5.749288330487027, 0.8058531004205821], [1.1163729128808688, 0.32041194673379103, 0.0, 1.7864308443790613, 0.3478834825636483, 0.0, 3.437181881569148, 1.4442317703318348, 0.0, 4.49801327418681, 1.826797088017376, 0.0, 4.509195841783913, 0.5608246979020846], [1.8187665515156335, 0.3757165740517697, 0.0, 1.5855366797209265, 0.6437582598902372, 0.32651917278739356, 0.0, 1.491957534528159, 0.0, 0.0, 4.300815701555783, 0.0, 0.34631721115149283, 0.0, 4.796032221518068, 2.5254797938332607], [1.1935317127889693, 0.0, 0.2763525885975765, 0.0, 0.0, 3.6959985280811942, 1.581528646886759, 0.40374294039190517, 3.7906502682039966, 0.8286787215064619], [1.2491072811876522, 0.0, 0.7960275870438261, 1.6146073340721048, 0.0, 0.6855485841377924, 1.6141538663329604, 0.19319085753190032, 0.0, 2.9001779545308333, 0.0, 0.0, 3.0480732567067426, 0.0891448518685414, 0.8913643935060928, 0.0, 4.437977644771428, 2.3301479048406106, 0.6458799209750501, 5.049889076095725, 2.2842328307419297, 0.6754957955700049, 5.167839291361771, 2.289951197700801, 0.6787478283106265, 5.048375251480447, 2.4300604522446214, 0.6897280033895106, 4.965552714892974, 2.6423502569139403], [1.2042690542376389, 0.31134700616531213, 0.7232945973796352, 1.7294766410455895, 0.6931262191615317, 3.548656629661957, 0.6613077576990953, 0.0, 2.2568442891945537, 0.6796681418504116, 0.0, 4.949293802099274, 4.002818883551026], [2.3992922550067384, 0.0, 2.413486118054816, 1.3779354209781887, 0.600384884218629, 0.0, 0.563071064637079, 2.4862552402396503, 0.0, 0.0, 2.442510867851504, 2.2006791609297234, 0.6109417900429124, 4.332072557421311, 2.4656591096497174, 0.6896908320997281, 4.768876772566518, 2.5243607009751234], [0.9733369330580353, 0.0, 0.0, 2.2375462112428415, 0.8713521435286737, 0.0, 4.25673824002396, 2.9463585969590036, 0.0, 5.299575776331233, 3.6350679237860337, 0.6928400418222875, 6.131700574897883, 3.215312848815946, 2.2516991017443457], [1.858590977917032, 0.0, 2.2410165770159556, 0.6928126642861234, 1.6037425193974135, 0.0, 1.8135416116051342, 1.1908637751316484, 0.0, 2.7601565664196817, 0.0, 0.0, 0.0, 3.9198865297563814, 0.6764161225997072, 0.0, 4.565492645991038, 0.0, 0.6444160895378449, 4.697495477277158, 1.982852257670202, 0.8170278899664088, 0.19294280488444632, 6.148307976801958, 4.497537712826809, 0.5044619316662032, 0.544151640831478, 6.224453382210048, 4.833734294487879, 0.6173364823513361, 0.6600139799563368, 6.184371492197213, 4.962639169942432, 0.8560135044423284, 0.6931152093033786, 6.165070467581897, 4.946928919182027, 1.0196941895544958], [1.0031494574174056, 0.0, 0.6929771031478102, 0.0, 1.1914731469809068, 0.6606125398407423, 2.1582263933853305, 0.0, 2.7701414768554145, 0.5503470761814474, 0.0, 0.9467462525787558, 0.0, 0.4625863284587631, 0.5827912896111394, 4.183410459045543, 0.8667778046384389, 0.0, 3.9583839358394344, 0.8987480461704315, 0.0, 3.727472884817092, 0.8180332426023166], [1.334821210084102, 0.0, 1.6459710655467674, 0.9642076257955751, 0.19056997697196879, 3.1704232741944733, 0.0, 4.251161888210935, 0.487797724451016, 3.4842539075467327, 0.5482049610047183, 6.049413091285866, 0.9313005452385534, 6.401777787605856, 2.164023752168688], [1.067734177441259, 0.0, 0.0, 0.0, 1.1473735225346395, 0.4163574435232393, 0.0, 1.9279939577530951, 1.7793623447114937, 0.0, 3.0358283597932614, 0.0, 0.0, 3.791725911284968, 3.1532542717388092, 0.0, 3.717434230841728, 0.0, 0.0, 4.497349712368017, 1.5863022559931632], [1.720316172991087, 0.459064111197199, 0.0, 0.9843621461230727, 0.0, 0.14194793357327337, 0.0, 1.5444860489563352, 0.5227523634587862, 0.0, 0.0, 3.578845916918265, 0.12385672653935725, 5.08021703191843, 0.5047734183205944], [2.053549638570589, 0.42937422916644835, 0.0, 1.3984344781867544, 0.0, 2.8758039451274326, 0.3206402316615951, 0.0, 4.9123150539386575, 2.8993804227930595, 0.6906388364421987, 6.165005047705397, 4.833712636469611], [2.009969639316958, 0.0, 0.26723132322563353, 0.3948202592862024, 1.7201000961780684, 0.6061244356368416, 0.0, 0.0, 3.3925695756196936, 0.09372450758395708, 0.0, 3.5564435262815324, 1.0897491747503274, 0.3340893042651004, 4.625030881151049, 0.12654799485354648, 4.877120240939509, 0.8509845811173625], [1.4153865472612646, 0.29769157167233795, 0.0, 1.5340051626076603, 0.5791863431887689, 0.0, 2.990553311613165, 2.4692644016189784, 3.5273788974550238, 0.2795247745600613, 4.402256316215885, 2.881472197123116, 3.287227862185658, 0.6608456013477954, 4.546565164783554, 3.1209448236682436, 3.4153085244708774, 0.6914903332015281, 5.133200238592641, 3.4142071405585495, 3.1371009650836696], [2.4681817316004713, 1.399903900373612, 0.7892701254282277, 2.6551718032100884, 0.0, 0.0, 2.6175236484301263, 0.0, 0.0, 0.0, 4.92941875091696, 4.224074480089479, 0.4670455295137073, 5.351765481139033, 0.8131244151960586, 3.800220365828734], [0.9719882411638703, 0.5327334613455718, 0.0, 0.9925805109179027, 0.0, 0.0, 2.927238392022161, 0.09737808235269599, 0.7934380170934288, 0.0, 3.315228565843982, 1.041173306789104, 4.099281597159013, 2.449818585028385, 2.8736444821491656, 0.6920139828525723, 4.89180105307528, 3.205610950303976, 2.6813121849132133], [0.262772941959215, 0.0, 0.0, 1.8740515302302765, 0.41967196650570465, 0.0, 0.0, 2.8796760195933038, 0.0, 0.0, 2.484832564316814, 0.0, 0.0, 2.9588917710399674, 0.4076114092600579, 0.0, 3.1149336038701376, 0.5172781492650821, 0.8570040916806438, 4.406206773717605, 2.031400978880076, 0.0, 0.2319515249174842, 4.560719013177383, 3.7098013593949237, 0.36038212224109994, 0.42355571954512794, 4.5751236143893355, 4.025033000585936, 2.894827389027503, 2.6743414661797993], [1.4438319125872854, 0.0, 0.5752776295649475, 0.0, 1.3386641256068625, 1.508892107947694, 0.0, 2.491435803465166, 1.0177659975288078, 0.0, 2.8900210618533793, 0.19719865715065318, 3.9424924464178717, 1.9904610764823594, 0.0, 4.314063038745432, 2.415255795371693, 0.3479768137197823, 4.492300244800943, 2.628715980971529, 0.4141207895411433, 4.737048616631899, 2.6266781922197975, 0.44102539849924094, 4.845797531743779, 2.6143979585074417, 0.546534634777192, 4.96579452936326, 2.593655198165191, 0.5805007768712722, 5.06710300319157, 2.5089751846162853, 0.5929826875108692, 5.106686789290804, 2.5867694447822407, 0.6158957153609861, 5.140143792560991, 2.552089064329158, 0.6352053193296036, 5.301117076632778, 2.590389112820133, 0.6444985175225016, 5.354196098551768, 2.681542870254781, 0.6745699802220883, 5.451197357788389, 2.4897148023021853, 0.6704231508394051, 5.466653707320999, 2.544247975090673, 0.655671235240659, 5.527423097910203, 2.5409217974912286, 0.6657150331979651, 5.614441578461933, 2.5324629020683136, 2.5827025817790834, 5.571787684413655, 2.609856774199303, 2.388703921146226], [1.5539248512181925, 0.6931151898263491, 0.0, 3.300124761101018, 0.0, 0.41706051996159565, 0.0, 3.435250430362456, 1.2093180142198876, 4.565744877319556, 0.16476229059286904, 0.0, 5.3257733379588075, 0.16710675166535105, 3.2743608567603344, 0.9750441343035751, 5.535172183299025, 0.25769984512316146, 3.199078035802246], [1.966919217631818, 0.0, 0.0, 0.4168297324668676, 0.0, 2.573628396935947, 0.8270869635633051, 0.0, 3.6057439985645194, 0.025594755622459945, 0.83765128834579, 0.0, 4.219173146043186, 0.6889450372245993, 0.503928505847536, 0.0, 4.657410769347867, 1.7626006514770813, 0.6965655531234503, 0.0, 4.85993782371856, 1.9012035281198594, 0.2482016020336018, 0.0, 4.943909775277025, 1.7489268810753527, 0.3014832626759091, 0.0, 4.963799365257908, 1.3071318108327625, 0.1766782329904253, 0.0, 5.090003404981535, 1.3984290346923458, 0.1688313198814353, 0.1988123369568664, 5.253256454658432, 1.2331938210050504, 0.2821977594801169, 0.21813776732883305, 5.42813626244703, 1.3482751037989475, 0.36882398073721673, 0.28260598915095086, 5.591349620483099, 1.7285567277420417, 0.6734291171326298, 0.30408023767742887, 5.6798916679080875, 1.6581608131917116, 0.633222478749535, 0.2936401625449408, 5.6799841173761285, 1.7845345028327655, 0.7180525906711973, 0.3592980059170064, 5.797193327980353, 1.708967582355496, 0.745780456899772, 0.4189270439688945], [1.818714560222893, 0.27040599214051064, 0.8272302149351625, 2.281173670886865, 0.7023866938004159, 0.6534982662767747, 2.841164221421391, 0.0, 0.17762550801405846, 3.446468038631907, 0.0, 0.14022382927638466, 0.24539790438391246, 3.9982536319145696, 2.387841406425084, 0.29753674120732965, 4.146098679676681, 1.1876006496602005, 2.501081922208902, 1.5523098553991626, 0.6921751412668906, 4.418018859228978, 3.6497703296909445, 1.9576275221420396], [1.231106700393564, 0.0, 0.5206541481910361, 0.69128459664545, 0.0, 1.7362474039022118, 0.93436198272065, 1.321661442449464, 0.0, 3.6242726903709483, 0.8691376579138617, 4.055362216367703, 4.705150490446858, 0.0, 4.703486727318328, 1.6373460723421218, 2.6723654488969513, 0.29469819636020544, 4.571081112267428, 0.4481413982374547, 5.250695622303128, 1.9260963589569267, 0.4234016951580813, 0.6528863097210154, 5.311347818430577, 2.2720766779018415, 0.3209246879571926, 0.6846813880946958, 5.365816562358994, 2.5612080091244978, 0.2691871313387477, 0.6930316791004916, 5.397736231200406, 0.45789268856043774, 2.1970267518938016], [1.1284962097382014, 0.6845891104299193, 0.0, 0.23894656073940615, 0.0, 0.0, 2.2879846099575962, 0.6609689325321375, 0.0, 3.4706337017463635, 1.2539647626309403, 0.0, 2.4099096850066246, 0.0, 0.0, 5.048787896182841, 0.6784145881562259], [1.440002159855161, 0.0, 0.0, 1.0995150765118393, 0.0, 0.5095511061667876, 0.8663061314634106, 2.816004953751301, 0.5698773149458596, 4.291188265012636, 0.5994243030280535, 0.0, 4.266858853075235, 1.4990806589286998], [1.4289040311109875, 0.8684101633012627, 3.984583934285638, 2.388969233557326, 0.681403601938922, 5.020043218687919, 2.4574112367407], [2.3840248027897144, 0.0, 3.2176208358085567, 1.5536150303238545, 0.0, 2.914167927852841, 0.0, 0.0, 5.589794568235079, 3.638277263796136, 2.700443506280751, 0.6905756274013426, 5.718575220370717, 3.8117416632747654, 3.2752676782481664], [1.8483358405084913, 0.4573711004190558, 1.9358652580337512, 1.1301845945819269, 2.0394336994925255, 0.7947572567136412, 1.9452794048356454, 0.0, 2.6384715403381405, 0.0, 2.622468111376298, 0.0, 0.9989055490654899, 0.0, 1.021965302339973, 0.0, 3.989265017384877, 0.0, 4.14470229775623, 0.0, 1.2122711401903044, 0.0, 2.7865043775874274, 0.0, 3.627161393447333, 1.3853231531063679, 0.0, 3.2225117935327994, 1.4369755061090128, 0.29829965763625343, 4.570808066597333, 1.9234756097176957, 0.5851293587467771, 5.197458004528365, 1.3020918778078887, 1.6298198301627769, 1.5325755047133531, 4.435947463630823, 2.1201932088508406, 1.3818124924268171, 3.6608236401747147, 4.3666363090024705, 2.525630089666642, 0.6583348652989836, 4.490446061091017, 0.9186424030290116, 2.5887616094557515], [1.689145774521406, 0.7403188101879237, 0.0, 1.9677421835383306, 1.1709390723882405, 0.530840365996293, 1.991814382466185, 0.6528662469775747, 0.0, 4.662748016486612, 3.044691661036214, 0.6896581554519572, 4.137351427612857, 3.239976328087052], [1.6778305623659335, 0.6499599819436885, 0.0, 2.8484741717746713, 1.5081448970874967, 0.24011267030789313, 0.0, 3.18765545071778, 2.9535586383474617, 0.6619913310741756, 3.812926378910969, 5.120505572037593, 0.685948191231254, 4.051051365715014, 5.931413244469428, 0.873879721725922], [1.2796836043938238, 0.0, 0.0, 0.0, 0.7188633271085806, 0.0, 0.0, 1.7025558203739344, 0.0, 0.0, 3.289869371632517, 0.0, 0.0, 0.0, 0.0, 3.364545264038023, 0.2945808360296745, 0.0, 0.6657262515993431, 0.0, 4.72995934833076, 0.0, 0.0, 0.0, 4.936546054429481, 0.7545464666173325, 2.1183218187105055, 5.615442840833641, 0.0, 0.0, 0.0, 5.48677599672769, 0.0, 0.0, 0.29689223075931903, 5.581480431544354, 0.9749694819036734, 2.8092494750938735, 5.70330874885139, 0.0, 0.0, 0.43138832340497824, 5.784595784758031, 1.3411232973132305, 3.613028552296463, 5.9220613694381266, 1.0607414182102333, 4.991999757548648, 5.977122489462006, 1.0227353644568402, 5.173539872756628, 4.884439797318693, 1.6716841163310807], [1.539634434868146, 0.15232714183814852, 0.7211130106765029, 0.0, 3.3775232913115967, 0.0, 4.479590189140756, 3.0695017066873924, 0.8267967531924735, 3.917479441404957, 3.674997986729561, 0.8261481060797216, 3.613712018573656, 3.9122764935582635, 0.9499332401785652, 3.6874544593441505, 3.9460382107145078], [2.041167891302566, 0.0, 2.064831789649791, 0.0, 0.6616226257142479, 0.0, 2.96398136802219, 0.0, 0.6854009325006014, 0.0, 5.265065518643971, 0.33282957569709354, 0.0, 6.042842176310612, 4.10030983761364, 0.0, 6.194624152245404, 4.352381608608302, 0.0, 6.102166801884097, 4.2207392205511916, 0.0, 6.077497452956025, 4.450871240657711, 0.0, 6.034137454686938, 0.8064995120212808, 6.0890510711953665, 3.0499036163491424, 0.9221320340197252, 6.72243550098546, 2.8507783374610147], [1.7097555332542973, 0.0, 0.6898534782972663, 0.0, 1.6883918380597223, 0.3533114210389242, 0.6873330260664654, 0.5661275458717564, 0.0, 0.0, 3.923975240235239, 0.0, 0.0, 3.841331904939251, 1.2225726568268453, 0.0, 4.476831875606916, 0.2878440551195717, 1.247926620006758, 1.5317554311644235, 0.4780109672475082, 5.64636621421642, 0.7100234402567457, 4.373678270573185], [1.8254563636663699, 0.0, 0.0, 2.1520914527470865, 0.0, 0.6758134042544042, 0.0, 2.745983109704927, 0.0, 1.4602177713672877, 3.654454188466264, 0.0, 0.0, 4.134811577783976, 2.1421587918438667, 0.20763632210392752, 5.254430319730122, 0.0, 2.205770178819491], [0.8186108819603459, 0.0, 0.5794347920608678, 3.288848345761385, 1.3043095146913042, 0.0, 4.436492509803525, 0.0, 5.14630048399109, 0.6654613088579997, 5.548578560671091, 2.1058864705421567], [1.906906803722035, 0.6107014943709305, 0.0, 1.428867380600578, 0.1617261500206166, 1.095536402083971, 0.43602653053897156, 0.0, 1.1244800261236452, 0.0, 0.0, 2.343505920029718, 0.0, 0.6817645749005, 0.0, 4.557825363301713, 1.5045670544443535, 0.1288051174423609, 4.207114330261899, 1.4096306180743463, 0.0, 4.84556251177851, 3.5181984352685958, 0.0, 5.364082595248021, 4.387235818696944], [1.6929679626848047, 0.0, 0.22619461032369262, 0.0, 2.6048980952171537, 0.6157257549330692, 0.0, 2.5225634280800877, 0.0, 0.0, 3.519079032100222, 0.3510752059054538, 0.4892700458782589, 3.437341801849537, 0.0, 0.24246206231796882, 4.318694051004768, 1.2552554901829798, 0.29556697045787816, 4.395383384780923, 0.6930270241260813, 0.2483816547719775, 4.0855967036404035, 0.6503908357949739, 0.26810753699599066, 4.189599710799394, 0.5325336876121117, 4.721638244658327, 3.29025367287036], [0.9225615853738779, 0.5776227667532494, 0.0, 2.56952299504015, 0.0, 0.6552047870617858, 0.9009463766735787, 0.0, 3.537504505507076, 1.2951232648126314, 0.6809379738972459, 5.445594397399291, 0.6033322293934291], [2.452836020672822, 1.0292945038049988, 0.641931991096355, 2.084763098182904, 0.6896323546409289, 0.4322658516559671, 2.6271381117778936, 0.0, 3.456744612831069, 0.0, 1.0034613542984816, 4.286839887217673, 0.0, 4.268381968393319, 1.849908552720072, 3.6160959029775377, 0.0, 3.3156552706071087, 0.0, 4.177360547507792, 0.4760256625989081, 3.343448459445921, 0.6100126156101656, 5.40929831132162], [0.8051260550837582, 0.0, 0.0, 2.4095863570360314, 0.0, 0.0, 2.897655286276506, 0.619364636125179, 0.0, 3.5233043567222797, 2.026381863932205, 3.821417558493173, 1.6211601635265624, 0.6357875591107074, 3.59161907561943, 0.42384058579639744], [1.4464992405089727, 0.0, 0.19762120204016592, 4.200773149613623, 2.0838077479560653, 2.108558138960966, 0.535372153609166, 4.877410270155527, 3.205347425019286], [1.966132873524732, 0.9650083200423678, 0.0, 1.8966915670103337, 1.7372489257368615, 0.0, 2.53839200694995, 0.15830968700545556, 0.37338492452456895, 0.2282928504751515, 4.192104389471645, 4.021156478763277, 0.890561175255693, 4.687662433139081, 0.20019869296783666], [2.443477404393337, 0.0, 2.8565721171967797, 0.0, 2.39127211416649, 0.51433212842976, 0.0, 3.2629061796019543, 0.9180173774759631, 0.0, 4.063428696624855, 0.6971908799235124, 0.0, 4.035898428181525, 0.6899639123999876, 0.0, 4.336329156647855, 1.4897151998199745], [1.2429419317461496, 0.6317598040658768, 0.0, 2.6214233019535684, 1.651412030790443, 0.0, 2.1981699675561535, 1.4537679149679974, 0.6924658353983473, 3.1138767511204524, 0.6568259956618132, 0.31359384070750373, 4.262354100870987, 1.6853145846797952], [1.8101737118783436, 0.14630860415879238, 1.1391938281135054, 1.6198785829324065, 0.3147658367496273, 4.07303350626069, 0.32383603415674667, 0.6703065447080456, 5.098012102741037, 2.1313426047248747], [0.5844238667014666, 0.0, 0.0, 1.5625615327140963, 0.0, 0.0, 0.0, 2.4911669951660707, 1.9292335037747852], [1.6559048738620585, 0.8696924506317235, 1.9896410790256709, 0.0, 0.31832372056139346, 2.040922811704896, 0.6454048755837116, 0.0, 3.1372567777501468, 2.1877718427602835, 0.0, 4.046789253702708, 1.6825976753606573, 0.0, 0.837334574067446, 0.0, 5.084378066794905, 2.288762663699961], [1.2771466503899749, 0.7547853061969574, 1.0624891715680331, 0.5115874036743544, 0.0, 0.5706834447901343, 0.2565858703436246, 1.1519296173690436, 0.27819976281306086, 0.0, 0.0, 3.7601879095748347, 1.8796369846213141, 0.6701326071921324, 5.8897622943594365, 3.131408530069035], [0.4753497647944036, 0.8080432546069873, 0.0, 0.8477083887436179, 0.7526151168651343, 0.0, 3.773646908457931, 0.0, 0.0, 3.624052203124598, 0.0, 0.0, 5.195495483251375, 2.8616026215167922, 0.6886351643448714, 5.558560436730165, 0.0, 2.173146555527868], [2.7826816134660017, 0.0, 2.9483458137855876, 0.0, 2.608762764097602, 0.38032774280980947, 3.5516683685159705, 0.5611099996135522, 0.0, 0.0, 2.46329955543697, 0.0, 0.0, 5.485092259113252, 0.0, 0.6805856122769123, 5.958180148076467, 0.41641805068833143], [0.5180126936931769, 0.0, 0.0, 0.8446107161647289, 0.0, 0.13824883176744523, 0.0, 3.7352422830615457, 0.0, 4.434602237305035, 0.30212165504647837, 0.0, 4.30711017802912, 1.0190959916171598], [1.8646630248698244, 0.0, 0.0, 1.6096571559778752, 1.02039587319938, 0.0, 1.3832915266586066, 0.0, 0.0, 0.0, 3.7901289499127486, 0.0, 0.39876823332698497, 0.37339960743134143, 4.073187716961078, 0.16228670243564272, 5.121052814607851, 0.0, 5.321005177495033, 0.6792794459363768, 6.928322033688501, 0.6789661145560151, 7.372140819804485, 3.8603080921397837, 3.229386262779389, 4.176944585647706, 0.0, 0.07601776173038832], [2.3569890684981782, 0.6356121715604395, 1.4290542435255935, 0.0, 2.0889966229969983, 0.0, 0.916289572651847, 3.0788004142495344, 0.6915745499597212, 0.0, 3.272427732698858, 0.9978034713606063, 0.0, 3.8621693678358904, 1.7046107985520205], [0.8041200904756739, 0.0, 0.0, 0.7817701100401567, 0.0, 0.0, 3.7890963600033327, 1.7253658614313494, 0.0, 4.317001915454181, 0.0, 5.013964396488914, 1.5244621904556912, 0.6114449523391852, 0.0, 5.4070740113322415, 2.521948173991901, 0.21073078994476774, 0.690239743378545, 5.630315741836275, 2.6213693618861544, 0.44669696801870795, 0.67735046444157, 5.629883259777036, 2.787887235761867, 0.20599289452424285, 0.6803624215920765, 5.64572563455635, 2.9268147265254583, 0.15054697956709862, 0.6890896363340415, 5.712648900834906, 4.654351661117663], [0.4665127211670742, 0.1683391572085897, 0.48853770390970097, 0.0, 0.0, 2.641853094967114, 0.0, 4.826808472673921, 2.438694329865644, 1.5416895528720527, 1.160936891821921], [1.5522749648779124, 0.31794644940343597, 0.0, 1.9963277103483046, 0.5592505055505075, 0.0, 2.338439348749798, 1.2030998989070398, 0.25322800614964963, 3.501499915994742, 2.4345757994497217, 0.32352290064337713, 3.6901789511302736, 2.845586948201427, 0.46394881002733596, 3.7347607245986056, 3.036374683127256, 0.4760293221003644, 3.851307251292225, 3.128595260451075, 0.4933290583418073, 4.090366652783525, 3.160390438937927, 0.4461601573681769, 4.269912396640532, 3.2776282452462198, 0.36636464003155794, 4.452142732710204, 3.281980006465584, 0.30546788200684, 4.683923350906784, 3.222220297980119, 0.3826112678074887, 5.2091630363920505, 3.2752233162723092, 0.514145600307602, 5.524329557525893, 3.349208444868858, 0.4772546922728297, 5.7570165677178355, 3.4194640846753304, 0.6769241661134882, 5.856417767214292, 3.548064015945299, 1.0670102323427708, 6.012643304680297, 3.4939522224490296, 1.0134736737307515, 6.048632132689731, 3.4924836628630564, 1.017642302129456, 6.142900810261713, 3.5616548323567607, 1.1567567031994963, 6.195453911279533, 3.501438879891942, 1.1671032031396171, 6.188128426313111, 0.9918977983381955], [1.4814853693769534, 1.0551298394790296, 1.395237859807421, 0.0, 3.730611843027016, 0.0, 3.2973519877896145, 0.41644705929164305], [0.9114503614365748, 0.5896219586126944, 0.0, 1.8863539339096391, 0.5965074400929864, 0.0, 3.9066637932826747, 0.5913242800444507, 0.0, 0.0, 4.70754020874136, 1.8863627850703384, 0.6816288345203432, 5.263021744541754, 1.915539399806903], [1.560160561144316, 0.572335258772249, 0.0, 1.2510094580539102, 0.0, 0.0, 0.0, 0.8358181543514513, 1.699004631247631, 0.34106198988208364, 0.0, 2.9197521235317927, 2.931707488657225, 0.6846359342641668, 3.5500067978259806, 3.2249525199043596], [2.1050955786066887, 0.5524097553055136, 0.0, 2.6813095862672216, 0.1437642356396211, 0.0, 3.3191944644971616, 0.9016384822861553, 0.6747300603097005, 0.0, 3.924354934600038, 0.0814215533029346], [0.38065455998442455, 0.0, 0.0, 1.1658094985931946, 0.5762213709278061, 0.0, 1.2047951875595853, 0.25330708744751324, 0.0, 2.9939787287122392, 2.1836460987355726, 0.0, 4.46884961380894, 0.0, 5.318116950019764], [1.4467282622135633, 0.8938489263392309, 2.3967223356091387, 0.7905472146744881, 0.0, 3.7543715409222154, 1.7854104787552694, 0.0, 4.350845879559311, 1.9101062770602746, 0.6693014749020165, 4.810699196793322, 1.6395360049726506, 0.6927050180871631, 4.873403135246106, 1.768560480910459], [1.750583115449257, 0.0, 0.9404738026591145, 1.4053751131941319, 0.0, 0.5183621124194523, 0.0, 1.7565338506849213, 0.0, 0.0, 0.0, 3.5345146732613655, 0.65340510196675, 0.0, 4.6803577419142695, 1.948086965525103, 0.16749754969711467, 1.0111529525607876], [1.7683126283239756, 0.43380753102719927, 1.4478380346397486, 0.09152481441621534, 0.0, 3.053619795674801, 0.22289829702740305, 5.812237454451512, 0.13084921643386022, 6.301691057193286, 0.0, 6.458130312227482, 0.0, 6.443282870658528, 0.0, 6.370684380238904, 0.0, 6.293188372517382, 0.07915748651470499, 6.235386007385182, 0.16709150713217916, 6.1541521459909125, 0.3741061215080653, 6.103275956048004, 0.5104921576732512, 6.11812815605073, 0.6466912525701606, 6.132807306482569, 0.892860355236665, 6.0966285455908285, 1.1082285755053918, 6.108708573659123, 4.064308505717435], [0.9358978111127257, 0.46522965228016455, 0.0, 2.215475361872675, 0.0, 0.692775817492258, 0.0, 2.8502948742000838, 0.36985324572486644, 0.7631129817674465, 3.7553632376318573, 0.19628131340549218, 4.822812750541217, 0.0, 0.6736826839454874, 0.44772146627674947, 6.066002799315352, 3.371645245086446, 0.8667931400352514, 6.3609626401096335, 3.660571529380908, 0.8685012642109411, 6.386505191871687, 3.623555161371277, 0.8550742795712161, 6.2553884145295, 3.628198757431865, 0.8541035000870457, 6.155987850014689, 3.4481689033745697, 0.8537867591979706, 6.140556685374756, 3.4800589087463476, 0.8188708942213949, 6.046504754159717, 3.2044767560211356, 0.7994087943548462, 5.992349099721243, 3.0356445755272596, 0.6907336561950008, 5.96194064330925, 3.0734755329903876, 0.7822745294594897, 5.986463943277031, 3.158621460165885, 0.6931192299192979, 5.9631857145280875, 3.1463932213581143, 0.6931286820725086, 5.924906779405363, 3.168835576721888, 0.6929088883488631, 5.866412162280548, 3.263426809677063, 0.6912273155688343, 5.845201576497028, 3.246931725470506, 0.6920994963974775, 5.847718987174417, 3.207884071265606], [2.7601720780765513, 0.6920712370898996, 0.4290511602121666, 2.537053009342271, 0.3289725934759923, 0.0, 3.836515644777302, 0.3442757017678553, 0.0, 4.550666800888336, 0.0, 0.32426092321983313, 5.592908445783767, 2.4734760084270984, 2.3774442839873995, 0.6286163253537638, 5.924184389236859, 2.567482806676477, 2.485943952436809, 0.6883012117861749, 5.989194867996899, 2.1557519055714427, 2.2446809171164994, 0.4920801828305592, 0.8056462088038107, 0.6514563365536106, 0.4313314502955339], [2.1043449365719127, 0.0, 2.0497473720855437, 1.0255628075278505, 0.0, 3.5830858876529033, 0.32011241629281556, 4.759673051276595, 1.9456872772975988, 0.0, 4.362067447348627, 2.591291453098679], [1.2659542241312245, 0.0, 0.0, 1.5225104424445035, 0.0, 1.9832280392433015, 2.48850258608216, 0.0, 2.4939520687937082, 0.0, 2.0861902796507175, 0.4113687080817702, 5.400008092472664, 3.300506048940077], [0.9591624934279038, 0.0, 0.4940488070190573, 1.0747356059938797, 0.0, 0.7825397943965737, 0.6591250667041268, 0.0, 2.3213796062395438, 0.4015774663334575, 0.0, 0.0, 0.42325214073594186, 0.0, 2.5959430021634007, 0.31789743318047914, 0.0, 3.5183298653158386, 0.0, 0.5048225654873503, 4.071249537539237, 0.20879345848464803, 0.5253472229023214, 0.0, 4.750676617244348, 2.635470350562797, 2.290797426445722, 0.0, 0.6913925595256476, 4.811801069531991, 2.085382528409977], [1.4560177818388587, 0.0, 0.5861071785678642, 1.9455892199475044, 0.0, 2.527735739585756, 0.0, 0.6787887328794074, 0.0, 4.156910635373104, 2.8117373309059293, 0.6930918085428479, 4.566024372014148, 2.523532194392884], [2.323815612337169, 0.0, 1.2319627361005994, 0.19881520196797334, 2.287817731301112, 0.36092891928607307, 0.0, 4.195771723561972, 0.0, 2.6376694826902587, 0.6427766908155663, 5.052065493990127, 3.532765086579014], [2.23234827933634, 0.9016904376069858, 3.4455681606626802, 0.251351416957578, 1.9705460730282007, 0.43217758368073456, 4.511256472277934, 3.257286717978129], [1.5046713638556017, 0.09334322311629563, 0.0, 1.6611042153444469, 0.0, 0.0, 2.3649385841828012, 0.09264035117301664, 0.0, 4.590995400940461, 4.297847837660855, 0.6519853584780064, 4.636181520349211, 4.281677193443048, 0.6931261443712098, 4.791678804707204, 3.9155741829458557], [1.8484155181734228, 0.0, 0.6859829502468571, 0.28360993195529804, 3.4730315097270124, 0.8152157568131689, 4.719408893754714, 1.9112536614728979, 5.096707507663255, 1.9381631903283467, 4.864791178333713, 0.0, 6.207519778864528, 4.316029610091076], [1.5847223142119797, 0.2886662428343043, 1.6151889090319764, 0.47517265485668236, 0.0, 1.2704206921012737, 0.6930617394398741, 0.0, 4.039994221827691, 0.6902128580594703, 0.0, 4.131976967227485, 0.30991884779276335, 0.0, 4.166607870327415, 0.5599005560828948, 0.0, 4.812506939037466, 2.0526326196213542], [1.138298112952911, 0.6811685699678962, 0.0, 0.815943868235498, 0.0, 0.4254072064256498, 0.0, 2.0183107933042455, 0.4445184731061285, 0.0, 3.4125711154021032, 0.318761320190469, 0.0, 0.0, 4.480178384234116, 3.0455099938090524, 0.5566064987315904, 5.483983645759919, 3.0136415054339647, 0.6741316107273492, 5.739346185522361, 2.9180891756716822, 0.6851181640886018, 5.932485369983794, 2.9438669903491714, 0.6877528651930738, 5.980145535604, 3.017536003362097, 0.6928794564371922, 5.982626687958438, 3.010476118213339], [1.1097122012752594, 0.0, 0.2557483307179511, 0.0, 0.43168476670346845, 0.0, 0.21694463128868366, 0.22926705732011565, 0.0, 3.5267611788332487, 0.0, 4.494181082826897, 0.0, 5.027326527004856, 0.0, 5.281134777475818, 0.0, 5.423015608275786, 0.0, 5.521475616670497, 2.3268169668328027, 6.0273182400517005, 0.17354193910118665], [1.641833152045339, 0.5240912508782827, 2.72684775202997, 0.8104318961808783, 3.256937703802225, 1.0104511004886332, 4.485004822814523, 0.27841164882095576, 5.728089761376434, 0.0, 5.446617792993251, 0.4729196309603455, 5.849830106994437, 0.0, 5.168491189747913, 0.0, 5.554535399371301, 0.5139715841461772, 3.7869145975941483, 0.5689866339895808, 6.435033834510918, 0.5098082517535171, 1.0768293556791153, 6.280097400607689, 0.902199951724362, 6.9199786752976875, 0.9727502802584874, 6.95376449704507, 1.0066778019449223, 7.047305902155376, 1.0086589217828281, 7.064785726924994], [0.09957785674683793, 0.14155138152901417, 0.0, 1.4831750835535475, 0.0, 0.0, 3.561454524458985, 0.3162585804294278, 5.145298645760364, 3.6197952196075454, 0.6835984563608308, 4.351745658868792, 3.8360794248598387, 0.6918821735505796, 4.205315670277396, 3.9317104207511626, 0.6921436719805476, 4.125433007497572, 4.005302875238384, 0.6892668279752112, 3.9876922723130335, 4.108403347564154, 0.6863443345844483, 3.803151522704256, 4.1918238367132075, 0.6899516301597121, 3.5591318148127917, 4.327166502193713], [1.0634418632731188, 0.753300245220982, 0.0, 2.9067439355679143, 0.0, 0.0, 4.252525319704504, 2.323574642538975, 0.0, 5.025747187615997, 3.3494922591746987, 0.0, 5.219149999631747, 4.515349441690701, 0.0, 5.5264290570008905, 4.834634978876989, 0.0, 5.4916959536801855, 5.0528618865743535, 0.0, 5.589285011465242, 5.266154571687826, 0.0, 5.647390152321011, 5.445705685452349, 0.0, 5.779902310250854, 5.744078429573866, 0.0, 5.821283793699998, 5.773760392107612, 0.0, 5.886875784353215, 5.798799787761368, 0.0, 5.879182992599003, 3.0242556424500164, 0.7462954323034202, 6.102010613544311, 6.399984138323074, 1.592016245392386, 6.148499074432583, 6.4050573559244155, 1.535979615655591, 6.305775951189762, 6.373057884195684, 1.3565360020316564, 6.332298992566668, 3.756273778986086], [1.1007387509073085, 0.4341684486612557, 0.0, 0.8372874333630854, 0.0, 0.0, 0.6999618219264833, 0.8117608123648281, 0.0, 3.1315399984252847, 0.0, 0.0, 0.0, 3.3219147379891982, 0.6150402454958634, 0.0, 3.096274703742971, 1.013889317746355, 0.0, 3.4428988471886015, 0.0, 1.0627886416676229, 0.0, 4.177350475014245, 0.0, 1.147939703805796, 0.0, 4.391120649319607, 1.4019276023348708], [1.2967104089611916, 0.0, 0.0, 0.9776553623364341, 0.8560262927015972, 0.0, 2.4211365335006203, 0.0, 0.6239316325289075, 0.0, 3.1802690717576305, 0.0, 4.2296527642530215, 3.3154064296963393], [1.7043496059836039, 0.0, 0.8952079872069016, 0.0, 0.2839785798347866, 2.8736962894677376, 0.0, 5.32497835451462, 4.444123434662423, 0.0, 6.4920099760585375, 1.5393835887226728, 0.0, 6.334566321824958, 4.137730846850768, 0.0, 5.877498021374995, 0.0, 4.358728180527109, 0.42612426523151925, 5.877053375349957, 0.5798042984555067, 6.922667614718348, 1.8225686360008329, 0.679508096225582, 6.837397089163675, 1.258006519533027, 0.6926424748999198, 6.889626831920221, 1.0661157862592998], [1.3842267977728884, 0.0, 0.692204578964863, 1.3345624972719645, 0.0, 1.0035714182553925, 0.0, 2.640830548301387, 0.7099298270116567, 0.0, 1.3967581904844932, 0.7000364836945292, 0.0, 3.1708535132450524, 1.0985237166627613, 0.0, 3.3582752782550616, 1.4408958068771152, 0.0, 3.3737583446044326, 0.0, 0.0, 4.733486960067408, 2.373464046490136, 0.0, 3.9832155708242905, 2.806729935943034, 1.8198130197614801, 4.139104918289589, 2.78211595511871, 3.557182891108356, 4.142144910666347, 2.661068486596563], [1.1345578464561152, 0.30645435107397667, 0.0, 2.1131265276534372, 0.0, 0.3983565155749714, 2.7687703242285684, 0.5209867590082583, 0.0, 2.4637930557222734, 0.5128857175996088, 0.0, 3.6742954444442506, 0.0, 3.2637327415752297, 2.1282625644049196, 0.0, 4.04909962772243, 0.0, 0.0, 4.851605213836203, 0.36409059756324574, 2.7666115623714562, 0.4156737746259428, 5.430088975578344, 0.4036617522425562, 5.156365390424819, 0.5738429539880295, 5.67662609503139, 1.240183447442206, 0.6692360747731851, 5.128516930791236, 1.0892686890205705, 0.6917295160722716, 5.039355768782678, 1.0456443733831358], [1.6032397897993467, 1.2990718441246298, 0.48224121724850605, 0.0, 3.0251432585194835, 0.0, 1.4204057647796313, 0.45059200579181313, 4.41913980983102, 1.6687878231696158], [1.5038457403002126, 0.7054575673115296, 0.0, 1.3963363140086567, 0.6658102210897815, 0.5156128884206534, 2.675301846016587, 0.5725100077189912, 2.808090579127309, 0.4960283630301015, 4.313099978444837, 2.1689685812631403, 0.0, 4.530652269132283, 2.471951704426941, 0.23435174111562218, 4.741471484005294, 2.547842084533579, 0.48105500944077906, 4.857380840103952, 0.18086732636946898, 4.972589685359497, 2.378164095711669, 0.0, 5.136509435762146, 3.3556568064475236, 0.0, 5.149672307238995, 3.372903345430377, 1.1644106400099659], [2.9395134839566275, 0.20232985563995665, 0.0, 3.931776291084951, 0.9504850615693512, 0.0, 0.7425023017825466, 0.0, 5.242736166014174, 2.78304745887252, 0.5450871990565271, 5.2720643984150275, 1.4143458173225942, 0.6665969497082883, 5.27963573563943, 0.10731201747477856, 0.682736383059005, 5.484945510425788, 0.10427881826117366, 0.6909568979240124, 5.617063472639633, 0.17213808972729694, 0.691227256903644, 5.714717005644099, 2.1368748003114355], [2.4800792397656153, 0.6547566760110937, 0.0, 3.715061357554194, 0.07125366982517217, 0.34647754974668665, 0.2328314008015443, 5.215354638702246, 1.6708804440599194, 5.56683809709012, 1.677346472974387, 5.414545258250328, 1.3629412563203425, 4.146487380753992, 0.8350644758851122, 2.6244727525025957, 0.6507046346927683, 1.5852971528740634, 0.6795395556985673, 0.9259071834643041, 0.6909158485577833, 0.7854497664682932, 0.6930822455871051, 0.6855711714404256], [1.644705918339938, 0.6770203130317631, 0.0, 1.0482487848698345, 0.0, 0.22574624027371576, 2.987732535240272, 0.0, 1.4056973812233344, 3.6027964537651576, 1.1090959700781922, 0.0, 4.7897189863283725, 0.0, 3.1556757950701773, 0.673877050144548, 4.72784904365792, 3.4664181889063244], [1.683629884514184, 0.5556928352975339, 0.0, 3.593326816604435, 0.5369682470350928, 2.45752128188613, 0.16590836641696666, 0.0, 5.833249443312343, 4.116399941758517, 0.7013763010969604, 6.315636731602528, 2.6556404692361957], [2.446897157079226, 1.2318736621918913, 0.0, 2.608457063582257, 0.3020973701357778, 0.17858252885088458, 3.7027992814449675, 3.60487169033153, 3.530027530166708, 0.6238798561438558, 4.3141210107198775, 3.5409641415315907, 3.3010899641943294, 0.7937593814154777, 4.489482113366698, 3.6739009247880268, 3.373715255543724, 0.7512518551732981, 4.711945934567861, 3.829380177335728, 3.268207969151365, 0.6911369546668381, 4.779556945022039, 3.980692525222779, 3.608364704571632, 0.6927545085239821, 4.85940742194803, 4.134747794907972, 3.817220128426804], [1.7147213054923665, 0.8719715897503706, 0.49491442535553776, 0.0, 2.2161699488357502, 0.0, 0.0, 0.6514484057346557, 0.0, 2.950651166043229, 2.5817987050467304, 0.9363402424609126, 3.7854692921171886, 2.558245892742318], [2.5991276748476992, 0.0, 0.0, 1.9411101884069657, 0.4042743038763512, 0.0, 3.5094992282956894, 1.5388867059769298, 0.9770836918650901, 0.5148182485787944, 4.621845342081986, 2.515178695893148], [1.0892861398503317, 0.3492810563978247, 0.24507325675317665, 0.0, 0.0, 3.3871167793019015, 2.1166873856049033, 3.5900384137371733, 1.6606603634675152], [2.8999832150862166, 0.0, 2.9548587885675173, 0.693007523241696, 0.30179111789228935, 4.237733653885224, 0.0, 4.042823351946072, 0.0, 0.0, 3.8706944906890737, 0.8120718831716103, 3.4141386492881236, 0.0, 2.96249094441802, 0.0, 3.5292620174932825, 0.16232725240527202, 3.476930339381133, 0.17614945310637736, 3.7032940605905615, 0.0, 4.001235815134487, 0.4222537889819299, 3.3255223773449836, 0.0, 4.190069939194524, 0.0, 5.026136976201338, 0.0, 5.615242454223395, 0.0, 6.033880055643613, 0.0, 6.046656238369812, 0.0, 5.98071322750192, 0.0, 6.038919651579026, 0.0, 6.1604020316225085, 0.0, 6.130156129748612, 0.0, 6.103281453837142, 0.0, 6.211337573833994, 0.0, 6.269460865444156, 0.0, 6.181074791166492, 0.0, 6.133356338411601, 0.0, 6.234663327516897, 0.0, 6.300886364758344, 0.0, 6.2963576419291885, 0.0], [0.594131510425254, 0.0, 0.0, 0.5461871210598643, 0.0, 0.0, 2.5743641604178715, 0.0, 0.0, 0.0, 4.720052686318338, 2.1316071033816746, 0.0, 0.0, 4.97851448335223, 2.2468729162501266, 2.514684326482245, 0.1700387865074005, 5.159544160137718, 4.037026898930127, 2.959928844875744], [1.9905997369953359, 0.0, 0.0, 1.0870799003734735, 0.5834949298284889, 0.0, 2.2180087544705973, 0.0, 0.6626272503462418, 0.0, 2.9458437840219016, 1.5774113245103976, 0.6356376742856583, 3.4853704773107403, 1.925490112396639, 0.6926472006199111, 3.429623145041133, 1.9810275412562912], [1.3747041355529015, 0.0, 0.5178875357063918, 0.0, 1.451933399260403, 0.2146396949422943, 0.0, 1.0105951496063703, 2.29341946763126, 0.0, 2.6240739385649627, 1.1605465222196782, 0.5713516394882696, 1.8296982550890482, 0.0, 3.972613224448864, 0.23710940622430282, 0.0, 5.2488222194336025, 1.7921672273432692, 0.690148870590063, 5.325753273306034, 2.3494958624057176, 0.6931214683875666, 5.766312670178625, 2.3894186332887677], [2.1913351864431725, 0.0, 1.4230938913311364, 0.7686583457053978, 0.0, 4.440182758168728, 2.3330273562564603, 1.3386610290389336, 0.588392110355897, 5.226005471536335, 2.3603044658235928], [2.307150209157407, 0.6081356468830134, 2.0595127317632995, 0.0, 2.6807909409089676, 0.5842919418201574, 0.0, 2.9098688158295474, 1.1223462997735516, 0.0, 3.263505514393119, 0.9325965694749888, 0.6314268008948125, 0.0, 5.1419988524037645, 3.633842252962684, 1.1942020672298328, 5.557647721768955, 3.5809530492906374, 1.0992456497371044, 5.738559102175959, 3.4165399205073053, 0.8794584021907271, 5.870338384826576, 3.26667978186695, 0.8440438159013821, 5.937040332038614, 3.01938712325964, 0.7949650396235635, 5.905666697322018, 2.609670456557063, 0.6931395362922186, 5.847891276485596, 2.3011509498885205], [1.7577093293812467, 0.3370111034914157, 1.9193897220109775, 0.49136569570311356, 0.6475084233389188, 0.6843026938020693, 0.0, 2.726677008261034, 0.0, 3.1137290392215085, 1.312480708662542, 3.253897215147502, 0.0, 3.2802267679007504, 0.0, 3.8233360030939805, 0.0, 0.3241669642684641, 4.696925059779637, 0.5335898436751689, 0.30759819400639926, 4.859455269470086, 1.9483388854977126, 2.3877456017816874], [0.8506914489691434, 0.40055687671709234, 0.0, 3.7219165484375742, 2.7558225629177038, 0.2639153714761789, 4.752320713710739, 3.555404381105898, 0.6895170811152544, 5.038567107413174, 3.7993022970608186, 0.692711372030646, 5.13173836207653, 3.9083699518211645], [1.376044468581457, 0.6924191456302592, 0.7171756506869824, 1.0497322725213092, 0.0, 2.370837239403469, 0.8706752585992957, 0.7943238653064224, 0.0, 2.8440915262625452, 0.2402370202439902, 2.663055369079653, 0.3690567392781513, 3.18449795238447, 0.0, 0.1617808741615267, 5.125355623166417, 1.289373911871321, 5.25234952578669, 3.7611744434480796, 1.4614092779933643, 5.556069844522713, 3.8329828589385238, 1.5610819968919873, 5.518674888990282, 3.661470759273067], [2.203979310241062, 0.8968257187526336, 0.0, 2.1829664030014166, 0.9087411071422655, 1.1016464522099758, 2.67947995734035, 0.27568622578633273, 2.2698223258283807, 0.0, 2.9756147171739453, 1.0074261776459867, 0.0, 4.468163208352108, 1.4505291581805067, 4.4261670783761895, 0.6710533367373394, 0.0, 4.142541745728162, 0.7149990123938853, 0.0, 3.777625091170336, 1.6349383960356614, 3.2708518468600145, 0.7167756265752642, 0.0, 3.526572930056795, 0.783809671198231, 0.0, 3.5984565491089504, 0.8217955851595394, 0.0, 3.494510897962723, 0.8048201512554375, 0.0, 3.324042092192739, 0.7665368483092243, 0.0, 3.22642525801846, 0.6946056807481401, 0.0, 3.4458840660958137, 0.7321997995873247, 0.0, 3.2604488056901104, 0.0, 3.401911908753464, 0.0, 3.505105852428793, 0.7986033502236204, 0.0, 3.411129919374738, 0.7545088305973046, 0.0, 3.55539587761763, 0.7189870243130879, 0.0, 3.4996106989317357, 0.7013629168843021, 0.0], [1.931348151123578, 0.0, 0.0, 2.2184721322512195, 0.0, 1.8514665784717454, 1.7790882734294244, 0.950492694862386, 3.696523076128682, 0.0, 1.012124737092104, 0.0, 4.611676015451664, 2.336159060277728, 1.126579871396128, 4.831062631845576, 2.0063148337709973], [2.556420893581781, 0.6848137802342762, 1.0571797908304414, 0.0, 4.681993320927813, 4.104229360798385, 3.493133767332472, 2.70415353938476, 0.6878666349038387, 5.4405537294360204, 4.908869887816064], [0.928822075056908, 0.43265005078878804, 0.7304420437816164, 1.7083216679050206, 0.786135451405452, 0.0, 2.233560852279548, 0.0, 0.0, 4.442526108803861, 0.3114325422702363, 0.0, 0.28306794073263136, 4.332911286192745, 0.0836076541075641, 0.26398495964786545, 5.032135285365161, 1.531338735904774, 0.0, 0.695720831464594, 4.7449140190166705, 1.6862530999818313, 1.1986636456073365, 4.714104738712009, 1.3028834609949111, 1.5657269554092277, 4.983727006708942, 1.2773636219034314, 2.440550110948751, 0.6862133583060499, 5.474714637173333, 1.8759834344875288, 0.7091869292456976, 0.6889893825876595, 5.416358546533475, 1.8092006630057471, 1.0403572376308445, 0.69230651135823, 5.358188720237986, 1.5640133261141738, 1.0925768417490835], [1.494802608605769, 0.3551067182327479, 0.523420687470751, 1.258576721878804, 0.5445807100635076, 1.123302053038877, 0.28241197823379116, 3.4362079223814854, 0.8179905157254435, 0.0, 4.739320612731144, 1.1434427997753502, 0.0, 5.1980169816808575, 0.6898740420794595, 5.59313385111908, 0.18940241103835045, 6.0073629061924505, 0.2219256217647109, 6.004767985347422, 0.15486881274289493, 6.039663766641945, 0.14834888297605087, 6.089471448052795, 0.6348136573566713, 6.226479480327981, 1.2500228872867865, 1.3772443635219345, 0.6905292997702416, 6.093748372318956, 1.0100873299507205, 1.083207578969741], [1.2307686833665514, 0.48553659390225323, 1.1127311134418663, 2.0119654538913556, 0.4636958686302275, 1.7785453476658708, 0.615629374488874, 2.2850013871697867, 0.9569691087209153, 2.9624523600492023, 0.4647448811994853, 2.641808848882804, 1.797209307216397, 3.4313499322458], [0.8747184899734417, 0.0, 0.0, 2.3840902678083964, 0.46705648262355304, 0.0, 2.7050368614086016, 0.0, 0.8507546539738964, 0.21979283106034228, 3.6523877984428137, 0.4318078193695659, 0.0, 4.484590261191416, 0.3892101217302594, 0.0, 0.554603623880642, 1.2696389698808517, 4.589664266549378, 1.009285168188142], [2.340966387728586, 1.411689476950905, 0.12138698087920621, 2.305798059758012, 0.0, 2.841671522738206, 0.0, 4.722689851324259, 0.16794210650189142, 4.648286066585319, 0.4335179155891298, 4.493665432568134, 0.5234297099736028, 3.9229194532262834, 0.5375626257538622, 3.3418548541949544, 0.5590730483186437, 2.8538686520600116, 0.5963525719725653, 2.3528711707775423, 0.6343047270760747, 1.999892902866162, 0.6553118765853518, 1.730270009641039, 0.6765553962510991, 1.236610459734949, 0.6890908331991321, 0.8904643227952542, 0.6930095355304394, 0.7036296755532256], [0.37452389105844175, 0.560241479957282, 0.0, 2.682528164621463, 0.9892658336682715, 0.0, 3.8329702580323293, 0.6168498683372117, 0.0, 5.268002678423834, 1.563330159671287, 0.0, 5.376491129032509, 3.576392216711978], [1.2314791412959312, 0.6858601863599391, 0.5088788595857314, 0.12983586551190465, 0.23518129053150258, 0.0, 1.2892626978257982, 1.1986342886362893, 3.4354538859192836, 0.6312455670284917, 0.0, 4.573861484925797, 0.5271091293630444, 0.6649892436606208, 5.232782664316424, 0.7201179302713798], [0.6427330304799374, 0.9075735750612945, 0.0, 2.638995360068151, 0.5938434914434219, 0.5229188667486422, 0.0, 3.697440374201448, 0.0, 0.4303820735251051, 4.794220257702357, 1.6785162886232448, 5.205204728300526, 0.8710626229049288, 2.3023054159439713, 0.7959759596792707, 5.543116472310285, 0.8780458031486417, 2.6009673728176974, 1.2581021002688355, 5.583592798988089, 0.9726460053580673, 2.519519752628918, 1.4734340953666667, 5.608612102638345, 2.762486807467109, 4.598584172167403, 0.67320046912057, 5.7465749273804905, 2.028796442205934, 3.565303065357443, 0.6652004660212205, 5.726204848886233, 1.7251215466501268, 3.493838229490643, 0.6634145878974284, 5.719909884151546, 1.3989154439050808, 3.471788360687054, 0.6484701716025632, 5.708704913973621, 1.2448150715854702, 3.5511020419066974, 0.6263221929761552, 5.724388763918713, 1.2325221103937096, 3.604859910652623, 0.6101906950365021, 5.783408955215375, 1.199654689726724], [2.0832749681971583, 0.6502741952366093, 0.0, 2.834293565068352, 0.0, 0.0, 2.56490296862292, 1.4156019602807821, 1.2424205220797302, 0.21687706327358258, 0.0, 3.1291847621925535, 0.6029021838308728, 0.0, 3.2772923346581946, 2.014080006664953, 0.0, 3.6655828928392733, 0.41530792730715055, 0.7551692835330228, 0.6759066014061801, 3.7504389061935557, 0.491661793195305, 0.7810214833747317, 0.6857418787386337, 3.771572366531622, 2.3620856479062873, 0.6918376942740373, 3.749967472702005, 2.621298971983308], [0.7666155019605315, 0.8177936129009167, 0.0, 1.8213002809793641, 0.0, 0.7802237967082265, 4.575600428199662, 0.0, 3.5177105494513685, 0.0, 0.20117174458589726, 1.821494419336495, 0.0, 3.0928422273266736, 0.0, 3.6443966653167577, 0.0, 3.5049594324233886, 0.0, 2.866205855059045, 0.0, 3.2628976991704493, 0.0, 3.5135800577805627, 0.0, 3.722411333446158, 0.0, 3.8841645353438294, 0.0, 4.078335700061522, 0.0, 4.225647981653835, 0.0943492903213769, 4.3737047678725505, 0.25049339894701766, 4.464351358881647, 0.325089865003807, 4.505403524822901, 0.20479339087970977, 2.8258585588166456, 0.6686930973948817, 4.985518495431147, 4.072039212543823, 3.2631122848077387, 0.6931136578664645, 5.664770322989966, 3.698935863505811, 3.0466499256373933], [2.5862787246943038, 1.2064727395792567, 2.629859232065516, 0.0, 3.3343105441768817, 0.2115115473245303, 0.0, 3.450955590832049, 0.0, 4.415012265724677, 0.7150994609104456, 3.918311143754171, 0.0, 4.275856524184929, 0.0, 4.606431752398103, 0.0, 4.830965363764258, 0.0, 4.921655651253125, 0.0, 4.97100768575399, 4.35772866174021, 0.5752107791861161, 5.227270712078327, 3.0198540718512477, 0.6722770825403763, 5.128420232935243, 2.9411402805642024, 0.6929096992694556, 5.084011198822534, 1.2818163385056311, 2.254817193662968], [1.2437861645931925, 0.0, 0.0, 0.0, 3.759247794633171, 0.0, 0.2990684767774041, 6.1004660916250595, 1.38318200559942, 0.693137706259348, 6.058386911590305, 5.154475849370857, 2.472973804917676], [1.716845969203948, 1.4967880165964726, 0.0, 2.325100623061378, 0.48680066081404383, 0.0, 1.8756912298196309, 1.7381451308737814, 0.0, 3.4365501250009816, 1.9557636537137966, 0.0, 4.741521627307397, 3.068285337946888], [2.948721838740852, 0.0, 1.489653447138839, 0.0, 1.4698696350545508, 0.0, 1.9588028349328395, 0.0, 0.0, 2.0957809612445883, 0.29364655086826896, 0.0, 3.5568687515256605, 0.0, 2.7660226833804726, 0.0, 4.26795805193283, 0.0, 3.9701567667816895, 0.0, 3.904337238953295, 0.0, 4.314016786857381, 0.0, 4.424943014074201, 0.2830743536399374, 4.449061779076454, 0.46443678322710247, 4.564863921009801, 0.6491727477613585, 4.714814536895401, 0.6929889659910944, 4.780196465137896, 0.7647650432404094, 0.10636447883172409, 4.704320129192256, 0.7303631665950931, 0.15539229598861742, 4.878026471016399, 0.80485715471127, 0.28064260783866013, 4.936100518075444, 0.8279538656844792, 0.6462299477087147, 4.872322300043892, 0.8315527974535811, 5.046717888496237, 0.8536968559654307, 5.108431624396492, 0.8732625351698922, 5.0547783808325395, 0.9249225963765719, 0.8194183461261845, 5.040152089703022, 0.6807393957733197, 5.117897955996834, 0.5845305400382665, 5.069200800109034, 0.5241888844172656, 5.051289563897657], [1.919481067231424, 0.6329075147405319, 0.0, 1.1131039140344174, 1.0425893006860956, 0.0, 1.8958174141436517, 0.0, 0.0, 3.4060060928852516, 0.0, 0.0, 4.202597888581725, 0.0, 0.0, 5.20564244869701, 0.1968261754702297, 0.6859158348250851, 4.25559909759373, 0.9224369150041428, 0.6816877984641512, 3.956874386264532, 0.971954486921815, 0.6710585851302817, 3.715325231472992, 1.016030492484767, 0.6732451580435547, 3.616433244700245, 1.0540503844424192, 0.6869339625306625, 3.657268114475525, 1.2600813168258842, 0.6930772296080154, 3.7359056138534736, 1.2022483795195182], [1.098199587136519, 0.0, 0.42285532126310926, 0.2776880966887785, 0.469234552810215, 0.0, 2.938536689185335, 0.0, 3.8846639413221484, 0.0, 2.2214057913216707, 0.5010432573790664, 4.26863254313526, 0.6316805673281516, 6.278380159617202, 3.1061182174801654, 1.0542202922065573], [1.6453752431525077, 0.0, 2.841192895864943, 0.5571841108053546, 0.0, 3.3020043400800327, 0.024109408507954545, 0.0, 3.44694085050373, 0.5986903200022328, 2.2583138762450097, 0.0, 3.778783094404497, 0.5046798327854591, 0.0, 3.3275509508293446, 0.7336541908313943, 0.0, 3.319534109350798, 0.9495818194293978, 0.0, 3.372972028438586, 0.808925276043054, 0.0, 3.372263511523698, 0.9306722275120092, 0.0, 3.3473706079985557, 0.7037648903465812, 0.0, 3.347493871971365, 0.6314652514025256, 0.0, 3.358101329497014, 0.6734570652220094, 0.8310404799002923, 3.3106847033622033, 0.6341441108378683, 1.5213964793864188, 3.3815552865596428, 0.7458488324097345, 2.6165634425686024, 3.387370755751021, 0.8599342413462636, 2.3536434505659236, 3.404807165528609, 0.7766209151778338, 2.014061157705659, 3.436280538640364, 0.8712117253416374, 2.1776551184388935, 3.4721725073363485, 0.9715962125013764, 2.437381455782531, 3.5416125005607437, 1.112821487878349, 2.685171819373642, 3.5679514862600996, 0.9821019209673323, 2.434980316228341], [1.9612567913213654, 0.9800676381123123, 0.0, 2.5686063286524545, 1.4106457116244702, 0.0, 3.197565813172099, 1.7828060426122463, 0.675947458701086, 4.839602726501074, 3.80515325613752, 2.7728698231448816], [1.3072293309644563, 0.8651247402619062, 0.0, 2.8276205009608875, 0.6485258187178609, 0.0, 3.301087094867754, 0.0, 0.6187827554149685, 4.90315805263464, 0.0], [1.659675424151288, 0.9219605919445866, 0.0, 2.751309815119618, 0.43090551977841945, 3.6580658004030937, 0.0, 4.384244532288904, 1.067108949982928, 0.0, 5.19225556961197, 0.8780840214300901, 0.0, 5.301874241372046, 0.980474116738355, 0.0, 5.341245937247497, 0.9710172637057908, 0.0, 5.41391285083667, 0.7537193041356968], [0.6412634266874528, 0.0, 0.0, 1.601443966119752, 0.2969366337767393, 0.0, 0.0, 4.4140588301869865, 0.1115214631944734, 0.0, 4.8876868593780864, 2.738054036795161], [1.643619001050378, 0.0, 0.3836115440051364, 1.226916166853934, 0.6719775719195263, 0.0, 2.627601157639302, 0.4337512828845175, 0.6769587621269297, 3.086775597765154, 0.3379123720097422], [1.2645167190020281, 0.0, 1.5451496338505968, 0.0, 2.3452502024876924, 0.0, 3.1474796789003556, 0.0, 3.7359954787420695, 0.0, 3.7914207519919767, 0.6273978044824111, 4.010082431514898, 0.0, 4.047625471319101, 0.674352339789313, 4.448168104628661, 0.0, 4.656242077014892, 0.6226520789850907, 0.0, 4.5822685728463775, 0.0, 4.724544423391056, 1.1510862695117745, 0.3115335762334861, 0.6092295227350663, 5.12338824821142, 2.116728702319402, 0.6033792196809055, 5.165104686515695, 0.0], [1.826182254577244, 0.0, 0.530286881414938, 0.0, 1.9881348258035176, 0.0, 0.0, 3.2501462652864896, 0.0, 0.0, 0.0, 3.8495579387900616, 0.0, 0.34222604912335364, 0.170211766812873, 5.048533842711725, 3.727188822481955], [1.6313052246352828, 0.0, 0.0, 1.3091022879687917, 0.14643047452469368, 0.0, 2.7047837580200245, 0.07311104027714349, 0.0, 2.152569451704741, 0.670406458935157, 0.0, 3.7170914460578106, 0.0, 2.332747766687744, 0.0, 4.223263862683011, 0.0, 4.7967536310190155, 0.29356849870402235, 5.830401981825621, 2.809063563480643, 0.6896249320343779, 5.76157255805562, 2.3297358846914293, 0.6931313832762228, 5.940214118055248, 2.2361186807471367], [0.11792699320007047, 0.0, 0.0, 2.100624586091415, 0.0, 0.0, 2.674159197171191, 0.0, 0.0, 3.0673060770581, 0.0, 1.2195520658323458, 0.0, 3.3886654098161695, 0.0, 1.7638465902257694, 0.0, 4.993745652908413, 3.4663170513857797], [1.979264695904771, 0.0, 2.278641379183358, 0.0, 1.2705939326262075, 0.0, 4.368361999129447, 3.6174729042680966, 0.5303745176415657, 4.851693787838453, 2.760633541406655], [2.179423619999522, 0.0, 0.9166675993908596, 0.0, 0.8772696068367729, 0.0, 5.152389581369306, 2.8073389989753257], [2.7563656508864183, 0.5209036054829767, 0.5077984790842737, 0.3435371771621759, 2.4743009686296324, 0.454418273427472, 3.2034814544015946, 0.0, 0.6465651667606639, 0.0, 3.790843403100664, 0.7519079682674557, 1.3006448699373325, 4.113380188189769, 0.0, 1.1802282032088756, 0.0, 4.892453302870983, 0.9210292835992704, 0.27283364415174505, 5.197557553322119, 0.0, 2.557454010828541, 0.0, 5.1710003698025035, 1.2560423000902263, 1.8432751727475287], [0.8189970241607325, 0.6467322043344894, 0.0, 1.3842288841481671, 0.7742735724705483, 0.6958419488393228, 2.178634621571805, 0.21140283568491947, 2.511276457290308, 0.27010046325769754, 0.0, 3.570330595599201, 0.254490841015108, 0.3889266407003002, 3.667145907222875, 0.0, 0.47090074661700265, 3.5101432371885504, 0.848267963528814, 0.34210951428690295, 0.0, 0.0, 2.4773277361448516, 1.1813137536855354, 0.6373638678383596, 3.388580848856312, 1.4363425684460662, 1.251448742267969, 0.0, 3.549182409096432, 1.4616673533598386, 1.0906673534008928, 0.0, 3.783393996947999, 1.4232292419688497, 1.6207255627284072, 3.609060530579465, 1.4346897087758304, 1.2614056183163334, 3.672732025927993, 1.4517177563782107, 1.2290231889191887, 3.7686833863176066, 1.7036708364817597, 1.2683729608162968, 3.928463088030915, 1.92385495120374, 1.2040681783213523, 3.9832249447321413, 2.013511288605966, 1.01238104055973, 3.9302369689839, 2.13368216871647, 0.9128176445779072, 3.998822135213397, 2.2646139422165237, 0.8973352571881557, 3.96241754375077, 2.2889004782476947, 0.7684394197175565], [1.8524458219305233, 0.0, 0.0, 4.021718879353157, 0.6092587495567446, 3.988113291181272, 0.9064103783766086, 0.0, 5.24625019465136, 2.89815345867018, 0.6854405356637734, 6.004670213688072, 2.551324696116978, 4.873308218390516, 2.657204906163536], [0.15700472115276853, 0.0, 0.0, 0.36851776497131655, 0.0, 0.0, 3.887676281097532, 1.4874137260001437, 0.0, 3.677710173346995, 2.58823077050475, 0.0, 3.6431176134919383, 2.8212695959439187, 0.0, 3.7468722564348687, 2.8832365216146605, 0.0, 3.7658789940938604, 2.63130663533852, 0.0, 3.8544901511889162, 1.4334310664928163, 0.45864168757061874, 4.582234091189483, 3.097455365652216, 0.0, 4.467950582162573, 3.214959191361833, 0.0, 4.363838619957474, 3.2298757615275626, 0.10438205655795187, 4.371859400524689, 3.087434784342415, 0.18866223162033421, 4.524294819633374, 3.0865998657367926, 0.24247603552981645, 4.656830969115015, 3.0755142396278266, 0.22427458619881036, 4.815792696281718, 0.7620595297503499, 0.6919126289758023, 4.735057058314609, 0.7436855637254388], [1.2910704177508319, 0.40466458080791934, 0.0, 2.5656715770346477, 0.0, 0.0, 3.0206136389504286, 1.579470687288179, 0.0, 2.9363573067577233, 2.1654271370235865, 0.0, 2.904842227349328, 2.3739941179326056, 0.0, 2.8343564416945703, 2.2248254073862945, 0.09243325483100431, 2.755310378252029, 2.172677071088016, 0.1091323177002152, 2.7821112369563124, 2.1974520318170234, 0.27979126081647626, 2.9203075487203565, 2.281518286187289, 0.8955720034569685, 2.911626020839495, 2.244737772624898, 1.1895546090493063, 2.685977476565256, 2.317929023570566, 1.1352620573437566, 2.6150162381652837, 2.4393880665429273], [2.0931178270666093, 0.6793494346390645, 0.0, 3.1664571488863733, 0.14089802107386157, 1.213164978107297, 4.336816264594427, 1.4104746239696389, 2.344113750104434, 0.4330552939114487, 0.515570871815004, 5.184021803026922, 3.710641315215234, 5.843808759176983, 3.9158067021500247, 0.6533033309689555, 5.742645973044757, 4.03247504283441, 0.6727343128788372, 5.780495872158115, 4.048505446441771, 0.6811243285366357, 5.806395111446025, 4.082917590782193, 0.6815707336412866, 5.840339530009253, 4.065040031025727, 0.6848435697535737, 5.723968399399549, 4.075908205293173, 0.6893692197670631, 5.864369959730676, 4.066104772291074, 0.6930608861726142, 5.884266003556779, 4.034928137138496], [1.5553779742479303, 0.0, 0.0, 0.9388183759872955, 0.0, 0.7500847674897291, 0.0, 2.2063157142842735, 0.0, 0.0, 3.7838622867634055, 0.20685549453678437, 0.6431984489721158, 4.500280804106461, 4.076595112921575, 3.0669386653535526], [1.438822954700359, 0.8187667026000319, 0.0, 2.0279897052516698, 0.6297178765487486, 2.563227001531236, 1.2868179470542, 2.776624742312565, 2.390706673490593, 3.3237699043826727, 2.6600653625910904, 3.6794743766643845, 2.6536948795861233, 3.8385285927850767, 2.565228514006034, 3.97818509831326, 2.4858360606756005, 4.094988755246224, 2.4462356002827708, 3.951380669784918, 2.40683651019597, 3.6803530798577366, 0.0, 4.406576105958987, 3.3977959360337677, 0.0, 3.825699001475662, 3.598020826323596, 0.0, 3.709653800571764, 3.664973189458159, 0.0, 3.844042088950282, 3.6352106730911014, 0.7302325546860273, 3.9197350633959815, 3.7727716766395094, 1.6861486213146044, 4.182378734807627, 3.8719325962741022, 0.0, 4.307452419621939, 3.78804044286385, 0.0, 4.439977807924943, 3.781998689820602, 0.0, 4.375161911529768, 3.8269130014025032, 1.975154586385172, 4.354843981953807, 3.7970488770607833, 2.26326169425348, 4.450093132668664, 3.778402325295212, 1.9403576705463352, 4.475278066472976, 3.7071841529114913, 2.1023767269122584, 4.224905888410697], [0.7988191575943276, 0.0, 0.0, 1.4773561412834741, 0.0, 1.11983601228194, 0.0, 3.102430186586388, 1.125927426008286, 0.27909707877821516, 0.0, 3.7021866310647766, 2.4583193556906617, 1.472903989404554, 0.0, 3.7956637753637135, 1.3100836895004782, 0.0, 3.9285973487373167, 0.0, 0.35391517913643034, 0.2722162112818263, 4.220606188480753, 4.467837674428751, 1.9569108214027733, 0.9247486663908814, 4.29951479086328, 4.256412681653805, 2.447313903363199, 0.6747256875230957, 4.666636891157513, 4.145978831328369, 2.0066976499183857, 0.6892952587288148, 4.812375355558974, 3.660127953429145, 2.055304306433746, 0.691148393507995, 4.91339212292513, 3.619352269394083, 2.2868434482310316, 0.6929200752446945, 5.028097198675685, 3.4747886518219655, 2.4812796310764567], [1.759411676140728, 0.0, 1.7368714139703734, 0.6415900633364617, 2.2703337731034128, 0.0, 0.0, 3.7534417350245195, 1.1902642600180977, 5.000307438079006, 0.6127444377082449, 5.396867482437689, 0.15147876556998244], [0.8073970940322667, 1.0245211588449707, 0.0, 2.0893632226531706, 0.21572196895639062, 0.0, 2.422967659905515, 1.3351638550922875, 0.3695275489769693, 3.3973566727192486, 0.0, 0.8298498061174335, 3.9846419673510627, 3.4431550959852673, 3.6436067594211643, 0.6804022553992928, 3.804156069572153, 3.5107901626024454, 3.5248579267877735], [3.299853821970536, 0.0, 2.945355110148552, 0.4040102311457121, 2.930393308733169, 0.0, 3.4659563612522826, 0.0, 0.0, 0.0, 3.9948198605785223, 0.5682708997336288, 2.655102915838301, 0.401553161868472, 4.2606324615013635, 0.37772410944707635, 4.691633822927723, 0.0, 5.879442069401095, 3.1593473884608856], [2.8922715537283765, 0.7223511625422803, 0.0, 2.3709605504080904, 0.6702792188124536, 0.19024834267284452, 3.553183995314726, 0.43301490621568184, 0.6715310484221959, 3.5917147891753753, 0.7844076058870115, 0.6898094236382412, 3.5116469788717493, 0.9194845940211374], [1.8450697539858272, 0.4874903387393622, 0.0, 2.856058552417064, 0.0, 0.47753782805910816, 0.0, 3.6226764938920684, 0.26903283771151426, 1.7917024515885078, 0.0, 3.9372164870460074, 0.5409092346582143, 0.0, 3.1983734204228167, 0.4111249732628053, 0.0, 4.789297092774033, 2.995363708961924, 2.387085212515116], [1.2974443528949946, 0.0, 0.9782132897219772, 0.26478407422382194, 0.3772471188430149, 2.987407312560136, 0.0, 0.0, 4.495796754907676, 2.163432278201146, 0.7074267986642129, 3.9006803165148014, 2.849778553177996, 1.8520002206829058, 3.7306327698014408, 2.821461188209879, 1.9723053102378165, 3.8141224912313905, 2.8562365194447703, 2.0123142382660997, 3.9445335996128623, 2.789347450516698, 1.922159256477364, 3.888618857962349, 2.8030413544374513, 1.7957115158825432, 4.08933102081732, 2.7373667968218798, 1.7431602852145194, 3.977700657187074, 2.5512752898573705, 1.7256917238281413, 3.8672661113563493, 2.5266958993954556, 1.718538302749462, 3.6449092398478973, 2.5850005371795466, 1.7948322405204662, 3.9772381183680743, 2.7132606354502475, 1.7937665424977105, 4.090914728058026, 2.8129119494754096, 1.7500396658539312, 4.289474149559046, 2.9572227765076957, 1.7797528966053497, 4.5834068076532555, 2.9778205314020174, 1.7851880796325004, 4.771820034476875, 3.0640664570052496, 1.8941782465333334, 4.795541245346301, 3.076188152281403, 1.82980307725743, 4.813280523407904, 3.0593860994288935, 1.845145000728082, 4.987929680122924], [2.0268618853867286, 0.14295780652572945, 2.2290932480239323, 0.0, 2.072900957415797, 1.2495607230863228, 0.0, 1.9848651338280334, 0.4739411065121274, 0.6834064308629687, 0.0, 2.819356580180278, 0.0, 0.6423808975902496, 0.0, 3.263921777014852, 0.46901669694758935, 0.0, 3.208751491530331, 0.0, 0.11823492695358148, 3.607212404900384, 0.0, 1.6398511682405903, 1.090613910678984, 2.2595379554988524, 0.6036272407473593, 3.898213218263156, 1.5642482833050289, 4.350636424412837, 2.321883938757159, 0.6929160971338031, 4.2218953747823305, 1.5324792421760955, 5.626671811961816, 2.0647587747124447], [1.0243674695819012, 0.0, 0.0, 1.439764474877331, 0.6401549144429926, 0.0, 3.325504567458923, 1.1655302807254058, 0.0, 4.193696843610102, 0.7851146348758866, 4.512524561187287, 0.6026937766314602, 4.726026281569602, 0.6518494721810868, 4.94598471716808, 0.25583378226172415, 0.3492197237526172, 4.768758114793805, 1.1892379915904787], [0.2961952779091529, 0.6885448565990995, 0.0, 1.1694508920876365, 0.0, 1.0366092396497644, 0.9816268995661125, 3.215912636193567, 1.147665218488877, 0.8616462947167938, 3.695184236799513, 0.0, 0.4431958381793069, 0.1812818000837645, 0.0, 3.5152590244767103, 0.0, 0.0, 5.035825855856241, 0.6733660898503682], [0.6069928948662562, 0.0, 0.0, 0.0, 0.0, 2.7420265774034784, 0.0, 0.0, 3.7578646726574036, 0.5570022212236185, 0.0, 4.848490363011752, 2.4606543041982682], [0.6683650772516199, 0.31588425674802206, 0.2466306778626452, 1.519963655269848, 0.0, 0.0, 2.6472214935846172, 0.0, 3.368897327415506, 0.0, 0.0, 0.0, 5.6373280480680625, 3.6043352692578368, 3.038410516483715, 0.6916855022804694, 5.280916065020422, 3.324906922018718, 2.694378352028489], [2.0336455186941556, 0.5750295043013429, 0.0, 1.621652225087266, 1.5949761611099649, 0.0, 3.6356743218370418, 1.4164958320184886, 3.646095371253605, 0.0, 4.695844621513898, 0.0, 5.054097789705046, 0.19565686069912247, 5.292927488651916, 4.174448632037028], [0.6361131788489471, 0.0, 0.7729482755888313, 2.729947132982155, 0.0, 0.0, 3.81912725957977, 0.8575117520131424, 5.763610879465159, 0.7252729337341002, 6.11083610583289, 0.0, 5.798158362239907, 0.5723572910060944, 0.6926832317201191, 6.032251201219621, 2.734537239780352, 1.7908968293300593], [1.4288288672341756, 1.0647399257271979, 0.0, 0.40380801278002415, 0.0, 2.031220309988547, 0.22545647545716657, 0.0, 3.953319601593333, 0.0, 2.1295773269246947, 0.2923373316954452, 5.370090813603061, 2.548124885234255, 0.6604138552056174, 5.514798271453399, 3.8271033956963256, 3.3027364080524615, 0.6849176845617639, 5.496535655490223, 4.37419624248149, 3.396751523555074, 0.692020929415385, 5.64771877314624, 2.1936437913553015, 0.6866000240274006, 5.496029188679442, 3.8268641274743547, 0.6898806068315283, 5.522885388156259, 4.190459930289992, 0.690766552181115, 5.817986150845747, 4.391442556581305], [0.9037605797308852, 0.0, 0.30760189695282614, 3.6805415499015246, 1.2809885971468957, 0.0, 5.268893260050984, 0.6303787642447861, 0.6931115125601772, 5.716261815532837, 2.105867169934879, 0.418642530016015], [1.410071727275333, 0.0, 2.2511998024213176, 0.0, 0.0, 3.5193060179626867, 1.8774443489217039, 0.6838510995847726, 4.193318729007926, 1.7419975099477525, 0.898473865291178, 5.159430293569241, 4.635667063349236], [1.7373723825405913, 0.20641452735670612, 0.0, 0.8917668082977822, 1.5426685462036744, 0.6732015543857686, 0.0, 2.3102192208108883, 0.0, 1.207835254574931, 0.0, 0.0, 4.739730816878664, 1.9300004840296927], [2.1672668589507103, 0.0, 1.0318982712624245, 0.9282964521579965, 3.1247596737491468, 0.6459933104352362, 0.0, 3.9042786446100752, 0.722749044656734, 0.0, 4.049723929217467, 0.04055705474651241, 0.0, 4.775638133107282, 2.4692071381329472, 0.6202236016449958, 5.172858610080396, 4.032155106563121], [1.5255618079415454, 0.5245309924588386, 1.055675412690777, 0.0, 1.8211333140565085, 0.6343683785824238, 0.0, 0.0, 1.9213812002002413, 1.9279546987771383, 0.33317752340592943, 3.3704434887055745, 2.4183981907896706, 0.0, 2.926888074311372, 2.2690693285374364, 0.3683116005765392, 3.7716156222462733, 2.365221733962589, 0.5283111327610045, 3.9322645770504767, 2.4297850473562406, 2.1479493919950907, 0.20292857267169162, 3.8276881178810456, 2.216981549477469, 0.702918392294231, 4.145542486476496, 2.3565514953352955, 2.294930936042982, 0.18645422819356375, 3.8892899839880544, 2.1111697483714646, 0.7575962111465938, 4.381653012056788, 2.0243002827955983, 2.223955411025932, 0.3142022966159498, 4.191453035169674, 1.941387502125185, 0.8644139510136004, 4.591238393829036, 2.0793636901309833, 2.481375162500999, 0.34519021560508373, 4.46388119815134, 2.0952881501823586, 0.8986319090373464, 4.7512275907768355, 2.1729692092863906, 2.5316287169832954, 0.26802205460898765, 4.63837292845575, 2.1420422605240494, 1.153691095258129, 4.841984374901752, 2.194510696249701, 2.3802212011911235, 0.24220875237240055, 4.707813828943565], [1.6537033722706127, 0.68136773613429, 1.8410925296571599, 1.0713451045388025, 0.0, 4.4367589889178065, 2.17054057861368, 0.6217592233803277, 4.895994427094113, 3.131068357390179, 0.6646117936309902, 5.125247834500964, 3.3107349012213505, 0.6790319030949663, 5.23302333236334, 3.291508012003928, 0.6237434628574015, 5.264704256015171, 3.3569584987716397, 0.6493578050948657, 5.261129980906999, 3.2911956626163987, 0.5900512049217705, 5.336686612303357, 3.249371107052736, 0.3948703796184339, 5.295611103894522, 3.420296486227035, 0.6929496443946299, 5.4746153854537525, 3.489435025216189], [1.6617726903277008, 0.3011355541119945, 0.0, 2.530521260013705, 0.0, 2.4406723023850145, 0.8675545914506214, 0.0, 3.4116112174452984, 2.1676676227330285, 0.0, 3.9543393466203898, 1.033492910664602, 4.005007467836451, 3.7947660903162204, 0.27028687054107037, 4.46329536308703, 0.0, 1.5640637042865735, 0.4042953004306624, 3.4578145602106587, 2.6216152162596456, 3.2881678684691042, 0.7673620207416674, 5.072164946812205, 2.9883027557988338, 3.0286612266161574, 3.5908707040697654, 0.9604432049135363], [1.968686292411776, 0.44441269189999977, 0.0, 2.8916276431137065, 0.4049046184172299, 3.4794917675320627, 0.0, 4.444379102632372, 3.141525005087049, 0.6591140245163205, 5.353951175520295, 2.9918556490167205], [1.8047139327505817, 0.0, 0.0, 3.3494991915233587, 0.0, 0.199026793591872, 0.0, 3.4517494117518726, 0.8901726289166105, 0.0, 4.834212209742497, 0.5130880432082784, 3.1438882160916863, 0.693138927853564, 5.603785626695511, 0.42225726068679004], [0.6824665665498477, 0.5564349400541265, 0.7252343988567006, 0.0, 2.8267853625160253, 1.212775028823743, 0.0, 4.371756451933192, 0.9503584596153204, 0.0, 5.193190877796232, 4.840774320664133], [2.0468490908979073, 1.2677884630086809, 0.0, 2.000866878606558, 1.4289888013759702, 0.0, 2.0563114221283643, 0.0, 0.6779877619959551, 0.0, 2.9927818110304365, 0.0, 0.6674137730226264, 0.0, 3.5072199117649197, 3.511211123891068, 0.0, 4.664107895173442, 4.891372776560749, 0.0, 4.716329088702105, 4.986291532397817, 0.1609841260217002, 4.690455344824312, 1.9759625669925285, 1.4522210500985844, 0.665603310168763, 4.326844824478545, 2.3426624559715705, 1.858151456442623, 0.6877002678008546, 4.2186850697333815, 2.1051696625767184, 1.7941866476711048, 0.6923188852484871, 4.175315039020917, 1.889361766739288, 1.9428960004425748, 0.691579307038288, 4.234369050609871, 1.7366527029933365, 2.14943777998253, 0.6893782801817996, 4.273532958603375, 1.8723197635346482, 2.1308599973080202, 0.8718533138384279, 4.24501559502995, 1.6475458414650161, 2.0125390350213004, 1.2632534666162256, 4.333322053837324, 1.637380445581788, 2.21529786811159, 2.1280943613669008, 4.22628951975466, 1.3629543963873456, 2.324337209529671, 2.1816946515893725, 4.2377132565520235], [2.6322327536643537, 1.495757564498646, 0.0, 3.122890155392276, 0.26426396266473073, 3.068722882623941, 0.0, 0.0, 3.215975276762924, 0.0, 0.0, 3.3217821527173044, 0.37022872678892704, 0.41295459069649554, 3.9902661688891796, 0.0, 0.0, 4.115894278699921, 3.5006981578966383, 0.0, 4.428145492384612, 3.8395085097053188, 0.214787708786665, 4.378668884993121, 3.790732066220125, 0.30434899423216577, 4.368152276686334, 3.761036142481885, 0.3869740566675468, 4.2724938452136705, 3.6994354824787234, 0.4188714851448413, 4.152076499329877, 3.701256356945125, 0.5526698803656406, 4.052976531951853, 3.737019373510933, 0.6226394158658106, 4.005414760021212, 3.7824006782593087, 0.6166111619685981, 3.9521036681341024, 3.8827442147074325, 0.6598797051819054, 4.019746378995965, 3.914181052553183, 1.0703726682720784], [1.5838550606299318, 0.0, 0.0, 0.0, 3.199431494775962, 0.8925732559737034, 0.0, 3.7002283922230275, 0.0, 0.3977361236078288, 5.033120621112151, 3.5234757938644483, 0.6855763944440612, 5.085398066868766, 3.2206868119979317], [3.0493469592902094, 0.8596250012532878, 0.0, 2.9846805518181596, 0.0, 3.0426705465129587, 0.42754030529211684, 2.0963771534294215, 0.7925427048493058, 0.884707035914946, 0.0, 4.304973738371222, 1.236164442941, 3.923847240925543, 0.6922948713597085, 4.7769201260701, 3.4762415645363927], [0.9299890898952522, 0.20217358070700628, 0.27949645447275584, 0.7545715850504594, 0.0, 2.630795682619251, 1.2779477098698622, 0.38923333198813126, 3.0093202247842092, 2.691769929721463, 0.4151587808523364, 3.187091070345755, 1.859127528018003, 0.0, 3.9556407916673253, 3.704789010227936], [2.2435868047638055, 0.9332955770195338, 0.5666716141261371, 0.3924429427938928, 0.0, 3.8713701919469625, 0.09749259966288686, 0.28347952775113355, 1.743109859577396, 0.0, 4.542519671245125, 2.767706591937397, 3.736477132749765, 0.5691421447695137, 4.8218559555784894, 3.192284615687607, 4.0951892614389935], [2.092671016186693, 0.0, 0.6773652005753796, 0.0, 2.8675665566764312, 0.14841606431010473, 3.564451877543879, 3.094148201520051, 0.0, 3.82299625118238, 0.0, 4.437217151536358, 2.1333023194066576, 0.0, 5.140504340867745, 0.5276872241757928, 5.0186643356614065, 4.165723241310013, 0.1384929887942525, 5.379593595757802, 4.056266050989185, 0.6818971527273774, 5.7146041403148615, 3.1437201910712163, 0.6916335468918262, 5.6071817505284525, 2.9324367583051614], [1.2006393369313986, 0.6775272076111112, 0.0, 2.5888955494812746, 0.6888406673065383, 0.0, 4.133274714884267, 0.712863796331791, 4.705343435170825, 0.8605307303248242, 5.297563995236101, 0.49391885516521883, 5.5703152814945796, 0.0, 5.749347896916776, 2.892910931383112, 0.0, 5.534878837608616, 2.618816640281139, 0.0, 5.622196709840066, 3.1484077123664704], [1.7051106933136735, 1.032132960276619, 1.6040814380567607, 0.45420959307750164, 2.104966102904008, 0.5831167035368716, 3.2251583069152443, 1.0938260566203155, 0.07710719308879312, 3.9779820178945404, 2.3387436074179866, 0.6043045317639257, 4.2560678078265015, 2.68920060247182, 0.6847910002176729, 4.3925175130249094, 2.592784509124559], [1.4886210537554738, 0.0, 0.0, 2.5140718772347097, 0.25826045859938496, 0.0, 2.655049936550126, 0.6793081369220141, 0.0, 4.021296587368615, 2.512285261003311, 0.0, 4.489006929407764, 2.6172533831402918, 0.0, 5.202687953873036, 3.641744044040915, 0.0, 5.1398667141948335, 3.2837859287227653, 0.0, 5.08336895330568, 3.1910731548704265, 0.0, 5.046421359793286, 3.1020554526668898, 0.0, 5.0380614187983905, 3.1301454397135497, 0.0, 4.974403380588105, 2.9465134144001195, 0.0, 4.8915772839480525, 2.7397938279184455, 0.0, 4.838956113505263, 2.628723608092557, 0.0, 4.909954313411521, 2.6220444545322628, 0.0, 5.001456802730927, 2.8936732746363876, 0.0, 5.094099145977408, 2.934206794918807, 0.0, 5.017103756298723, 2.843488947659385, 0.0, 5.069011684587465, 3.0430337341964844, 0.0, 5.213968671042549, 2.9705982567645677, 0.0, 5.158297044868099, 2.913789108769966, 0.0], [2.987460476427349, 0.37685319791095806, 3.8437150010768653, 3.0506493915964583, 5.120334095019386, 0.738077771750932, 6.08001832726833, 0.0, 6.199689915107568, 0.0, 6.275141399206776, 0.0, 6.323711755278264, 0.0, 6.285201532883831, 0.0, 6.168981633250151, 0.0, 6.110636017057604, 0.0, 6.0527721335840825, 0.0, 5.970476314609416, 0.0, 5.942069381572228, 0.0, 6.014495130456552, 3.0648539810637843, 0.5725386930399605, 6.211427022216563, 5.0380089200797435, 3.7984375237903834], [1.4671427822712848, 0.6794771529668696, 1.9287220534440799, 0.0, 2.1560867334672675, 0.0, 0.0, 2.252795866486522, 0.35664088818098777, 5.214893926353004, 0.5935741184418347, 5.6391022485325975, 3.650185055778644], [3.1642984026051586, 0.0, 3.0429198347252706, 0.0, 0.0, 4.831356448028117, 1.9524128073689733, 0.6411454925085851, 5.0905997584740215, 2.713279547034193, 0.6904314203157691, 5.109106291914261, 2.811110928614365], [2.0179976499098156, 0.43619967962678297, 0.46553300883829873, 0.0, 2.3208971937925758, 0.6902450943293608, 3.074156783004128, 0.0, 0.0, 0.0, 3.778136924641934, 0.6780387201853447, 4.068857386233021, 3.467775646239505, 0.3861226099262919, 5.0715483527765715, 3.7043331986796173, 0.0, 5.250188737734979, 0.23910101200494932, 0.9504065756851159, 0.380554457427731, 5.490762149399249, 4.740202297510989, 0.6931387487889964, 5.4803399008264195, 5.452134925552895], [0.19512220099391847, 1.347725493568211, 0.0, 0.5773952336603847, 0.0, 0.0, 2.2015105012501612, 0.0, 0.0, 3.25927559826887, 0.0, 0.6046840357903274, 4.157768481881601, 1.3693964282897482], [1.148418090990896, 0.0, 0.0, 1.3544593917492018, 0.0, 0.0, 2.9201273463864084, 0.8581841169906511, 0.0, 3.904970873424364, 1.109168608970831, 0.22934022426572692, 4.264920226393289, 0.11443598842289361, 0.6154290714292074, 4.748378491798535, 0.6041417867736614, 0.6923392093729444, 4.93085878640914, 2.3145919484275517, 0.0, 5.468568622260959, 2.1188371676391786, 1.0527586008170422, 5.66834148275259, 2.3423077395739003, 1.0487527910190333, 5.574321142653987, 2.4986817779148853, 1.2002041472172984, 5.530560283373934, 2.513691352472234, 1.1091144659509335, 5.513548097219445, 2.715543674492125, 1.0630284906208571, 5.430591437694979, 2.692921202892501, 1.0770266382264966, 5.412788921822027, 2.8510027270009104, 1.203199377775424, 5.337974773964386, 3.0440332482373824, 1.1939028834139844, 5.391536372801491, 3.058041584569183, 1.196660119995339, 5.3592481219502766, 3.189729041069065, 1.164203105063693, 5.378589937707396, 3.1280215977839974, 1.2197847920409115, 5.445508062010348, 3.0116248886160517, 1.2642861162460706, 5.483127071864352, 2.986091528039058, 1.1765624251938802], [2.045252205170588, 0.0927211522585258, 0.0, 2.090176948207009, 1.144558246818416, 0.7769327749013184, 2.6734785912693773, 3.4915130406071637, 0.0, 2.733731015363791, 0.6931469095466084, 0.0, 3.8316370169320417, 0.19702000422558974, 0.0, 5.379248096505486, 0.4403130318730367, 0.9408519346631055, 0.6381967086556032, 0.7895051264167343], [1.4090503539528365, 0.0, 0.0, 1.362929519530139, 0.0, 0.0, 2.2198762987720944, 0.4403158256588883, 0.46607134182814136, 3.9064976630804322, 0.712056083072984], [1.0094156859234353, 0.49530532073205225, 0.0, 0.8898863134263908, 0.0, 0.0, 3.37340319535363, 0.0, 0.22237622799615153, 0.0, 3.6269792512961665, 0.0], [2.0314868388796428, 0.3478226584036558, 0.0, 1.8086734199900814, 1.2234857368230236, 0.0, 2.8842182946925514, 0.0, 4.011232115702964, 0.0, 4.492812873477429, 2.855096812379116, 0.6773098040481613, 5.387996350658416, 2.0496975748483717, 0.6781626235202403, 5.356142662927637, 2.1878600838360494, 0.6891656204210082, 5.240777832009753, 2.1382053847414197], [1.3272912748448082, 0.31656534426448274, 0.1962759404714254, 0.0, 1.692673609846743, 1.109056187979966, 3.422720968801025, 1.6749068887420742, 3.459435298037989, 0.0, 0.0, 0.0, 3.279594761507591, 0.0, 0.6274593987331167, 0.0, 3.115214504488278, 1.6881195099208701, 0.0, 0.0, 4.164340487170575, 0.0, 1.2879037320658422, 0.0, 4.324988471734182, 2.057345621578257, 0.0, 0.0, 4.278721592399386, 0.0, 1.2999362784742503, 0.23889557068369097, 4.5016095266737866, 1.8893838502591196, 0.0, 0.0, 4.1821463448206115, 0.0, 1.285604219818722, 0.34233332536665817, 4.49416784947563, 0.0, 1.3421526512640056, 0.2686261211016616, 4.516713424003551, 0.03063310906861466, 1.439561617153646, 0.2742021863348755, 4.560713543890265, 0.09518905083524462, 1.4472842922932454, 0.2689974214896845, 4.627212256019516, 0.0699635415613021, 1.513538809762003, 0.3171127863228562, 4.744512141128421, 0.10495888592736966, 1.5525806128273079, 0.2626784288345202], [1.5121367360499998, 0.0, 1.4594826234030007, 0.0, 0.0, 2.4603467521774816, 0.543358469272644, 0.0, 3.0744591718324465, 1.566203019674187, 3.7492925186145527, 0.0, 0.0, 5.495568003017269, 4.091736665695438], [1.4522816928941187, 0.0, 0.0, 1.2645065520264196, 0.28825777735960734, 0.47954585309981, 0.668279989506343, 0.0, 2.607379761084045, 0.8214720338167185, 0.0, 3.039013411954097, 0.670002793193681, 0.0, 3.1139133013249425, 0.6600296190661128, 0.18362028700629468, 4.2200344212444545, 0.6651427506270975, 0.3480084880918539, 4.4242072917140565, 2.3510678434548704, 2.5488302910692453, 2.3608055959268057, 2.9644379787562265, 0.5707931795697151, 1.1818384198109182, 5.195554240883308, 2.66393380329252, 1.988131756806155], [1.8707959014281563, 0.0, 0.0, 2.100585209008119, 1.3007477809091348, 0.694791004947064, 0.0, 1.8484599040471732, 0.0, 0.0, 0.0, 3.7913040922031014, 2.8904466741119466, 0.512971374459799, 4.231489039869677, 1.4498153409113517, 0.5292297355437479, 0.9602003513220314, 4.393743775654287, 1.4132963733470523, 0.5704290565747834, 1.444899141798346, 4.5083244425242555, 1.3737820597347548, 0.5736689936541053, 1.5239849895080286, 4.6684634227377915, 1.453924271107295, 0.6135563917161406, 1.3773024860241034, 4.573949661459942, 1.3526304093868646, 0.6702693409378757, 0.7158284227307316, 4.618365433523156, 1.321247468602445, 0.6902194379962442, 4.771530329649311, 1.349348041720423], [1.257705744213094, 1.004236499334149, 0.3890387010394556, 2.8417436426656586, 3.074175316435371, 0.0, 3.2151455318995383, 0.0, 0.8060141178032189, 0.18249918170992818, 0.0, 1.8728190150389492, 0.0, 3.757854927952026, 2.1051652642408962, 0.4307020720599888, 0.0, 4.347492517694634, 0.9923312422161903, 1.0383913336793527, 0.0, 5.132509800478113, 2.853925899217161, 0.6114513758671363, 5.4539664230075955, 3.5042656976981936, 0.7555470300071963, 5.3188268411223225, 3.747233931694958, 0.6729408014769125, 5.163710502736977, 3.656130819335618, 0.6899167885254561, 5.086719639153829, 3.547560363227875], [3.102517241872319, 0.0, 3.1418007629234532, 0.2085831725331733, 0.0, 3.139810308562886, 0.4354676646192941, 4.0153009217537186, 0.0, 0.0, 4.2425802911619614, 0.5884886402934036, 4.98074202852635, 0.661814999549603, 5.188529357463546, 3.84612300193502, 0.6522926048647656, 4.999526322006712, 3.970509673459438, 0.668331265515174, 4.814677719712806, 3.8349271809778394, 0.6769820331676851, 4.743667086401356, 3.8047557290178755, 0.6857190136384403, 4.677531110970699, 3.777181164294534, 0.692897964716892, 4.491263944098586, 3.8329155136148665], [2.2551677295860726, 0.0, 0.0, 2.4913052569504908, 0.0, 0.0, 3.7586217080392794, 1.2840953475202752, 0.0, 4.101681303554523, 2.1957321942138166, 1.2027687802117244, 4.93808437046374, 1.8345903414486968], [0.5597821905997384, 0.0, 0.0, 2.2043775530839635, 0.0, 1.1221504566085436, 0.5246296820260594, 0.0, 2.6875361963115565, 0.0, 0.7277285838812678, 0.3413660736666646, 3.588499325332741, 0.5257722883254471, 5.316787929016829, 2.7014606792457982, 0.6862342331037017, 5.137593584728908, 0.94559118152742, 0.6900512316507323, 4.85774528930484, 1.6105288954937529, 0.6897751859178626, 4.788982866629288, 1.7171225347618058, 0.6879337009546231, 4.6031102543238065, 1.6959015918676694, 0.6920650421938315, 4.591856581542748, 1.7561563868277648], [1.1750239743881299, 0.46483339743444885, 0.0, 2.075759759475654, 0.0, 0.4730608931138106, 0.0, 2.3941076026591834, 0.0, 1.3808679403161013, 3.0421171439614594, 0.31832637421311466, 2.512474817524589, 0.23207574197936515, 2.734666325108562, 0.4002955441395627, 2.7466293687457046, 0.22233780340736692, 3.9549296004715653, 0.25088705985126275, 4.124726739833352, 2.4385162232355277], [2.8931060098272146, 0.6542099688370393, 1.6156065113890759, 0.0, 3.2129455308165555, 0.20258650738552278, 2.726752556957646, 0.37493667872977, 4.987834458401751, 0.5446729462895398, 5.824518887479159, 2.1762708870142693, 0.6064941140975524, 5.448811531019333, 2.199209130846912, 0.6609026581196882, 5.586231090100317, 2.269493869030366, 0.6632664393532828, 5.632211183085017, 2.2139684178247796, 0.6693164420488606, 5.7387641982022535, 2.216391216779756, 0.6703466906626454, 5.583937765182254, 2.335234065905442, 0.6827141536764203, 5.622019599750404, 2.341965562835989, 0.692139980991685, 5.708378708097841, 2.353018530699423], [2.4619947830223645, 0.0, 1.5682069355060988, 0.0, 3.892207261250198, 1.344855525650249, 0.5867048631336486, 4.534077223364336, 3.5804672401862785, 0.6806043680569879, 4.707441479741632, 2.73172526640586, 0.6928990487203024, 4.6968210505258545, 2.4180371790875284], [2.8956682409830794, 0.645961133347602, 1.3729627474812682, 0.0, 3.4433278190240157, 1.0635169570117005, 3.827099397927903, 0.3309644309620855, 0.0, 4.4760862260320975, 0.3625690638314686, 3.0819349733289134, 0.596676064539524, 5.858343233068448, 1.159438152828558, 0.6788692801720837, 5.919168059846943, 2.6611725204377943], [2.090484356046409, 0.8968743629518255, 0.0, 1.616493983814023, 0.0, 0.18413840213350652, 0.0, 3.102663603978462, 0.0, 5.28460040068967, 0.2887786897558043, 0.7995520556804514, 0.0, 5.867378134909345, 2.3041382965869737, 0.6506521846038583, 0.6278128682296714, 0.34720248703961143, 0.6928096903877837, 0.26771709949694733], [1.100798372450266, 0.20554363209953885, 0.10953823485154916, 1.565813280884014, 0.37962569853578276, 0.2731989259500794, 2.4676790169877414, 0.1448746085851573, 0.0, 3.0407457476519157, 0.0, 0.354879887833766, 0.0, 3.514650183466015, 0.0, 0.0, 3.878755646795051, 0.6874956338105549, 0.6789473197122524, 4.211043604876713, 0.6706010411412302, 0.6858054411063876, 4.305835618522435, 0.6767796357687634, 0.6839965210989869, 4.346028958931032, 0.6407854487080279, 0.6894105717042327, 4.372318106714256, 0.6165625716695851, 0.6926694152345072, 4.4341709631603115, 0.5963758869637534], [2.514481092465865, 0.15052783535715325, 0.9852321685199663, 0.0, 3.6680651619485563, 0.0, 0.0, 2.0840750936283206, 3.12219360098586, 0.6321054208991791, 0.0, 2.99142938748138, 0.27546804248625534, 4.176292079851874, 1.1932581577185237, 0.0, 5.699339559552573, 0.0, 0.0, 6.266889617019136, 3.118801347271887, 0.162487494120915, 6.339894050622182, 3.7121155597471707, 0.16451537634496635, 6.36435435924158, 3.9467988544771426, 0.1538797947558488, 6.338787819318242, 4.334167007372516, 0.14091088045720118, 6.406167091270131, 4.409668957152193, 0.13037761472981474, 6.377186207856227, 4.320873419677013, 0.1282648092957982, 6.36050436532569, 4.3584048716085055, 0.12325358483666135, 6.382253178890466, 4.529479098408037, 0.11521075547330001, 6.3488228566248415, 4.9163429260493805, 0.1436983015240937, 6.343044130275489, 4.813878123770466, 0.0, 6.326683607885358, 4.76736118331777, 0.0, 6.41467720128479, 4.787968483827521, 0.1179130947436084, 6.423743119758968, 4.762045965264521, 0.0, 6.436288960970479, 4.744302156771663], [1.6095571560624125, 0.15756630873619554, 2.6561960754077436, 0.5685828713864907, 1.0607464534139788, 4.135101326972888, 0.0, 0.8007537932552802, 5.397986547748603, 0.0, 0.9843529565240545, 5.17309640681074, 0.28144039313156033, 5.624817034852547, 2.857153279389994], [1.0962675561941575, 0.0, 0.0, 0.24067172075660787, 0.0, 2.314888538364832, 0.19983859168131293, 0.582704311705372, 4.336011875708385, 4.243999702998634], [1.0330560026466045, 0.7458489980486048, 0.0, 0.705798396733081, 0.503183160681697, 0.0, 3.2252964186605406, 0.0, 1.2156990578919848, 0.0, 0.8251810868465815, 0.0, 3.372812892009911, 0.2220175112627251, 0.5703960285407197, 0.30006536292616026, 3.8035872567973867, 0.0, 3.3947187205371376, 0.8525437357860342, 4.52828204996804, 0.5536710524393731, 4.826900342347795, 0.4729896371589488, 4.937386070841386, 0.5344692779857625, 5.062804963959986, 0.3680997513365819, 4.576670671730809, 0.616286359962319, 5.010403591301308, 0.0, 4.982775204865933, 1.7661508168280469, 0.0, 5.034946070061421, 1.4919377351802858, 0.6926486916507558, 5.333546394788139, 1.33962629381532], [1.275145903013372, 0.4734971928037284, 0.0, 1.0917868646594515, 0.14117200660135168, 0.4155442105235748, 0.0, 2.654311549440788, 0.6801554835940451, 0.0, 3.071467200230405, 1.468403247781912, 0.45383843805488766, 3.6432774509561963, 0.9742797002700335, 0.0, 3.7968143751626475, 2.202983755149432, 3.88220521022479], [1.8200531648743554, 0.43022146952503026, 1.6136633903721385, 0.4260525407139376, 0.0, 1.7161950558201113, 0.4225735639570338, 0.615948477731959, 0.0, 2.8302155084910186, 0.7119473973000874, 0.0, 3.205157595193202, 0.7178994066473625, 3.5826096279931883, 0.5870098426710278, 0.8333449888546651, 4.559858398873917, 2.6132001918018966], [1.290510582813698, 0.5127209042641119, 0.0, 0.7035639022747813, 0.0, 0.6685954214390957, 0.0, 3.945387473772153, 0.5820328795630616, 0.9375646631558485, 0.0, 4.532628225080994, 2.9550324518746316], [1.4661035936803533, 0.8707955058104546, 0.4525809462042206, 0.23743611542050375, 0.0, 2.657042166377305, 0.0, 0.37769842503745504, 0.0, 3.3586423538088908, 1.223619410518175, 1.1961612788155855, 4.8406913085880685, 0.0, 1.0225199155297855, 0.0, 5.143889899153644, 0.0, 0.7716140354790986, 0.0, 5.3581290402504935, 0.09306114098994389, 0.8089156975895353, 0.15466509441955026, 5.473900869679113, 0.09662573681229882, 0.7041946263820908, 0.18687772358319776, 5.4513990724828805, 0.1464100061993179, 0.6729394991745753, 0.20725503581861626, 5.4721311972834235, 0.18752872705218088, 0.6469392913424143, 0.21886410648000332, 5.436027103595897, 0.13483168076718038, 0.7084102537357118, 0.18909031176703336, 5.448023348998628, 0.16976663062412606, 0.759139851595145, 0.2099652510199181, 5.471089025903613, 0.22113172571878642, 0.7837579990843424, 0.16216273400717637, 5.551424952283623, 3.831671151982911, 0.4044653019473725, 5.565859260478716, 0.18248615170979327, 1.1955409206835894, 0.27030375293508946, 5.615291354745208, 0.17657424966457114, 1.1139862664266131, 0.1707509711915024, 5.561826065402644], [1.7639017529190293, 0.0, 0.8837368226301194, 0.0, 2.4421512594966517, 0.0, 0.0, 0.0, 1.9813849245288444, 0.6892486567813081, 0.0, 2.065016137366701, 0.0, 0.6594751594793096, 0.0, 3.509721951364179, 1.2539698233841157, 0.0, 0.40451988635899705, 0.0, 5.374791876465448, 0.1571688780168578, 2.4129994099455314, 0.4922564762373443, 1.6004744253049459, 0.6873284072069428, 1.248780774327388], [1.5634409097834254, 0.22843998701041832, 0.0, 1.6075360291035847, 0.0, 0.0, 2.9179631092333578, 0.0, 0.262939319418716, 0.0, 4.150191252625622, 0.0, 1.2196894117168464, 0.0, 4.41304743052497, 0.0, 1.8444425425943498, 0.0, 4.528537584181245, 1.6164823552002938, 0.6840121079930481, 5.435058668607699, 2.1813400319721095, 0.6923927427984291, 5.6689801985398285, 0.0, 2.5411754204109402], [1.7508638208888965, 0.0, 0.0, 0.0, 2.486166234512974, 0.829112252223802, 0.6931146241406572, 0.0, 2.7241823844348523, 1.8156085067064054, 0.0, 0.14251486975266292, 0.0, 4.545688830523547, 4.019332654206946, 0.6848492702300011, 4.1208846577300395, 3.915012499576106, 0.6845894414659799, 3.944387572083022, 3.8960200162608825, 0.6568656035865208, 3.7810222282121018, 0.0, 0.0, 4.2735701892537, 1.14940367724194, 0.6730304999456536, 5.033097084065838, 3.325323651710519], [1.0376627443565196, 0.3346317129113652, 0.0, 1.081468587580766, 0.5103606264950091, 0.0, 2.291287106058693, 0.0, 0.9549748572211619, 3.1840641923419044, 0.0, 0.0, 3.4287756402561014, 0.692841340520149, 0.0, 4.442445427576957, 4.921964135580485], [1.3424114991549323, 0.3354572251692884, 1.2479259432710206, 0.0, 2.516749270269856, 1.2588596472217188, 0.0, 3.439659755900245, 1.0586353454986783, 0.6454921834569703, 4.915938733050159, 0.4940611179615051], [1.2461381208131599, 1.0947951975800414, 0.23145737081576107, 2.6329929256088773, 0.31042887804828884, 0.0, 3.1601871582906407, 0.0, 0.0, 3.375724632621171, 0.3203458467761839, 0.0, 5.01943808540841, 4.005256059310195, 0.4066469627874957, 5.3273172801474615, 4.364581737222052, 0.36973539743344414, 5.565719058244457, 5.211283615216696, 0.6823290518666495, 5.585863920790106, 5.043870463776924, 0.5200672816334274, 5.668866020180179, 5.387278598137564, 0.8386743642511718, 5.6763112680226, 3.5364772319875812, 3.296835527123025, 1.7344801947741815, 0.7254457140940302], [1.0690303322180985, 0.5775703599938179, 0.39050953559068785, 0.0, 0.0, 0.0, 0.0, 2.5887082105155934, 0.0, 0.5763611196443035, 0.0, 3.714161660444391, 0.0, 0.0, 5.4018889654216675, 3.3112649050575507, 0.0, 5.537851017608282, 1.8175352784037888, 3.167797495097378], [1.7562675186683327, 0.0, 0.6555762424952102, 0.0, 0.9981276557036803, 0.8835774476866161, 0.0, 1.2515246876243076, 0.0, 0.0, 2.8498233454898916, 0.37816785063838515, 0.0, 4.712447612046146, 0.175607957025109, 0.0, 6.537676073947362, 0.5877545576491418, 0.26779278306626486, 6.97873755173295, 1.8187389184935907, 0.4712868801015986, 5.31840486491966, 2.1048363645144863, 0.5415566573317485, 3.4666060306545585, 1.5458020029967614, 1.5420652038501212], [2.15629489069081, 0.0, 0.0, 1.4086553400352986, 0.6058133872462523, 0.0, 0.8876304552579233, 0.4817817460754431, 0.0, 3.088455280761793, 1.4154968535314914, 0.0, 4.020045728088941, 1.8001134395208844, 1.314075180782837], [2.3842064690676676, 2.041178436943018, 0.0, 3.1545352678267364, 0.0, 0.6558206520829176, 0.0, 3.8019709524707603, 2.2822959955235342, 0.0, 3.9141263891375573, 0.0, 0.14475606965650445, 0.0, 0.15608463582645493, 0.0, 4.799065081183446, 3.623670995251471, 0.23735527785069668, 5.175696485611452, 4.22876348304879, 0.27405924511263785, 5.391673679091558, 4.174396454807599, 0.4130041949439123, 5.537628699072814, 4.153280754183942, 0.5024823727323898, 5.562015910931832, 4.262199341592922, 0.6857056704798706, 5.652116240858103, 4.211529536285357, 0.6280886430376983, 5.704947117366213, 4.0818016005614695, 0.7655559214454652, 5.7549642758615, 4.088603489211598, 0.7219507543817699, 5.7916069294858845, 4.242135449420476, 0.8593022481346252, 5.850002762229499, 4.412332210876419, 0.8787630794181354, 5.908783170089367, 4.351213367583715, 0.7338306762904853, 5.931039648682294, 4.536636037887905, 0.7124321013717625, 5.953520738830063, 4.641370724444257, 0.8611401667407225, 5.9515911552885, 3.3364932165782633, 0.6890433977408462, 5.988239369197024, 3.629204433445779], [1.6226932219839627, 0.0, 0.7030153738245636, 0.0, 1.6819999452522267, 0.0, 1.6365943953258688, 0.5617297227641558, 0.0, 2.3087724956237077, 0.0, 0.0, 3.242633388678911, 0.0, 0.08808640559406403, 0.2993659329625015, 0.0, 4.655882233824338, 0.631651667389809, 0.8515359700515969, 5.476370767461573, 1.2771125017852096, 5.790951134365558, 1.4369578048756566, 5.894306984687009, 1.2793217018091116, 5.905272749341028, 1.4679930470766926, 5.913876643643313, 1.7622849808412495, 5.9636451429104, 1.923752239035056, 5.998758742913846, 2.102351344623691, 5.959473985672976, 2.2068487844488143, 5.914074937307165, 2.1089884427738332, 5.916349343810301, 2.051884635590086, 5.94962995348885, 2.343209941574816, 5.932008451929037], [1.472651107476454, 0.0, 0.23269427989815858, 0.0, 1.2572266190032069, 0.21037141996628006, 0.5831149233203543, 1.8817375514364532, 0.828592342507304, 0.5573672994917995, 3.0956936579694867, 0.0, 0.0, 4.036671534758729, 0.0, 1.314140633880772, 0.0, 4.954465954030417, 0.0, 0.7540701919654061, 0.6930075989794329, 5.476159249319898, 0.11310441645253252, 0.3204311669418042], [1.097472197494798, 0.21219601270841468, 0.693132093424532, 0.34389983105246824, 0.46230267405527364, 0.0, 3.063465245517531, 1.1968810640719063, 0.0, 0.0, 3.5573415864325155, 0.0], [1.5595529675603645, 0.7930413973005573, 0.0, 0.27433422518870987, 0.0, 0.0, 2.484224009954745, 0.6220658961200326, 0.0, 3.1004885122496955, 0.187861929561559, 0.0, 4.016729048153528, 1.0281343057960182, 0.4631293933534365, 4.048456195056723, 0.6660256630329662, 0.2554255376509701, 4.0388398268852415, 2.0774878848749907, 0.73160726592296, 4.016163476379728, 2.032296911381329, 0.608817189646562, 4.0804668690813335, 2.035506537970449, 0.4941420689667407, 4.164344787300128, 1.9473402902959747, 0.4959027731620069, 4.178123376537771, 1.9211185775844994, 4.327249243686675, 1.0923887514556998, 1.022608951115666, 4.856470811675666, 0.8727537202503135, 1.0567977845879164, 5.487229158705386, 1.1507266859525167], [1.6163542916081668, 0.4574789509420052, 0.0, 0.6079505113997776, 0.15142470487050433, 0.0, 2.2717411233187814, 0.0, 0.19873569079343645, 0.0, 3.7217830448518487, 2.1915205212331648, 2.5047656763342756, 0.4219607003221948, 4.614041666785535, 3.3423497337362704, 2.96451118660339], [0.8660667912039635, 0.0, 0.0, 0.7402462746503503, 0.5066218997435283, 0.4519453481937652, 0.0, 2.844137967608741, 0.7037112491465166, 0.0, 0.6606043622331159, 0.0, 5.4710971732426, 1.4305387772898914, 5.242343555131301, 0.4432472155888726, 3.6607319534053055, 0.0, 3.668479312458957, 0.0, 3.6573461183877414, 0.0, 3.865983909041269, 0.0, 4.0623351727150725, 0.0, 4.375326566138755, 0.0, 4.078787118966058, 0.0, 4.610967509213339, 0.0, 4.782494771813476, 0.9204746612664166, 5.043618845148687], [0.9895083249974448, 0.0, 0.0, 0.9795596531883157, 0.0, 0.438888363516326, 0.5207624400696373, 0.02669815551414348, 0.0, 2.381670457442549, 0.4848856713991559, 1.0101767243578363, 2.9378186026700526, 0.9936801248267718, 3.522855473844818, 0.30949273549272593, 3.0543868059703154, 0.2935970409112898, 4.9121028482132285, 3.3758764170297777], [1.4412754692249816, 0.0, 0.0, 0.7755020245952589, 0.0, 2.859119970354952, 1.0796278113989926, 0.0, 3.559267369822253, 1.9502287615512979, 1.121420016829386, 0.0, 4.763212863158543, 3.401961029263097, 0.31780929301170757, 4.938077067999449, 2.537163651962812, 3.1369044889674695, 0.6802464837932214, 5.080088715252603, 2.720642838185725, 2.959701924581734], [1.8534473908657283, 0.0, 2.0391931244421424, 0.0, 0.43726515987373743, 1.445750323503407, 0.0, 0.0, 3.359982868176986, 0.7480749732470411, 0.0, 0.0, 3.501488972128355, 0.24582678420772425, 1.634340337731921, 0.0, 2.217498180056818, 0.0, 2.405828377303307, 0.27002357808022887, 0.0, 4.097290113608377, 0.0, 3.272417070253431, 0.38048312281147, 0.0, 4.236854809482599, 0.0, 3.4278802681330767, 0.4255661592147013, 0.0, 4.2052352179927786, 0.0, 3.619051877699325, 0.45650314883398446, 0.0, 3.931162978211051, 0.0, 3.6732449632388517, 0.5123072647871059, 0.0, 4.090217567126881, 0.0, 3.8876698689686178, 0.0, 3.81270715807142, 0.0, 3.860456300686271, 0.6715363264117025, 0.0, 4.025476462776467, 0.0, 3.9949494433464627, 0.0, 4.014845428691364, 0.0, 3.989775184183768, 0.0, 3.961879123719728, 0.0], [2.576887286476314, 0.0, 0.0, 2.9332259034447583, 2.199281717837119, 0.0, 0.4409647889799176, 3.120673538351545, 1.099055856450707, 0.6917135589117152, 3.24275181884553, 2.2076862501622756], [1.628739260247065, 0.0, 0.0, 1.821943525755029, 0.0, 0.1606411499811002, 0.6984938209109818, 0.0, 2.39924815901355, 0.0, 0.0, 4.473985376345249, 0.3928587330418652, 0.5221269543508283, 0.6931393241528403, 5.318113960506981, 2.302184878898337], [0.8259835517668681, 0.0, 0.0822028810685551, 2.3320733247572165, 1.7610238761060013, 0.06571522755944363, 0.6267531230502306, 2.498389247235397, 0.6927614109599691, 3.836319012554206, 0.2744478313324703, 4.777709656973008, 0.0, 4.315246335458474, 0.0, 0.6893436653372635, 5.558542481411124, 0.07454449677416436], [0.07640250629434032, 0.5281106507907785, 0.0, 2.8345576207940693, 1.6956710716911776, 3.1673913130129314, 0.0, 0.0, 4.395592346691775, 1.5192132419756905, 4.673901240642823, 0.273649360230079, 0.0, 5.948775502036854, 0.0, 6.429516255597868, 3.061328274135345], [2.0016136420487762, 0.0, 0.0, 1.6289312935677533, 0.23301670745492933, 0.0, 0.9815118324463941, 0.0, 0.0, 1.4376442324561904, 1.137512727403951, 0.0, 5.314399057830165, 1.674051393168185], [1.4743912077513213, 0.0, 1.6650483982325044, 0.0, 0.08340620774072123, 0.0, 0.0, 2.519186126906811, 0.3509348833863787, 3.237123748503333, 0.07430621670814558, 0.0, 6.0529205771121735, 0.8899228734953109, 3.062043596609516, 0.6656284300112562, 6.294754602858511, 1.1566659646877147, 3.1424115460547584, 0.6557044910134315, 6.255295583116724, 1.2890988024695023, 3.26397060415185, 0.6476969152334232, 6.364633874881443, 1.438791503332858, 3.2488681437237403, 0.6349747339092264, 6.387119397333534, 1.5950076010156824, 3.5032995346943028, 0.6341795057433631, 6.326027894482046, 1.6404171045862184, 3.6020106786172397, 0.6480628751957637, 6.300279780994227, 1.8689730060021792, 3.594189845541049, 0.6660094659210485, 6.398430584414111, 2.2526520282034928, 3.5802321693713504, 0.7627801654034186, 6.348417579661754, 2.6125961693477193, 3.415020559444652, 0.76920387348838, 6.418037174736052, 2.470582023318298, 3.2895948725359836, 6.2694750443755565, 2.366716541084855, 3.4146210650362385, 6.257575095955913, 2.4140100218007574, 3.4712844581470934], [1.2967695338775678, 0.0, 0.0, 1.1543027038196596, 0.17227383321938966, 0.0, 3.192189823383662, 0.0, 1.0641253286803254, 4.946108224378315, 2.985598694285453, 0.0, 5.294286035632539, 4.439848821865586], [1.4502754819558115, 0.0, 0.5301752336010914, 0.0, 1.4426398560404299, 0.0, 0.0, 0.46649924327285447, 0.0, 4.315605816577746, 0.3251292752225678, 0.16414670725343466, 5.758757296204255, 2.8875677285312853, 0.41894510538033725, 5.916322364409922, 3.046206745675331, 0.641192908299302, 5.962123176674095, 3.1089547856800386, 0.7926756362266646, 5.972790917800261, 3.213565143656306, 0.7907035820467297, 5.9889771526623345, 3.10664094544378, 0.7352822015494704, 5.854845236469078, 1.9675061406381353, 5.455036472187482, 1.7837167205490723, 5.49486099868706, 1.62014438586751, 5.535210145622708], [2.0395530940073936, 0.0, 0.9804110660966794, 0.0, 1.926936254351782, 0.0, 0.4572463803941056, 3.040714203335515, 1.008006726376264, 0.0, 3.65785556528779, 0.0, 3.7651154468314436, 0.3736525653660584, 4.176791794968457, 0.0], [1.0470899945981311, 0.0, 0.0, 2.4120474204071116, 0.0, 0.0, 2.705083934334532, 0.5594872892313802, 0.0, 4.133193068171909, 0.85536735319665, 0.24424938194031343, 4.638251472404508, 2.434812556587577, 0.37012487041939335, 4.891093178190441, 2.678136480843171, 0.48396331988673325, 5.0734973470623945, 0.5643763240108554, 0.0, 5.297683570315975, 2.3461168943290307, 0.9200673800502452, 0.0, 0.31143126255960424, 5.699210224148324, 2.8533500087273236, 0.0, 0.6826643340801025, 5.62535262755879, 2.886207968170507], [1.8002257568301818, 0.693102308901272, 0.0, 1.6586871775873648, 0.0, 0.0, 2.014270540482061, 0.7445889206218858, 0.0, 3.7186871393192846, 0.09002272992600753, 0.0, 3.892473726959615, 1.0055796922389872, 0.0, 4.296708757404774, 0.0, 2.6231846473441816, 0.415243496713413, 4.971317359300628, 3.044756686213959], [0.760074168114361, 0.0, 0.0, 3.7809948736256254, 0.40961083295504297, 0.9672527376354637, 0.0, 4.245541258974653, 0.0, 0.6444279651182523, 0.0, 5.313493854979276, 1.9101267494606877], [1.5440202503433904, 0.0, 0.0, 2.6081532230209903, 1.740865307082358, 0.0, 3.170347206035477, 0.0, 1.1281976646042333, 0.0, 4.042534494735621, 0.2710557453906894, 0.0, 4.0937580984729545, 1.2106280119980029], [1.4410390775475617, 0.0, 0.0, 1.2537969973113519, 0.0, 0.0, 0.0, 1.4109054635191185, 0.0, 0.0, 0.0, 2.0735474034742634, 0.33712228513678116, 0.4977147804987086, 0.0, 3.401051198020779, 0.0, 0.2137305520394341, 0.0, 1.7264461671623939, 0.0, 0.2762542412676541, 0.0, 1.2288688563122114, 0.0, 0.0, 1.160910780156831, 0.0, 3.121745266556137, 0.4662398725146399, 3.6728419291057213, 1.7252707485113716, 0.31003972680465564, 4.179266762859114, 2.8331237845889525, 0.27090956958930057, 4.442986504742752, 3.673177696936097, 0.5082828550616119, 4.74401614837835, 3.7667276862550914, 0.36932042984235314, 4.863218225081839, 3.831399201298766, 0.6020889157078256, 5.142051997059048, 4.020339805119442, 0.4992885979387646, 5.257449889425285, 3.868160497839846, 0.6512736124489256, 5.254275518784893, 4.098894158265809, 0.6274631421314937, 5.278426209958163, 4.07897749715468, 0.6319652270970004, 5.362384066786362, 4.104272520724633, 0.6480905286095809], [2.629932983740445, 0.4462396971870015, 0.4359164882498727, 0.0, 2.9318664587391505, 0.8858388930988312, 0.13140640760497355, 3.5438436354735834, 1.046693705316951, 0.0, 0.6930466923232219, 4.406215758095039, 1.6299583600153835, 0.0, 4.884618479662092, 3.4262653341646216, 0.6846984034604269, 4.9668455940997465, 3.3837825152030416, 0.8488068641989992, 4.924172674436301, 3.122207718727592, 0.8380427688965922, 4.86928635096464, 3.142323171230925, 0.8385085400562473, 4.875159409815358, 3.1286151251637397, 0.8410627783046141, 4.959523723874722, 3.0767824754040087, 0.6777874426199213, 5.006365187796618, 3.022321712133146, 0.6855401591096477, 4.948008695149872, 3.072427731564321], [2.427615722280509, 0.0, 0.39628301793374354, 0.0, 2.3834041471039993, 1.803136122618602, 0.5022702083461761, 0.0, 3.764741404240542, 0.0, 3.1878817522555893, 4.281296499327031, 0.0, 3.9598873185716594, 0.2340357408502214, 0.0, 4.971944772699931, 2.0864296818362282, 3.4386311833536993, 0.3621477236115631, 3.5169995722865757, 0.3033216449777651, 4.629884022212819, 0.6175239985544061, 5.199970998036679, 2.50814689440894, 0.6700709417951007, 5.398458874077369, 2.9832066007609583, 0.6908073562902823, 5.535901554057722, 3.829216788529784, 0.6931327052676833, 5.581760888164577, 2.929540300122966], [1.7158514311422126, 0.0, 0.0, 2.916123665574954, 0.7090415929616081, 0.8651938083043904, 0.0, 4.21151199958636, 2.0940434069823963, 0.6363722754263859, 4.863105741750726, 2.0759432295465157], [1.0103066890457, 0.0, 0.0, 1.212938911094104, 0.044295188655980915, 0.48597897362894615, 0.0, 1.805898413264607, 0.0, 0.0, 0.4629992738061474, 3.6142960705938516, 2.234698199451883], [2.0262938685460687, 0.0, 1.944294857259837, 0.0, 3.355063778867446, 0.5522609665064588, 0.3989520404998955, 0.8495622207992009, 1.0361745666497413, 0.0, 3.6151785090619213, 0.0, 0.0, 3.8339415508132073, 2.6766086500053503, 0.5209064648011438, 5.016378875230776, 3.4646104253795458], [2.401265153160548, 0.16869983524625393, 1.596430998580135, 0.0, 1.9199329057384444, 0.0, 1.857740592522246, 0.9022392394537521, 1.8870162789787304, 0.0, 2.4257404554414386, 0.8579274148022212, 0.0, 1.9394415000802123, 0.0, 3.062707061521008, 0.0, 0.0, 0.0, 2.7574247626392654, 2.0728506085189347, 5.103384155131015, 0.13011232054462202, 0.0, 5.313720467559459, 3.898455918615209], [1.337744291869613, 0.4151997201810418, 0.0, 0.0, 0.0, 2.356406685827831, 0.1757506414727897, 0.0, 3.2446871638346035, 0.2636721991300528, 0.15806724770662478, 2.9662130738153665, 0.2705315685898812, 0.0, 4.433136977424815, 1.0695909047460168, 1.0606434055760798, 1.0869463571014704, 0.6927642379227654, 4.8089596800059295, 0.5179554169634291, 1.204488937870544, 1.0316492792462506], [1.2025849866980385, 0.0, 0.0, 1.666260741857816, 0.0, 0.0, 2.4447548350970028, 0.30981863514603647, 0.0, 3.514144100980885, 0.16144501589376162, 0.0, 4.1967412347111575, 2.615825669526439], [1.5025525793857792, 0.0, 0.0, 2.2840215797532664, 0.22842441168175426, 0.0, 2.8834003436371716, 0.0, 1.6049300556262394, 0.6203913283659834, 4.174233936553353, 1.5815396696195465, 1.005206329242255, 0.9488847230024293, 4.343160257412459, 0.0, 1.1844310502440027], [2.0515838067295853, 0.0, 0.0, 1.5780957298757938, 0.0, 0.0, 0.0, 2.710724907047978, 0.8784032491117701, 0.0, 3.2543985109630236, 0.0, 0.0, 0.0, 4.16225734364674, 2.3331832890195647], [0.95668187649767, 0.39105030440792043, 0.0, 2.4889869363011417, 0.0, 3.0197003999825083, 0.0, 0.43529027261422015, 3.5777600879807556, 0.0, 0.0, 5.453644546788163, 1.1175028294619012, 0.0, 5.544647472811899, 2.3538818614726558], [2.4355236716450492, 0.6584609017520293, 2.9826822508499626, 0.0, 0.0, 4.157336122689884, 0.8372936187371105, 5.492259281583925, 3.111435996980845, 0.686599914446197, 5.736850488558038, 2.9706099873317204], [1.7663946180072063, 0.0, 1.1484189441608719, 0.26678747507956274, 0.680991483000841, 0.0, 4.381523662129678, 4.64522960267521, 1.3980886441808293, 0.796984246272979, 0.6867993639051712, 5.330503796839595, 2.538652808441889], [1.2637200318855484, 0.3600243087629898, 0.0, 1.156527251906323, 0.0, 0.5969011336201661, 1.7363743379788192, 0.0, 1.7624647025671156, 0.6425915169431513, 2.7762279650175747, 2.0331173602546975, 0.0, 3.7891226871020964, 0.26625788169020914, 1.4266733214827378], [1.769892858679605, 0.0, 0.9337851504411697, 0.6873467916436622, 0.16252038425491772, 0.2928222421903839, 0.09818361225512065, 1.2075491848692956, 0.0, 0.24506369899396074, 2.7251368148727235, 1.3622799293398442, 0.0, 3.014436003999813, 0.9888709885658991, 0.0, 2.9869183880420924, 1.0066626915067005, 0.0, 3.0681227274236282, 0.9894820776087637, 0.0, 3.0205018843395015, 0.9774152271927053, 0.0, 3.012847465334333, 0.9471187576209416, 0.0, 2.99469879890815, 0.968755018764371, 0.0, 3.0800687337619914, 0.998175294005409, 0.0, 3.0525663017433704, 1.0531426028613184, 0.0, 3.087853367611956, 0.0, 0.0, 3.7775550480186366, 0.7777578888178847, 3.9338330175603424, 1.252239721054114, 0.0, 4.13462151639925, 1.7502712613862486, 0.0, 4.167181035680716, 1.8745368957762196, 0.0, 4.268447870003715, 2.067548571369257, 0.0, 4.325550387754021, 1.9580456094095395, 0.0, 4.182175496999729, 1.8889519726079909, 0.2263019689509944], [1.7017733328304294, 0.0, 0.2545828532910104, 1.1291995797671555, 0.0, 0.0, 2.100299713588048, 0.0, 0.0, 2.5756626771163518, 1.2684339633873374, 3.6311287088443316, 0.38507433425555926, 0.0, 3.322715103465255, 1.711645922539029, 4.472502558837317, 1.4913493912097668, 4.421340736784552, 2.2303461360197976, 0.4168781086523612, 4.893453273717753, 3.3765490279284975, 0.6348517103361231, 5.231879015674571, 0.7949587282374, 0.8536842979358521, 0.669807954862413, 4.875468291557457], [1.2783746958967204, 0.0, 0.3429138591254014, 0.0, 2.1592073097081714, 0.47185870190698626, 0.0, 2.6103502295438554, 0.0, 0.0, 0.0, 4.943218977465673, 1.765082273614679, 0.0, 4.8876114316359285, 0.0, 0.0, 5.130946473834588, 2.3105871781062084, 0.0, 5.073271451408888, 0.08481553877300814, 0.0, 5.096135507469376, 3.2166001720884214], [0.7955618643732378, 0.47845366212994667, 0.0, 1.6841306879493063, 0.0, 0.3044096643910111, 0.0, 3.13556196674051, 0.0, 0.0, 0.0, 3.0471907241525686, 0.9836725386950117, 0.0, 3.1008979305006172, 0.0, 0.0, 4.707514575372812, 0.897770549120251, 4.699997453665679, 0.13958195598746875, 0.0, 4.820993398152002, 1.0008254736995528, 4.955906447838178, 2.5631777200651293, 3.780542874214105, 0.0, 0.6754989403323332, 4.962626286487632, 1.80956847795035], [1.2485979870267494, 0.4091113878107221, 0.0, 2.2143902338029515, 0.21394944311130926, 2.256291720865812, 0.0, 0.0, 0.0, 0.0, 2.712813282532783, 0.6510712442859579, 1.0631077043752515, 0.0, 2.780834152220482, 0.5692835032484271, 0.2218205135263125, 0.0, 3.0985927708281022, 0.8066910540962962, 0.0, 3.4642854399436813, 0.8938797793937656, 0.0, 3.5976439420102966, 0.0, 0.6606555691248369, 0.9634106262809576, 3.7650924940882935, 0.0, 4.619685720888711, 2.6518736650583143, 1.925815190110666, 4.47878273695703, 2.724539024854843, 2.49432685388498, 4.33648633975436, 2.706355006569237, 1.9569034297753256, 4.283987297948079, 2.6466141444105014, 1.791092141970331, 4.311170093010574, 2.700452764849709, 1.743082381393044, 4.412781454160172, 2.6225613877249345, 1.5832551068970842, 4.394368190020347, 2.60226044376396, 1.4875319430333478, 4.4620245517289945, 2.655708447530937, 1.4775796098911484, 4.641838275136643, 2.62096590735693, 1.3136617970776205, 4.6075860666595485, 2.6067599846837615, 1.0601373569816843], [1.5202538398469887, 0.22780424613130612, 0.0, 1.7974979266421784, 0.0, 1.7290156817741453, 0.0, 1.793029002804693, 0.0, 0.0, 2.392521935330759, 2.4086036114300433, 0.31168194277196304, 0.0, 3.6020766389293573, 0.3101703209484601, 0.0, 2.262881451767572, 0.7099513453629864, 0.0, 2.418824956743163, 0.7289585058280992, 0.0, 2.6096010552604816, 0.8235506421203087, 0.0, 2.6162811249687765, 0.9600560578276104, 0.0, 2.5688486931112373, 0.9670933610936909, 0.0, 2.527348974120747, 0.0, 4.485032302563898, 4.91037897993564, 1.8141813938384606, 5.006594668741046, 1.4318461965178169, 0.6306496947660425, 3.341805889267611, 1.8041989363763484, 0.6683699224113986, 3.235204005749143, 2.1763218179477835, 0.6811695923480463, 3.4007778406275304, 2.3308674395825326, 0.6882386543432499, 3.4030893268648637, 2.1788583435872044, 0.690763206198825, 3.4634636519341004, 2.1698440150854164, 0.691996079900689, 3.600650738397007, 2.2789131353426026, 0.6930935107908291, 3.7929187358484087, 1.9215873190402535], [0.5496671038862393, 0.0, 0.0, 1.9579879631555546, 0.1826475375643908, 0.0, 2.062122106062487, 0.6909358911940633, 0.22611912473799245, 0.0, 2.962423106454363, 0.0, 0.5793239956577647, 0.0, 3.5569403194302875, 0.0, 0.0, 0.28916480847101, 4.942904874655212, 0.0, 2.087223418876081, 0.35569143697348843, 4.132247219707887, 0.4367082364901584, 4.840581408085098, 0.5767811662960974, 5.283348315577829, 1.8856956334845534, 0.6850801545517635, 5.515711157606742, 0.7921518165284926], [2.119514744161305, 0.21428128424839543, 2.1288237494261892, 0.0, 2.541887614310448, 0.28190840053811056, 0.0, 2.645027741118241, 1.1326751053184894, 1.5934299036146522, 0.0740400248133732, 0.21654631730018195, 3.4706737820185256, 0.0, 0.6916778519845103, 0.0, 3.8458715257091716, 0.791889516655133, 0.41504823540661795, 0.0, 3.099827379245893, 0.0, 0.0, 4.170550048863331, 0.0, 0.0, 4.47420764583829, 0.0, 4.875812930721041, 2.512853819083918, 1.0692092017556691, 5.274669608478215, 2.6542306203316035, 1.1404351323887219, 5.252636559906324, 2.8125211530070917, 1.2226128310305238, 5.307508267648044, 2.9217734595798377], [1.748742868245497, 0.0, 0.1260685895767541, 1.5011208754302543, 0.0, 0.6914991122896473, 1.8486992260017447, 0.0, 0.0, 2.7557224382966403, 0.0, 2.484445132402898, 0.6635003679754707, 0.0, 3.8087082513344868, 1.3962561186257998, 0.0, 4.489712809527492, 0.2690822872003709, 1.401711652454797, 0.6684191614196463, 4.561154146048353, 0.2660713249416914, 1.4321247833187918, 0.6761430270574764, 4.543038065271681, 3.038681626485298], [1.877913885123214, 1.0026898876006844, 0.6449525254018076, 0.0, 3.0215240828900316, 0.0, 3.838356159511928, 1.0243063602762938, 0.0, 4.552933431777643, 0.6320558197383336, 0.5575083935626493, 0.0, 5.250494456733422, 3.758820332765864, 0.0, 5.336809053375564, 4.1571556037135196, 0.0, 5.359056041538545, 0.5691476763852104, 0.9403745183993957, 0.2157695809716792, 5.156211215986299, 0.4472587253339666, 4.720354589750031, 0.24150211537672825, 5.086760454813166, 0.661931464853436, 0.0, 5.558965283297752, 1.933095243980299, 1.216187118665119, 1.5096227539447655, 5.609126038953892, 0.9704121729722094, 0.9095270143707138, 1.2901795232082758, 5.66775941245867, 2.5964217631658055], [0.939089521715137, 0.0, 0.0, 0.0, 1.8930513503070954, 0.6986865520422222, 0.0, 4.388594583113937, 0.0, 0.0, 5.1993963553680755, 0.881295174484792, 5.267402531658117, 0.3421994527021742], [1.7564706400777572, 0.0, 0.0, 0.0, 2.1929996620670735, 0.0, 2.8818553918401126, 0.17287734711229752, 0.0, 0.0, 0.0, 3.4687842638977524, 1.4214620749428206], [1.3324458443706382, 0.0, 0.9381108408526876, 2.3683344737862346, 0.5476364555494324, 0.0, 2.9522132892421302, 0.5613784931612298, 0.0, 3.202282850944088, 0.0, 0.0, 2.702726390640537, 0.0, 1.4014959990518703, 0.0, 1.128585972648526, 0.0, 0.0, 4.449382633760864, 3.2259575837503407, 0.6864547108077106, 4.595702209815495, 3.4616331238434834, 0.6929102179065163, 4.609008463427767, 3.434335151723285], [0.6037231424393608, 0.4784781563602149, 0.61064842916644, 0.0, 1.6083748164950387, 0.0, 0.6850683964868033, 0.25091017969395846, 0.33821982271599826, 0.0, 0.825776754869876, 1.9629306286917654, 0.0, 0.472348374157057, 2.797475579872991, 0.9855613110154706, 0.0, 0.45292318907154205, 3.0283826968524195, 0.7751278009066187, 0.0, 2.378890277576683, 0.7033031840538198, 0.0, 2.404338332749906, 0.7280939396682505, 0.0, 2.442113823963072, 0.769076971296512, 0.0, 2.611444256305547, 0.8076651716236116, 0.0, 2.6877538643481045, 0.7878864157168635, 0.14786633644558536, 2.834101342084701, 0.8213182208393848, 0.5462394081647183, 2.9847847131872487, 0.8839587030796703, 1.2655926097724932, 2.9867461485921964, 0.9332095112279778, 1.4118073996574936, 3.0670159099447596, 0.9828517704690694, 0.9060785907928821, 3.097609288039185, 0.9765351770480627, 2.2532880875426122, 3.1167450870176694, 0.9908282384794641, 2.2996332488595663, 3.213350058554446, 0.9816104684826358, 1.9565435256902057, 3.1912646316135236, 0.6659904955519648, 0.0], [2.0005313655982526, 0.6237879798848722, 0.0, 1.6874309626434612, 0.38832025188390545, 0.0, 2.5958072863545443, 0.16668680233528174, 0.6402486815831382, 3.2277761590435436, 0.0, 4.707942508213945, 2.229068591339406, 0.0, 5.215552972694983, 1.9697669144835153], [1.600449158158704, 0.0, 3.6341323603846085, 0.7252424210264874, 0.0, 4.041585578806112, 3.285930181146572, 0.6279832469768536, 4.457494220883082, 0.9473440764348986, 0.6522516410783072, 5.353018807827697, 2.7709843998011894, 0.6886768620545651, 5.68604782940405, 1.6246548125858524], [1.600602124938303, 0.0, 0.0, 0.5872887077943779, 0.0, 0.8747006834143538, 4.063905978831184, 0.0, 0.0, 4.564217805681994, 2.957651768920673, 0.515154295278196, 4.189682621668222, 0.16879157025987568], [1.6321286359219735, 0.0, 0.0, 0.0, 1.7208682875632335, 0.4241273843209227, 2.5466766170726105, 0.0, 0.0, 2.7244168207965105, 1.657731969883382, 0.0, 4.455193925120486, 2.894156107504308], [2.5225953659364997, 0.47788406288286356, 0.6535709220222492, 0.0, 3.26407583690255, 2.036673394439362, 0.5180384962407854, 4.108309798131358, 3.0762933817012157, 0.0, 0.9762140022893292, 4.617189299542685, 2.4496699349454842], [1.8288174192307438, 0.0, 2.144108325379537, 0.0, 0.36398142190922933, 1.664792801551738, 2.416074803022923, 0.0, 2.9493269116159193, 1.4519324085047252, 3.4395215376473365, 0.0, 0.6072243406654525, 0.0, 4.13961299072153, 0.0, 0.0, 4.57102557124879, 0.0, 2.740149203502519, 0.47958240648593065, 4.254214249792995, 0.38117199001577146, 4.6784270425981695, 3.0014788125761815, 0.6898405204249207, 4.836724952206058, 3.3583565445343995], [2.4353883350749337, 0.36068759054780575, 0.0, 2.755882902667563, 0.0, 3.3160820216598963, 0.673226222707112, 0.0, 3.5729143205143643, 0.29545310434150446, 0.0, 4.612830709997059, 0.18230997657605014, 0.30416873854978943, 0.0, 4.91464028563615, 2.1814360790080465, 0.1403934705931339, 5.033678236182029, 2.520992135926935, 0.2604779924523512, 5.166983811213581, 2.688282857725082, 0.3492722319302848, 5.259779907264648, 2.9273097092219884, 0.3993934069713571, 5.239674754679013, 2.7330118034642816, 0.39687788998819495, 5.213685390694393, 2.794041243756846, 0.43936174584377663, 5.191643193375895, 2.8573039381579926, 0.4769416166516627, 5.127450462972748, 4.196516269404242], [1.9267997086840698, 0.0, 0.6487493113790148, 0.4786147083788744, 2.0666493670327353, 0.46279847766479476, 1.33770157160547, 2.5179391594085465, 0.2798159723930457, 0.0, 3.9935031270592445, 1.9695443011496416, 0.0, 4.291198617537827, 2.6687618660587438, 0.771655635418851, 0.9824294427506159, 0.6863558293376982, 4.785706018185339, 1.66239190782121, 0.8512623170664272, 5.427737303298358, 1.6414015092154473], [2.2366421013238704, 0.3601478116614193, 0.0, 2.4314237482724237, 0.43929218935385606, 0.4270399940331159, 0.0, 3.228622261796561, 0.38913171088283516, 0.6810188026061185, 3.2222624359256176, 0.2506373674357649, 0.0, 1.0226864252876233, 0.0, 0.0, 4.9398131870188475, 2.2293628068180578, 0.584283818393575, 5.2085995314567795, 2.243710738190089, 3.250176511379506, 0.3968667006729585, 2.447129664868014, 0.6022527964834905, 1.8452467401087438, 0.6931333245289144, 1.4513818359720347], [2.246559154069866, 0.6741188553725133, 0.0, 3.2138367276018918, 0.23240138951808534, 0.0, 4.309490708944299, 2.1858266555122974, 0.0, 4.188097452651269, 1.5926784278473085], [2.3307613775780953, 0.25834125861922164, 0.1916691731222318, 0.0, 1.0911766919627364, 0.8510123404633205, 0.0, 2.399075491657238, 0.06953813622717475, 0.0, 3.4552152235649114, 0.837948398864951, 0.0, 4.119191175869027, 1.2768256873197557, 0.0, 4.68855838581032, 2.619982799343451], [1.2790698718288978, 0.0, 0.0, 0.0, 1.9061992013952647, 0.0, 2.1437202976334486, 0.3946725890134181, 0.0, 2.955451002766556, 0.4288532364440536, 0.0, 3.176300447891861, 1.3814217700464742, 1.967685773382567, 0.0, 2.4224746826555195, 0.4023089817077987, 2.965174428535005, 0.4160174189583857, 4.633026966184301, 0.9131228603347659, 1.5848552857488514, 0.6903958533899283, 5.348261533954322, 1.5504808525928226, 0.573644497109358], [0.7818821912227931, 0.0, 0.0, 2.3386874986564883, 1.0743706286590726, 1.5012332970582345, 3.6012011056844004, 0.0, 3.8636434381577613, 0.26398322769175675, 3.943130125173634, 3.888634393350985, 0.671754151922697, 4.439243518589816, 4.010769055705445], [2.3035665093053996, 0.7251343139090056, 0.9233103093999613, 0.0, 3.063516321010899, 0.0, 1.6512272082515644, 3.4888978346976116, 0.0, 0.0, 4.4515466910932355, 2.3020874975523924, 0.0, 5.005888887977913, 4.21372562750584, 2.0248827509813414, 0.6784090586054546, 5.468594551123765, 4.285494364830458, 0.6926305290829656, 5.529291134146662, 4.250475389497592, 1.740324851120424, 0.6395807736089405, 5.638155903526021, 4.174730059830264], [1.333360869864739, 0.6094927179068917, 0.9620389011387278, 0.0, 0.8727638919355022, 0.9541636579573404, 0.0, 3.1632756295923463, 1.8219439207659827, 1.0828378351129364, 3.545646852478794, 1.2177189324715447, 0.24843029025241076, 3.3371835361860125, 2.4032051378461414, 0.3785745879669864, 3.365228290744002, 0.3318768728776942, 1.8782983881171165, 3.1553573085751223, 0.3805071652972494, 0.0, 4.3398544621421635, 1.0239011523626151, 1.5932384199345466, 4.4851214862457445, 0.7845281538601905, 1.815482922685768, 4.737080831217839, 0.9182846258819563, 2.223819004191326, 5.288830939260189, 0.6792421979222707, 4.946911822170187, 2.8481399130288905, 3.569313381898539, 5.707350477678833, 2.229138256834715, 3.6552420746911576, 6.152236482815496, 1.8834100004902568, 3.649769172177548, 6.333700848332849, 1.8711940028198466], [0.8314673063608004, 0.0, 0.0, 2.2006223873094544, 1.1813409719228098, 0.0, 3.149519136145989, 0.4028447870151376, 0.0, 3.6563401645947153, 1.5033229096075957, 0.4334400906008259, 4.360799367607696, 2.1000236074989833, 0.6620071778888826, 4.693681773745424, 2.292444089800468, 0.690470132145979, 4.8338314277032515, 2.4413127844407514, 0.6889968122691307, 4.909371423615744, 2.504945197508256, 0.684160339706186, 4.940852998577607, 2.589067710850558, 0.6876422639317585, 4.842098487668515, 2.6072290995592247, 0.6915256859022704, 4.864762050989005, 2.634964345288202], [1.0585169441849012, 0.0, 0.5441696094564498, 1.8348640330256087, 0.6744332937937102, 0.8767495162644716, 0.0, 2.7365207869543955, 0.30702679326373916, 0.0, 3.3192814238255903, 0.5727215565097412, 0.0, 4.969649022805852, 3.4046044202915877, 0.668311212772531, 5.11286073171245, 4.076878342639023], [1.4740713818035076, 0.12526726385555328, 0.0, 2.6564564883507775, 0.9818997946734231, 0.0, 4.207760119041802, 0.5407545228502092, 0.0, 4.7753581598902075, 1.2859732621973472, 2.8372288846745244, 0.6871060235214874, 5.253500676424517, 1.418350779700049], [1.236642359521226, 0.0, 1.0552320287081034, 0.0, 0.3560536953424318, 0.28953970415818536, 0.0, 1.8568728758355846, 0.39895121780390136, 0.0, 1.4250053443741497, 0.5791795791431842, 0.0, 1.9856959282461635, 0.0, 0.0, 1.5562380708864654, 0.9517295927775544, 0.0, 1.9577884197485762, 1.1578800115740902, 0.0, 2.036368664984596, 1.251986748448777, 0.0, 2.062259655525451, 1.71199538069233, 0.0, 2.0722281306900996, 1.1328026639111528, 0.0, 1.9970289351344461, 1.3189249329800006, 0.0, 1.908943785770487, 1.057026726206326, 0.0, 1.9051820486103794, 0.9019395918719247, 0.0, 1.9426373489063573, 1.5957692099839629, 0.0, 1.8910514276081083, 2.3737227713901943, 0.0, 1.994271428252279, 2.696307545975651, 0.0, 2.043958361633919, 2.787229597246743, 0.0, 2.106171558473504, 3.150851265935463, 0.0, 2.22373540432863, 2.9397803275711207, 0.0, 2.1791311093354193, 3.1773931147911516], [1.7578627153765571, 1.291424110911666, 1.288801284619785, 0.14553397660057216, 2.1604669779533436, 0.5671138639750316, 0.0, 3.0916879035074003, 0.49987395475327634, 0.0, 3.896551441630727, 2.2599260573424695], [1.2806174303990692, 0.0, 0.0, 0.33444018821888866, 1.7753734135381953, 0.0, 0.0, 0.8776532315201012, 1.0164014461793687, 0.0, 3.520420166304463, 0.0, 1.195401033384523, 0.0, 3.6446867462140458, 1.036502706871057, 0.0, 4.506173596436391, 0.0, 1.4927829364908096], [2.0913830246108316, 0.5379889667647408, 0.0, 2.9409308457582606, 0.7770955931515435, 1.0241984848558205, 0.0, 3.7089898422747263, 1.9187222533960868, 0.47437307128040146, 0.4891349198671576, 2.123143944359278, 0.22105997573878527, 0.0, 3.9925276596399133, 0.15639208726720646], [1.6643002503715643, 1.0498216157365152, 0.6791521795322455, 0.0, 1.969517581325881, 0.0, 0.6107854353537389, 4.142297742355479, 1.3821650303943163, 0.5076399549932697, 4.475815077982267, 0.0, 0.759780765808159, 5.17737451482405, 2.1777644429573066, 0.30374292361049127, 4.837800617985377, 2.615468449059905, 0.452455875021057, 4.7694843358306045, 2.6401782781264442, 0.5514438811165338, 4.7099533154506, 2.657339594873943, 0.5446726234692469, 4.549019552776954, 2.632160569499046, 0.5265525971497694, 4.38695020027475, 2.6800662538543425, 0.6202290858432777, 4.244633779263573, 2.740817807945504, 0.7079324397370965, 4.174251181935584, 2.747027260679515, 0.7529653071868408, 4.2115889939469096, 2.757554746370337, 0.8063813613780285, 4.257514600862932, 2.7640922472628193, 0.8564081747513026, 4.130727832467577, 2.7949972752529018, 0.9083535012665114, 4.11635345591244, 2.6668957308561225, 0.8453940703546573, 4.120945147930902, 2.6987735284358587, 0.8663919832638353, 4.092432556266438, 2.7637995077069775, 0.6764237734529696, 4.197403235517322, 2.7749185799998615, 0.617767866776135, 4.22206533203276, 2.7329848865549753], [1.4270536697790286, 0.0, 0.6249699768674746, 0.0, 1.5386650866942342, 0.29831337323918555, 0.0, 4.843639686044839, 2.801212010083159, 0.5678593480639971, 5.410825659146525, 3.3606704994613423, 3.258207431384396, 0.6907580192174295, 5.17524246063961, 1.6390702652764766, 4.192353293823033], [2.581416605501655, 0.06522054248923688, 0.3152894461926189, 2.2828218635060495, 0.4766037619274217, 0.0, 2.9837868937320935, 0.7506116321546177, 0.0, 2.971935328412375, 1.0723250738125563, 0.0, 3.3499293561769976, 1.2028296684149102, 0.0, 3.486214359305439, 1.3215426496483746, 0.0, 3.554388267399332, 1.7868695766409113, 0.0, 3.3733970049781328, 1.891231736203166, 0.0, 3.286752267570574, 1.3877582567043172, 0.0, 3.3992203941516386, 2.6885964586105, 0.0, 3.2197510729913623, 2.43791068403067, 0.0, 3.224521617313811, 2.0080738282589685, 0.0, 3.264706718694071, 2.1406122080322527, 0.0, 3.353831831857241, 2.4379009714516804, 0.0, 3.44216347114103, 2.8772076274909417, 0.0, 3.5429636348785962, 2.9093118854328153, 0.0, 3.578804708081593, 3.06699158997563, 0.0, 3.6319843971947896, 3.2695410573094703, 0.0, 3.7581841026295626, 2.5224630920796045, 0.0, 3.75546685313096, 2.197177672099592, 0.0], [1.4358558991107084, 0.574741312981022, 2.0910199609757036, 0.0, 0.5951957838487949, 0.0, 3.734228028338663, 1.7063387271759576, 0.6307587905682857, 4.950729607534315, 1.8575855980591511], [1.1460649248267005, 0.6234781129623588, 0.0, 1.4563174027823151, 1.1954214291845853, 0.0, 0.8574390544056478, 0.0, 0.0, 1.9101948823839574, 0.0, 0.0, 0.0, 3.634148216228083, 1.7204580993874772, 0.45255585500225154, 4.712072317974452, 2.5898133400243832], [1.2831378542175467, 0.0, 0.8197296559179397, 2.0843620832808747, 0.0, 0.0, 0.0, 3.533858088696719, 0.4248071435423585, 0.0, 3.970910377606496, 1.90128490831654, 0.0, 4.312225638705745, 0.0, 1.6497141341439403], [0.19872650974026773, 0.2739975994361547, 0.0, 1.0026105662912197, 1.0568103508726348, 2.8877881256739717, 0.5455670186173857, 4.396782711057773, 0.0, 5.115216994677004, 3.38144528019136, 2.6342633562657887, 5.35450314399864, 3.641630794878317, 0.6924284455206582, 5.376221591031114, 3.144434701695819], [0.2541120067923736, 0.64412241273056, 0.0, 1.6035496834981382, 0.5085656306468158, 1.0093785288854873, 0.8771866081680626, 0.9326613084516051, 2.998494579056346, 0.6238416140144658, 0.0, 4.017339128850782, 2.219893284900402, 0.0, 4.252526847259752, 0.5038821706516161], [2.0473274690165466, 1.3832074740522937, 0.0, 3.521826113998841, 1.0906160104458813, 0.6930434416937703, 3.8979570434283244, 1.5959436879741324, 0.25630133119938975, 4.161800506904642, 1.6295112488083527, 0.0, 4.29744667369338, 1.6528151999432825, 0.0, 4.265041587774006, 1.7088172260043228, 0.0, 4.214292633583996, 1.5539331322863825, 0.0, 3.879065181230038, 0.0, 4.698500583079106, 0.7315903221710657, 4.700138880439656, 0.0, 5.309383445222894, 4.0107455943117785, 1.0560122426508896, 0.6842064364181676, 5.675139355132416, 3.990548758654708, 1.4220257952838298], [1.8065644484489762, 1.074476102540069, 0.363908912206464, 0.7365390144678639, 0.0, 2.6091269496191747, 1.0481393529997187, 0.0, 2.891332023640904, 0.5156178048141045, 0.8310915024038807, 0.22865800652195745, 3.895714824297264, 1.7173623882708258, 0.8374482737631375, 0.0, 4.15458404618631, 1.931859640063121, 0.7632253100553891, 0.0, 4.287029528496695, 1.9058071735156326, 0.6335029218938174, 0.14259154858302062, 4.350915288684206, 2.0243854040680045, 0.6462710789859009, 0.4585969835650906, 4.554165842462087, 1.754019383856328, 0.42567591386319076, 4.687972167545323, 2.5065634948720024, 0.7195339253825782, 4.613355362593378, 2.3072276137054186, 0.8712909786932098, 4.611190998149398, 2.219297512965342, 0.8621004951374309, 4.608730824405511, 2.3280103971582466, 0.9174547226771155, 4.551094693241945, 2.581165071394755, 1.0232044493506351, 4.656257963548424, 2.4112781819206135, 1.0426229051559484, 4.653075600225726, 2.5898296619387984, 0.9933164604311551, 4.7356614350430695, 2.6406669730589436, 1.0122226348422902, 4.833652412419574, 2.1933899036783213, 0.555936999547541, 4.938016609679894, 2.1999215742118663], [1.6443483534081205, 0.9823784204302088, 0.0, 1.9943343529973534, 0.29467105718971065, 0.0, 1.216675759827569, 0.0, 0.0, 2.542961238652141, 1.4080100295025837, 1.4455776681371884, 0.634680230367647, 0.0, 4.541451977508011, 0.0, 0.29000007702822794, 5.086207363993105, 3.3181769033944124], [1.5677958843446973, 0.0, 1.1790752136547797, 0.0, 0.9621017870917614, 0.0, 1.2732313055185027, 0.0, 0.0, 0.0, 3.1563674442023086, 0.0, 1.661906005602432, 0.6852502161000846, 4.508678204109405, 0.7494397161102423], [0.8496086694006394, 0.5174035559590704, 0.1676690095331065, 2.416395172732009, 0.7786599372238108, 3.33559068099691, 0.0, 3.6291756140772096, 0.0, 0.0, 4.376589534091652, 2.6657637276653077, 0.6708226190524309, 4.608733281607005, 2.253682994398232], [0.6962527181154328, 0.0, 0.37321078382820494, 0.22121261753045846, 0.0, 0.0, 3.0202433370497723, 0.0, 0.0, 1.7646940352158071, 0.0, 0.5712648681029434, 0.659029020509807, 0.0, 4.1233000733728336, 0.0, 0.5226251843139168, 0.5555281703238657, 0.0, 4.674776119446428, 0.0, 0.5316122044595808, 5.284550673253426, 4.056410658411128, 2.5070978622146924, 1.5553147002228118, 0.6203180414314629, 5.084335073044471, 4.977981307849604, 2.1940327649846942, 1.005656553181464, 0.6273332385742219, 5.083564795596364, 4.9534756530861515], [1.019207176986828, 0.0, 0.35209921364254415, 0.3636225773982153, 2.93992823384709, 0.9321806490207292, 0.47287404039873715, 4.4713740904887915, 0.0, 3.936274472971057, 0.0, 5.589134101847098, 0.9140187376451072, 0.5194923315429374, 0.0, 5.428026578153294, 0.0, 5.436874280335575], [1.543044984866883, 0.48610388348550126, 0.0, 2.7875198514194515, 0.11092529988482386, 0.5235572922445602, 0.7661024139333414, 0.4167666160111311, 0.0, 3.3811303264459758, 0.0, 0.565938888931927, 0.25419307892379167, 3.7023541551476264, 0.35628333009002433, 0.0, 4.060911462910849, 1.440710890224973, 4.899871297879776, 1.568630156060282, 5.328669984223375, 1.587011150285663, 5.494429489301381, 1.6075676521306115, 5.590348166796861, 2.0071545948240423, 5.655865392991298, 1.4365847289282048, 0.0, 5.4217123272088, 3.7809956687085235], [1.8417989263291699, 0.15918560634161666, 1.7034603282370955, 0.0, 0.0, 2.9741688229175, 0.21838795835888813, 0.0, 3.5186115376907265, 0.0, 0.0, 4.397529904026617, 0.0, 0.0, 4.644225221788403, 0.08865836536140846, 0.0, 4.677688892992765, 0.14697146736166197, 0.0, 4.758591783148388, 0.3593411406169081, 0.0, 4.867397792712441, 0.5704201197511413, 0.0, 4.6187551019371345, 0.6168389145996827, 0.0, 4.60078395820325, 0.8378414123461101, 0.0, 4.490018587554024, 0.8164284107454584, 0.0, 4.403369741960966, 0.7964967140587051, 0.0, 4.430509952540033, 0.808417152073911, 0.0, 4.405797943668288, 1.4755212331711638, 0.0, 4.471633061858412, 1.4185530172720018, 0.0, 4.590929157029759, 1.1230571529747908, 0.0, 4.4420210732815075, 1.1179220283431144, 0.0, 4.433413789824095, 0.9536029520029584, 0.0, 4.482807049649783, 0.6635214602956051, 0.0, 4.598561182356843], [0.9847935661190804, 0.0, 0.0, 1.5154062330872362, 0.0, 0.7049048021473406, 0.0, 2.875724736559106, 0.0, 0.0, 3.5680249194493765, 0.6875379499840609, 0.0, 3.925616603945247, 1.6767401083111573, 0.6341429323394625, 4.580433718162658, 1.804494129132897, 0.6807916271089475, 4.730537804080936, 1.8446081749856653, 0.686149248749786, 4.83880508074441, 0.0], [1.1338782527605098, 0.0, 0.0, 3.647031158891955, 0.6669280615928808, 0.835209553056242, 4.982731833532381, 2.4524909058506856, 0.0, 0.0, 5.425447957607343, 0.167793124170569, 0.2551770886458669, 5.501452954642848, 2.4844349164930466, 0.0, 0.0, 5.564804202606975, 0.9514158531886667, 0.6919681620492224, 5.995973400876736, 2.167869087913883], [1.4639503625134798, 0.0, 0.0, 1.5774437561977606, 0.0, 0.0, 2.5169705213902613, 0.0, 0.6253382885805276, 0.6909428979764776, 0.0, 3.1857016277761696, 1.287468433459493, 2.274874770627201, 0.4402855961662591, 4.850881124520057, 3.0076512940356577, 5.101377335134778, 0.38480030998569636, 4.929049658804012, 2.9734912981401176, 5.292259986094353, 0.47636670599010267, 5.0790467683313425, 3.2876996445464406, 5.504618728551065, 0.48847177150797816, 5.138819797979246, 3.4713405183097312, 5.711716989805921, 0.7419160285088835, 5.176242624664571, 3.71454617364667, 2.703967663635787], [1.2682464791810555, 0.7386520086100977, 0.9280863566313865, 1.1457517426609953, 1.3544028206653138, 0.0, 2.3273405323889675, 0.0, 0.0, 2.841090851747478, 0.6696157345870016, 0.5730468876923169, 0.0, 2.8737654378889688, 0.0, 0.0, 0.0, 3.9317397273942114, 0.8256355729133755, 0.0, 4.481487561270264, 2.1410360891826854, 0.5364537906186617, 5.0851291787134265, 2.660323952309869, 0.6906024020507442, 4.960116794680423, 1.7895847676120338], [1.319838976369633, 0.0, 0.0, 0.9511957416806474, 0.0, 0.0, 2.832365009520714, 0.0, 0.26074499141623175, 1.0958645767997877, 4.213341618458899, 3.773556864498872], [1.163083237626559, 0.0, 0.9953835048201316, 0.9076420552182136, 0.6610667583527404, 0.0, 0.29748216734171584, 0.0, 0.0, 3.3358141311657725, 0.3150082399169267, 3.765070383412073, 0.0, 4.110131380282051, 3.207105391350988, 0.0, 4.543430508559416, 4.401405158115152, 1.2044697263796451], [2.1845228965146255, 1.9087917370653147, 0.0, 1.2591802881105392, 0.6858773791420762, 0.0, 1.7619277495512773, 0.18567725227621876, 0.0, 3.101459771704248, 0.16660125836533524, 0.0, 3.5436869544349032, 1.6205157891352808, 0.676797860258782, 3.530600286229644, 0.0], [1.7352084324521775, 0.4579342451816505, 0.0, 1.0960572041287056, 0.0, 0.0, 2.1783089823338675, 0.0, 2.357165519666015, 1.3353436178703733, 0.0, 3.582139374268314, 0.0, 0.0, 0.0, 4.40569952070901, 0.0, 0.0, 0.0, 4.56749272119037, 0.0, 0.0, 0.0, 4.544492961153252, 0.47867163581663374, 0.0, 4.683498980822031, 0.0, 0.0, 0.2571934529781422, 4.534012178153408, 0.0, 0.0, 0.2941874148670341, 4.5621506184517004, 0.0, 0.0, 0.6028997743309503, 4.645715327608202, 0.0, 0.0, 0.806583772090608, 4.615304991120462, 0.0, 0.0, 1.136897740213973, 4.7192857367541565, 2.2272488408686635, 2.590515602072738, 4.821247356495164, 2.4537276270664283, 2.543292241932214, 4.890744790040515, 2.5171446698733217, 2.1605755991847015, 4.872385658815389, 2.5987285676453804, 1.9511342594857395, 4.830946927148018, 2.705576606704417], [1.5483028620128965, 0.0, 0.0, 2.1811979048452894, 0.0, 0.6852518637945733, 0.0, 3.113873391567502, 0.0, 0.10884437189632022, 3.9861214567086503, 1.1322124683430346, 0.0, 4.064001001238853, 0.1118426278291417], [2.063513778795362, 0.9877725540058726, 0.0, 1.9146080339272973, 0.0, 0.0, 2.7900058091004096, 1.7711009779158555, 0.6184547138185899, 4.27906321029712, 2.226382232363176], [1.2156004757422672, 0.0, 1.4830702878739703, 1.6621417120492157, 0.0, 3.738853721199273, 2.702922314849684], [1.5868225452247244, 0.1458167615395098, 0.0, 1.348335671060806, 0.0, 3.980394626334125, 1.063779222274793, 5.339279507830319, 0.8663358911459503, 0.15047695553016743, 5.661330173428241, 1.3324892048556105], [1.0246139766153832, 0.0, 0.0, 1.2811575411261595, 0.3130449327532176, 0.0, 1.4950536301775958, 0.0, 0.0, 1.6280400220451394, 0.2526919703982107, 0.0, 2.753253696649317, 0.26779652190527126, 0.0, 4.647203811958916, 0.7075778745832141, 0.5026433624640311, 4.936270484839191, 0.0, 4.093478287355695, 0.0, 4.080748235504221, 0.0, 4.333573542471388, 0.0, 0.0, 5.026802984539157, 0.0, 4.930634800392817, 0.0, 4.9956069093335485, 0.0, 5.0252793337313735, 0.0, 4.971618115805886, 0.0, 4.99237094130085, 0.0, 5.096867812686708, 0.0681538907396981, 0.0, 5.173198674193953, 0.0, 5.213262323575563, 0.0, 5.3562486103620905, 0.0, 5.406855833324439, 0.0, 5.4125271481650605, 0.0, 5.520595100185474, 0.0, 5.616730961298129, 0.0, 5.612213619765949, 0.0, 5.581867880837421, 0.0], [1.7293695633663013, 0.0, 0.8371329570018511, 0.0, 0.9462264241866878, 0.23103826712189043, 0.8248931505114512, 0.0, 1.9177563351642801, 0.0, 0.3029667179392863, 0.8980408658515722, 0.0, 2.545373521310015, 0.0, 0.0, 1.568217164233082, 0.0, 0.0, 3.875323003114167, 0.0, 0.3000378294080883, 4.224048398787123, 1.2932895916105884], [0.6362642142900843, 0.0, 0.0, 0.0, 3.1025884154293566, 0.2322714884763961, 0.0, 4.178896173680975, 0.0, 1.6797084573031638, 0.6676641788766016, 0.0, 1.6796745925585632, 0.0, 5.201298910341014, 0.17123536660638705, 0.7203751808836689, 3.724925154060072, 2.357509184016704, 1.0331327667000547], [1.21028100052733, 0.0, 0.0, 0.0, 0.6822970356460613, 0.0, 0.0, 0.0, 3.2520656632255096, 0.0, 1.0959255303932691, 0.0, 4.673467815223254, 2.738775436895045, 0.21677079461697518, 2.0219793194820954]], "context_lines": ["enhancing product recommender systems on sparse binary data . commercial recommender systems use various data mining techniques to make appropriate recommendations to users during online , real time sessions . published algorithms focus more on the discrete user ratings instead of binary results , which hampers their predictive capabilities when usage data is sparse . the system proposed in this paper , e <unk> , is an association mining based recommender tool designed to overcome these problems through a two phase approach . in the first phase , batches of customer historical data are analyzed through association mining in order to determine the association rules for the second phase . during the second phase , a scoring algorithm is used to rank the recommendations online for the customer . the second phase differs from the traditional approach and an empirical comparison between the methods used in e <unk> and other collaborative filtering methods including dependency networks , item based , and association mining is provided in this paper . this comparison evaluates the algorithms used in each of the above methods using two internal customer datasets and a benchmark dataset . the results of this comparison clearly show that e <unk> performs well compared to dependency networks and association mining . in general , item based algorithms with cosine similarity measures have the best performance .", "a unifying semantics for time and events . we give a formal semantics for a highly expressive language for representing temporal relationships and events . this language , which we call versatile event logic ( vel ) , provides a general temporal ontology and semantics encompassing many other representations . the system incorporates a number of features that have not been widely employed in ai formalisms . it has the ability to describe alternative histories using a modal operator . it provides a semantics for individuals that explicitly models their identity through time and across alternative possible histories and enables one to distinguish between necessary and extensional identity of individuals . in virtue of its treatment of individuals and count nouns , the formalism offers a solution to certain puzzles of identity , which arise when individuals are described in different ways . we propose that vel can be used as a foundational interlingua for comparing and interfacing different ai languages and illustrate this by considering how situation calculus and event calculus can be represented within vel .", "representing the zoo world and the traffic world in the language of the causal calculator . the work described in this report is motivated by the desire to test the expressive possibilities of action language c . the causal calculator ( ccalc ) is a system that answers queries about action domains described in a fragment of that language . the zoo world and the traffic world have been proposed by erik <unk> in his logic modelling workshop an environment for communicating axiomatizations of action domains of nontrivial size . the zoo world consists of several cages and the exterior , gates between them , and animals of several species , including humans . actions in this domain include moving within and between cages , opening and closing gates , and mounting and riding animals . the traffic world includes vehicles moving continuously between road crossings subject to a number of restrictions , such as speed limits and keeping a fixed safety distance away from other vehicles on the road . we show how to represent the two domains in the input language of ccalc , and how to use ccalc to test these representations .", "logic based subsumption architecture . we describe a logic based ai architecture based on brooks ' subsumption architecture . in this architecture , we axiomatize different layers of control in first order logic ( fol ) and use independent theorem provers to derive each layer ' s outputs given its inputs . we implement the subsumption of lower layers by higher layers using nonmonotonic reasoning principles . in particular , we use circumscription to make default assumptions in lower layers , and nonmonotonically retract those assumptions when higher layers draw new conclusions . we also give formal semantics to our approach . finally , we describe layers designed for the task of robot control and a system that we have implemented that uses this architecture for the control of a nomad <digit> mobile robot . our system combines the virtues of using the represent and reason paradigm and the behavioral decomposition paradigm . it allows multiple goals to be serviced simultaneously and reactively . it also allows high level tasks and is tolerant to different changes and elaborations of its knowledge in runtime . finally , it allows us to give more commonsense knowledge to robots . we report on several experiments that empirically show the feasibility of using fully expressive fol theorem provers for robot control with our architecture and the benefits claimed above .", "excluding any graph as a minor allows a low tree width <digit> coloring . this article proves the conjecture of thomas that , for every graph g , there is an integer k such that every graph with no minor isomorphic to g has a <digit> coloring of either its vertices or its edges where each color induces a graph of tree <unk> at most k . some generalizations are also proved .", "a model of bgp routing for network engineering . the performance of ip networks depends on a wide variety of dynamic conditions . traffic shifts , equipment failures , planned maintenance , and topology changes in other parts of the internet can all degrade performance . to maintain good performance , network operators must continually reconfigure the routing protocols . operators configure bgp to control how traffic flows to neighboring autonomous systems ( ases ) , as well as how traffic traverses their networks . however , because bgp route selection is distributed , indirectly controlled by configurable policies , and influenced by complex interactions with intradomain routing protocols , operators can not predict how a particular bgp configuration would behave in practice . to avoid inadvertently degrading network performance , operators need to evaluate the effects of configuration changes before deploying them on a live network . we propose an algorithm that computes the outcome of the bgp route selection process for each router in a single as , given only a static snapshot of the network state , without simulating the complex details of bgp message passing . we describe a bgp emulator based on this algorithm the emulator exploits the unique characteristics of routing data to reduce computational overhead . using data from a large isp , we show that the emulator correctly computes bgp routing decisions and has a running time that is acceptable for many tasks , such as traffic engineering and capacity planning .", "collective mining of bayesian networks from distributed heterogeneous data . we present a collective approach to learning a bayesian network from distributed heterogeneous data . in this approach , we first learn a local bayesian network at each site using the local data . then each site identifies the observations that are most likely to be evidence of coupling between local and non local variables and transmits a subset of these observations to a central site . another bayesian network is learnt at the central site using the data transmitted from the local site . the local and central bayesian networks are combined to obtain a collective bayesian network , which models the entire data . experimental results and theoretical justification that demonstrate the feasibility of our approach are presented .", "automatic performance evaluation of web search engines . measuring the information retrieval effectiveness of world wide web search engines is costly because of human relevance judgments involved . however , both for business enterprises and people it is important to know the most effective web search engines , since such search engines help their users find higher number of relevant web pages with less effort . furthermore , this information can be used for several practical purposes . in this study we introduce automatic web search engine evaluation method as an efficient and effective assessment tool of such systems . the experiments based on eight web search engines , <digit> queries , and binary user relevance judgments show that our method provides results consistent with human based evaluations . it is shown that the observed consistencies are statistically significant . this indicates that the new method can be successfully used in the evaluation of web search engines .", "exact algorithms for finding minimum transversals in rank <digit> hypergraphs . we present two algorithms for the problem of finding a minimum transversal in a hypergraph of rank <digit> , also known as the <digit> hitting set problem . this problem is a natural extension of the vertex cover problem for ordinary graphs . the first algorithm runs in time o ( <digit> . <unk> ) for a hypergraph with n vertices , and needs polynomial space . the second algorithm uses exponential space and runs in time o ( <digit> . <unk> ) .", "establishing wireless conference calls under delay constraints . a prevailing feature of mobile telephony systems is that the cell where a mobile user is located may be unknown . therefore , when the system is to establish a call between users , it may need to search , or page , all the cells that it suspects the users are located in , to find the cells where the users currently reside . the search consumes expensive wireless links and so it is desirable to develop search techniques that page as few cells as possible . we consider cellular systems with c cells and m mobile users roaming among the cells . the location of the users is uncertain as given by m probability distribution vectors . whenever the system needs to find specific users , it conducts a search operation lasting some number of rounds ( the delay constraint ) . in each round , the system may check an arbitrary subset of cells to see which users are located there . in this setting the problem of finding one user with minimum expected number of cells searched is known to be solved optimally in polynomial time . in this paper we address the problem of finding several users with the same optimization goal . this task is motivated by the problem of establishing a conference call between mobile users . we first show that the problem is np hard . then we prove that a natural heuristic is an e ( e <digit> ) approximation solution .", "the simplest examples where the simplex method cycles and conditions where expand fails to prevent cycling . this paper introduces a class of linear programming examples that cause the simplex method to cycle and that are the simplest possible examples showing this behaviour . the structure of examples from this class repeats after two iterations . cycling is shown to occur for both the most negative reduced cost and steepest edge column selection criteria . in addition it is shown that the expand anti cycling procedure of gill et al . is not guaranteed to prevent cycling .", "an experimental evaluation of continuous testing during development . continuous testing uses excess cycles on a developer ' s workstation to continuously run regression tests in the background , providing rapid feedback about test failures as source code is edited . it is intended to reduce the time and energy required to keep code well tested and prevent regression errors from persisting uncaught for long periods of time . this paper reports on a controlled human experiment to evaluate whether students using continuous testing are more successful in completing programming assignments . we also summarize users ' subjective impressions and discuss why the results may generalize . the experiment indicates that the tool has a statistically significant effect on success in completing a programming task , but no such effect on time worked . participants using continuous testing were three times more likely to complete the task before the deadline than those without . participants using continuous compilation were twice as likely to complete the task , providing empirical support to a common feature in modern development environments . most participants found continuous testing to be useful and believed that it helped them write better code faster , and <digit> % would recommend the tool to others . the participants did not find the tool distracting , and intuitively developed ways of incorporating the feedback into their workflow .", "test input generation with java pathfinder . we show how model checking and symbolic execution can be used to generate test inputs to achieve structural coverage of code that manipulates complex data structures . we focus on obtaining branch coverage during unit testing of some of the core methods of the red black tree implementation in the java treemap library , using the java pathfinder model checker . three different test generation techniques will be introduced and compared , namely , straight model checking of the code , model checking used in a black box fashion to generate all inputs up to a fixed size , and lastly , model checking used during white box test input generation . the main contribution of this work is to show how efficient white box test input generation can be done for code manipulating complex data , taking into account complex method preconditions .", "improving the adaptability of multi mode systems via program steering . a multi mode software system contains several distinct modes of operation and a controller for deciding when to switch between modes . even when developers rigorously test a multi mode system before deployment , they can not foresee and test for every possible usage scenario . as a result , unexpected situations in which the program fails or underperforms ( for example , by choosing a non optimal mode ) may arise . this research aims to mitigate such problems by creating a new mode selector that examines the current situation , then chooses a mode that has been successful in the past , in situations like the current one . the technique , called program steering , creates a new mode selector via machine learning from good behavior in testing or in successful operation . such a strategy , which generalizes the knowledge that a programmer has built into the system , may select an appropriate mode even when the original controller can not . we have performed experiments on robot control programs written in a month long programming competition . augmenting these programs via our program steering technique had a substantial positive effect on their performance in new environments .", "model checking xml manipulating software . the use of xml as the de facto data exchange standard has allowed integration of heterogeneous web based software systems regardless of implementation platforms and programming languages . on the other hand , the rich tree structured data representation , and the expressive xml query languages ( such as xpath ) make formal specification and verification of software systems that manipulate xml data a challenge . in this paper , we present our initial efforts in automated verification of xml data manipulation operations using the spin model checker . we present algorithms for translating ( bounded ) xml data and xpath expressions to promela , the input language of spin . the techniques presented in this paper constitute the basis of our web service analysis tool ( wsat ) which verifies ltl properties of composite web services .", "optimal time bounds for approximate clustering . clustering is a fundamental problem in unsupervised learning , and has been studied widely both as a problem of learning mixture models and as an optimization problem . in this paper , we study clustering with respect to the k median objective function , a natural formulation of clustering in which we attempt to minimize the average distance to cluster centers . one of the main contributions of this paper is a simple but powerful sampling technique that we call successive sampling that could be of independent interest . we show that our sampling procedure can rapidly identify a small set of points ( of size just o ( k log frac n k ) ) that summarize the input points for the purpose of clustering . using successive sampling , we develop an algorithm for the k median problem that runs in o ( nk ) time for a wide range of values of k and is guaranteed , with high probability , to return a solution with cost at most a constant factor times optimal . we also establish a lower bound of ( nk ) on any randomized constant factor approximation algorithm for the k median problem that succeeds with even a negligible ( say frac <digit> <digit> ) probability . the best previous upper bound for the problem was ( nk ) , where the notation hides polylogarithmic factors in n and k . the best previous lower bound of ( nk ) applied only to deterministic k median algorithms . while we focus our presentation on the k median objective , all our upper bounds are valid for the k means objective as well . in this context our algorithm compares favorably to the widely used k means heuristic , which requires o ( nk ) time for just one iteration and provides no useful approximation guarantees .", "correlation clustering . we consider the following clustering problem we have a complete graph on n vertices ( items ) , where each edge ( u , v ) is labeled either or depending on whether u and v have been deemed to be similar or different . the goal is to produce a partition of the vertices ( a clustering ) that agrees as much as possible with the edge labels . that is , we want a clustering that maximizes the number of edges within clusters , plus the number of edges between clusters ( equivalently , minimizes the number of disagreements the number of edges inside clusters plus the number of edges between clusters ) . this formulation is motivated from a document clustering problem in which one has a pairwise similarity function f learned from past data , and the goal is to partition the current set of documents in a way that correlates with f as much as possible semi it can also be viewed as a kind of agnostic learning problem . an interesting feature of this clustering formulation is that one does not need to specify the number of clusters k as a separate parameter , as in measures such as k median or min sum or min max clustering . instead , in our formulation , the optimal number of clusters could be any value between <digit> and n , depending on the edge labels . we look at approximation algorithms for both minimizing disagreements and for maximizing agreements . for minimizing disagreements , we give a constant factor approximation . for maximizing agreements we give a ptas , building on ideas of goldreich , goldwasser , and ron ( <digit> ) and de la veg ( <digit> ) . we also show how to extend some of these results to graphs with edge labels in <digit> , <digit> , and give some results for the case of random noise .", "subquadratic approximation algorithms for clustering problems in high dimensional spaces . one of the central problems in information retrieval , data mining , computational biology , statistical analysis , computer vision , geographic analysis , pattern recognition , distributed protocols is the question of classification of data according to some clustering rule . often the data is noisy and even approximate classification is of extreme importance . the difficulty of such classification stems from the fact that usually the data has many incomparable attributes , and often results in the question of clustering problems in high dimensional spaces . since they require measuring distance between every pair of data points , standard algorithms for computing the exact clustering solutions use quadratic or nearly quadratic running time semi i . e . , o ( dn2 ( d ) ) time where n is the number of data points , d is the dimension of the space and ( d ) approaches <digit> as d grows . in this paper , we show ( for three fairly natural clustering rules ) that computing an approximate solution can be done much more efficiently . more specifically , for agglomerative clustering ( used , for example , in the alta vista search engine ) , for the clustering defined by sparse partitions , and for a clustering based on minimum spanning trees we derive randomized ( <digit> approximation algorithms with running times ( d2 n2 ) where > <digit> depends only on the approximation parameter epsi and is independent of the dimension d .", "untangling of 2d meshes in ale simulations . a procedure is presented to untangle unstructured 2d meshes containing inverted elements by node repositioning . the inverted elements may result from node movement in arbitrary lagrangian eulerian ( ale ) simulations of continuum mechanics problems with large shear deformation such as fluid flow and metal forming . meshes with inverted elements may also be created due to the limitations of mesh generation algorithms particularly for nonsimplicial mesh generation . the untangling procedure uses a combination of direct node placement based on geometric computation of the feasible set , and node repositioning driven by numerical optimization of an objective function that achieves its minimum on a valid mesh . it is shown that a combination of the feasible set , based method and the optimization method achieves the best results in untangling complex 2d meshes . preliminary results are also presented for untangling of 3d unstructured meshes by the same approach .", "online hierarchical cooperative caching . we address a hierarchical generalization of the well known disk paging problem . in the hierarchical cooperative caching problem , a set of n machines residing in an ultrametric space cooperate with one another to satisfy a sequence of read requests to a collection of ( read only ) files . a seminal result in the area of competitive analysis states that lru ( the widely used deterministic online paging algorithm based on the least recently used eviction policy ) is constant competitive if it is given a constant factor blowup in capacity over the offline algorithm . does such a constant competitive deterministic algorithm ( with a constant factor blowup in the machine capacities ) exist for the hierarchical cooperative caching problem the main contribution of the present paper is to answer this question in the negative . more specifically , we establish an ( log log n ) lower bound on the competitive ratio of any online hierarchical cooperative caching algorithm with capacity blowup o ( ( log n ) <digit> ) , where denotes an arbitrarily small positive constant .", "theory and applications of inverting functions as folds . this paper is devoted to the proof , applications , and generalisation of a theorem , due to bird and de moor , that gave conditions under which a total function can be expressed as a relational fold . the theorem is illustrated with three problems , all dealing with constructing trees with various properties . it is then generalised to give conditions under which the inverse of a partial function can be expressed as a relational hylomorphism . its proof makes use of doornbos and backhouse ' s theory on well foundedness and reductivity . possible applications of the generalised theorem is discussed .", "accurate conjugate gradient methods for families of shifted systems . we consider the solution of the linear system real values of . this family of shifted systems arises , for example , in tikhonov regularization and computations in lattice quantum chromodynamics . for each single shift this system can be solved using the conjugate gradient method for least squares problems ( cgls ) . in literature various implementations of the , so called , multishift cgls methods have been proposed . these methods are mathematically equivalent to applying the cgls method to each shifted system separately but they solve all systems simultaneously and require only two matrix vector products ( one by a and one by at ) and two inner products per iteration step . unfortunately , numerical experiments show that , due to roundoff errors , in some cases these implementations of the multishift cgls method can only attain an accuracy that depends on the square of condition number of the matrix a . in this paper we will argue that , in the multishift cgls method , the impact on the attainable accuracy of rounding errors in the lanczos part of the method is independent of the effect of roundoff errors made in the construction of the iterates . by making suitable design choices for both parts , we derive a new ( and efficient ) implementation that tries to remove the limitation of previous proposals . a partial roundoff error analysis and various numerical experiments show promising results .", "computing smallest singular triplets with implicitly restarted lanczos bidiagonalization . a matrix free algorithm , <unk> , for the efficient computation of the smallest singular triplets of large and possibly sparse matrices is described . key characteristics of the approach are its use of lanczos bidiagonalization , implicit restarting , and harmonic ritz values . the algorithm also uses a deflation strategy that can be applied directly on lanczos bidiagonalization . a refinement postprocessing phase is applied to the converged singular vectors . the computational costs of the above techniques are kept small as they make direct use of the bidiagonal form obtained in the course of the lanczos factorization . several numerical experiments with the method are presented that illustrate its effectiveness and indicate that it performs well compared to existing codes .", "unifying proof methodologies of duration calculus and timed linear temporal logic . linear temporal logic ( ltl ) has been widely used for specification and verification of reactive systems . its standard model is sequences of states ( or state transitions ) , and formulas describe sequencing of state transitions . when ltl is used to model real time systems , a state is extended with a time stamp to record when a state transition takes place . duration calculus ( dc ) is another well studied approach for real time systems development . dc models behaviours of a system by functions from the domain of reals representing time to the system states . this paper extends this time domain to the cartesian product of the real and the natural numbers . with the extended time domain , we provide the chop modality with a non overlapping interpretation . this allows some linear temporal operators explicitly dealing with the discrete dimension of time to be derivable from the chop modality in essentially the same way that their continuous time counterparts are in the classical dc . this provides a nice embedding of some timed ltl ( tltl ) modalities into dc to unify the methods from dc and ltl for real time systems development requirements and high level design decisions are interval properties and are therefore specified and reasoned about in dc , while properties of an implementation , as well as the refinement relation between two implementations , are specified and verified compositionally and inductively in ltl . implementation properties are related to requirement and design properties by rules for lifting ltl formulas to dc formulas .", "tight bounds on the competitive ratio on accommodating sequences for the seat reservation problem . the unit price seat reservation problem is investigated . the seat reservation problem is the problem of assigning seat numbers on line to requests for reservations in a train traveling through k stations . we are considering the version where all tickets have the same price and where requests are treated fairly , that is , a request which can be fulfilled must be granted . for fair deterministic algorithms , we provide an asymptotically matching upper bound to the existing lower bound which states that all fair algorithms for this problem are competitive on accommodating sequences , when there are at least three seats . additionally , we give an asymptotic upper bound of <digit> <digit> for fair randomized algorithms against oblivious adversaries . we also examine concrete on line algorithms , first fit and random for the special case of two seats . tight analyses of their performance are given .", "admission control with immediate notification . when admission control is used , an on line scheduler chooses whether or not to complete each individual job successfully by its deadline . an important consideration is at what point in time the scheduler determines if a job request will be satisfied , and thus at what point the scheduler is able to provide notification to the job owner as to the fate of the request . in the loosest model , often seen in real time systems , such a decision can be deferred up until the job ' s deadline passes . in the strictest model , more suitable for customer based applications , a scheduler would be required to give notification at the instant that a job request arrives . unfortunately there seems to be little existing research which explicitly studies the effect of the notification model on the performance guarantees of a scheduler . we undertake such a study by reexamining a problem from the literature . specifically , we study the effect of the notification model on the non preemptive scheduling of a single resource in order to maximize utilization . at first glance , it appears severely more restrictive to compare a scheduler required to give immediate notification to one which need not give any notification . yet we are able to present alternate algorithms which provide immediate notification , while matching most of the performance guarantees which are possible by schedulers which provide no such notification . in only one case are we able to give evidence that providing immediate notification may be more difficult .", "distributed council election . this paper studies the problem of electing a small number of representatives ( council ) out of a ( possible large ) group of anonymous candidates . the problem arises in scenarios such as multicast where , to avoid feedback implosion , a small subset of the receivers is chosen to provide feedback on network conditions . we present several algorithms for this problem and analyze the expected number of messages and rounds required for their convergence . in particular , we present an algorithm that almost always converges in one round using a small number of messages ( for typical council size ) when the number of hosts is known . in the case where the number of hosts is unknown ( and too large to be polled ) , our algorithms converge in a small number of rounds that improves previous results by bolot et al . ( <digit> ) .", "rsa oaep is secure under the rsa assumption . recently victor shoup noted that there is a gap in the widely believed security result of oaep against adaptive chosen ciphertext attacks . moreover , he showed that , presumably , oaep can not be proven secure from the one wayness of the underlying trapdoor permutation . this paper establishes another result on the security of oaep . it proves that oaep offers semantic security against adaptive chosen ciphertext attacks , in the random oracle model , under the partial domain one wayness of the underlying permutation . therefore , this uses a formally stronger assumption . nevertheless , since partial domain one wayness of the rsa function is equivalent to its ( full domain ) <unk> , it follows that the security of rsa oaep can actually be proven under the sole rsa assumption , although the reduction is not tight .", "corpus structure , language models , and ad hoc information retrieval . most previous work on the recently developed language modeling approach to information retrieval focuses on document specific characteristics , and therefore does not take into account the structure of the surrounding corpus . we propose a novel algorithmic framework in which information provided by document based language models is enhanced by the incorporation of information drawn from clusters of similar documents . using this framework , we develop a suite of new algorithms . even the simplest typically outperforms the standard language modeling approach in precision and recall , and our new interpolation algorithm posts statistically significant improvements for both metrics over all three corpora tested .", "solving equations in the relational algebra . enumerating all solutions of a relational algebra equation is a natural and powerful operation which , when added as a query language primitive to the nested relational algebra , yields a query language for nested relational databases , equivalent to the well known powerset algebra . we study sparse equations , which are equations with at most polynomially many solutions . we look at their complexity and compare their expressive power with that of similar notions in the powerset algebra .", "on the hardness of <digit> coloring a <digit> colorable graph . we give a new proof showing that it is np hard to color a <digit> colorable graph using just <digit> colors . this result is already known , s . khanna , n . linial , and s . safra , combinatorica , <digit> ( <digit> ) , pp . <digit> <digit> , but our proof is novel because it does not rely on the pcp theorem , while the known one does . this highlights a qualitative difference between the known hardness result for coloring <digit> colorable graphs and the factor n epsilon hardness for approximating the chromatic number of general graphs , as the latter result is known to imply ( some form of ) pcp theorem m . bellare , o . goldreich , and m . sudan , siam j . comput . , <digit> ( <digit> ) , pp . <digit> <digit> . another aspect in which our proof is novel is in its use of the pcp theorem to show that <digit> coloring of <digit> colorable graphs remains np hard even on bounded degree graphs ( this hardness result does not seem to follow from the earlier reduction of khanna , linial , and safra ) . we point out that such graphs can always be colored using o ( <digit> ) colors by a simple greedy algorithm , while the best known algorithm for coloring ( general ) <digit> colorable graphs requires n omega ( <digit> ) colors . our proof technique also shows that there is an varepsilon <digit> > <digit> such that it is np hard to legally <digit> color even a ( <digit> varepsilon <digit> ) fraction of the edges of a <digit> colorable graph .", "mining constrained gradients in large databases . many data analysis tasks can be viewed as search or mining in a multidimensional space ( mds ) . in such mdss , dimensions capture potentially important factors for given applications , and cells represent combinations of values for the factors . to systematically analyze data in mds , an interesting notion , called cubegrade was recently introduced by imielinski et al . check end of sentence , which focuses on the notable changes in measures in mds by comparing a cell ( which we refer to as probe cell ) with its gradient cells , namely , its ancestors , descendants , and siblings . we call such queries gradient analysis queries ( gqs ) . since an mds can contain billions of cells , it is important to answer gqs efficiently . in this study , we focus on developing efficient methods for mining gqs constrained by certain ( weakly ) antimonotone constraints . instead of conducting an independent gradient cell search once per probe cell , which is inefficient due to much repeated work , we propose an efficient algorithm , liveset driven . this algorithm finds all good gradient probe cell pairs in one search pass . it utilizes measure value analysis and dimension match analysis in a set oriented manner , to achieve bidirectional pruning between the sets of hopeful probe cells and of hopeful gradient cells . moreover , it adopts a hypertree structure and an h cubing method to compress data and to maximize sharing of computation . our performance study shows that this algorithm is efficient and scalable . in addition to data cubes , we extend our study to another important scenario mining constrained gradients in transactional databases where each item is associated with some measures such as price . such transactional databases can be viewed as sparse mdss where items represent dimensions , although they have significantly different characteristics than data cubes . we outline efficient mining methods for this problem in this paper .", "development of a verified erlang program for resource locking . in this paper , we describe a tool to verify erlang programs and show , by means of an industrial case study , how this tool is used . the tool includes a number of components , including a translation component , a state space generation component and a model checking component . to verify properties of the code , the tool first translates the erlang code into a process algebraic specification . the outcome of the translation is made more efficient by taking advantage of the fact that software written in erlang builds upon software design patterns such as clientserver behaviours . a labelled transition system is constructed from the specification by use of the crl toolset . the resulting labelled transition system is model checked against a set of properties formulated in the calculus using the caesar <unk> toolset . as a case study we focus on a simplified resource manager modelled on a real implementation in the control software of the axd <digit> atm switch . some of the key properties we verified for the program are mutual exclusion and non starvation . since the toolset supports only the regular alternation free calculus , some ingenuity is needed for checking the liveness property non starvation . the case study has been refined step by step to provide more functionality , with each step motivated by a corresponding formal verification using model checking .", "equilogical spaces . it is well known that one can build models of full higher order dependent type theory ( also called the calculus of constructions ) using partial equivalence relations ( pers ) and assemblies over a partial combinatory algebra . but the idea of categories of pers and ers ( total equivalence relations ) can be applied to other structures as well . in particular , we can easily define the category of ers and equivalence preserving continuous mappings over the standard category <unk> of topological t0 spaces we call these spaces ( a topological space together with an er ) equilogical spaces and the resulting category equ . we show that this category in contradistinction to <unk> is a cartesian closed category . the direct proof outlined here uses the equivalence of the category equ to the category <unk> of pers over algebraic lattices ( a full subcategory of <unk> that is well known to be cartesian closed from domain theory ) . in another paper with <unk> and <unk> ( cited herein ) , a more abstract categorical generalization shows why many such categories are cartesian closed . the category equ obviously contains <unk> as a full subcategory , and it naturally contains many other well known subcategories . in particular , we show why , as a consequence of work of ershov , berger , and others , the kleene kreisel hierarchy of countable functionals of finite types can be naturally constructed in equ from the natural numbers object n by repeated use in equ of exponentiation and binary products . we also develop for equ notions of modest sets ( a category equivalent to equ ) and assemblies to explain why a model of dependent type theory is obtained . we make some comparisons of this model to other , known models .", "two level languages for program optimization . two level languages incorporate binding time information inside types , that is , whether a piece of code is completely known at compile time , or needs some more inputs and can be evaluated only at run time . we consider the use of <digit> level languages in the framework of partial evaluation , and use a <digit> level version of the simply typed lambda calculus with recursion . we give an operational semantics , an equational theory and a denotational semantics , that give an account of the distinction between compilation and execution phases . an adequacy theorem is given to relate the two semantics , showing in particular how they agree on non termination at compile time . we finally give a more refined model using functor categories .", "poset valued sets or how to build models for linear logics . we describe a method for constructing models of linear logic based on the category of sets and relations . the resulting categories are non degenerate in general in particular they are not compact closed nor do they have biproducts . the construction is simple , lifting the structure of a poset to the new category . the underlying poset thus controls the structure of this category , and different posets give rise to differently flavoured models . as a result , this technique allows the construction of models for both , intuitionistic or classical linear logic as desired . a number of well known models , for example coherence spaces and hypercoherences , are instances of this method .", "semantics and logic of object calculi . the main contribution of this paper is a formal characterization of recursive object specifications and their existence based on a denotational untyped semantics of the object calculus . existence is not guaranteed but can be shown employing pitts ' results on relational properties of domains . the semantics can be used to analyse and verify abadi and <unk> ' s object logic but it also suggests extensions . for example , specifications of methods may not only refer to fields but also to methods of objects in the store . this can be achieved without compromising the existence theorem . an informal logic of predomains is in use intentionally in order to avoid any commitment to a particular syntax of specification logic .", "optimistic register coalescing . graph coloring register allocators eliminate copies by coalescing the source and target nodes of a copy if they do not interfere in the interference graph . coalescing , however , can be harmful to the colorability of the graph because it tends to yield a graph with nodes of higher degrees . unlike aggressive coalescing , which coalesces any pair of noninterfering copy related nodes , conservative coalescing or iterated coalescing perform safe coalescing that preserves the colorability . unfortunately , these heuristics give up coalescing too early , losing many opportunities for coalescing that would turn out to be safe . moreover , they ignore the fact that coalescing may even improve the colorability of the graph by reducing the degree of neighbor nodes that are interfering with both the source and target nodes being coalesced . this article proposes a new heuristic called optimistic coalescing which optimistically performs aggressive coalescing , thus exploiting the positive impact of coalescing aggressively , but when a coalesced node is to be spilled , it is split back into separate nodes . since there is a better chance of coloring one of those splits , we can reduce the overall spill amount .", "computation in networks of passively mobile finite state sensors . we explore the computational power of networks of small resource limited mobile agents . we define two new models of computation based on pairwise interactions of finite state agents in populations of finite but unbounded size . with a fairness condition on interactions , we define the concept of stable computation of a function or predicate , and give protocols that stably compute functions in a class including boolean combinations of threshold k , parity , majority , and simple arithmetic . we prove that all stably computable predicates are in nl . with uniform random sampling of pairs to interact , we define the model of conjugating automata and show that any counter machine with o ( <digit> ) counters of capacity o ( n ) can be simulated with high probability by a protocol in a population of size n . we prove that all predicates computable with high probability in this model are in p rl . several open problems and promising future directions are discussed .", "asynchronous group key exchange with failures . group key exchange protocols allow a group of servers communicating over an asynchronous network of point to point links to establish a common key , such that an adversary which fully controls the network links ( but not the group members ) can not learn the key . currently known group key exchange protocols rely on the assumption that all group members participate in the protocol and if a single server crashes , then no server may terminate the protocol . in this paper , we propose the first purely asynchronous group key exchange protocol that tolerates a minority of servers to crash . our solution uses a constant number of rounds , which makes it suitable for use in practice . furthermore , we also investigate how to provide forward secrecy with respect to an adversary that may break into some servers and observe their internal state . we show that any group key exchange protocol among n servers that tolerates tc > <digit> servers to crash can only provide forward secrecy if the adversary breaks into less than n <unk> servers , and propose a group key exchange protocol that achieves this bound .", "euclidean group invariant computation of stochastic completion fields using shiftable twistable functions . we describe a method for computing the likelihood that a completion joining two contour fragments passes through any given position and orientation in the image plane . like computations in primary visual cortex ( and unlike all previous models of contour completion ) , the output of our computation is invariant under rotations and translations of the input pattern . this is achieved by representing the input , output , and intermediate states of the computation in a basis of shiftable twistable functions .", "a linear algebraic approach to metering schemes . a metering scheme is a method by which an audit agency is able to measure the interaction between servers and clients during a certain number of time frames . naor and pinkas ( vol . <digit> of lncs , pp . <digit> ) proposed metering schemes where any server is able to compute a proof ( i . e . , a value to be shown to the audit agency at the end of each time frame ) , if and only if it has been visited by a number of clients larger than or equal to some threshold h during the time frame . masucci and stinson ( vol . <digit> of lncs , pp . <digit> ) showed how to construct a metering scheme realizing any access structure , where the access structure is the family of all subsets of clients which enable a server to compute its proof . they also provided lower bounds on the communication complexity of metering schemes . in this paper we describe a linear algebraic approach to design metering schemes realizing any access structure . namely , given any access structure , we present a method to construct a metering scheme realizing it from any linear secret sharing scheme with the same access structure . besides , we prove some properties about the relationship between metering schemes and secret sharing schemes . these properties provide some new bounds on the information distributed to clients and servers in a metering scheme . according to these bounds , the optimality of the metering schemes obtained by our method relies upon the optimality of the linear secret sharing schemes for the given access structure .", "finite state machines for strings over infinite alphabets . motivated by formal models recently proposed in the context of xml , we study automata and logics on strings over infinite alphabets . these are conservative extensions of classical automata and logics defining the regular languages on finite alphabets . specifically , we consider register and pebble automata , and extensions of first order logic and monadic second order logic . for each type of automaton we consider one way and two way variants , as well as deterministic , nondeterministic , and alternating control . we investigate the expressiveness and complexity of the automata and their connection to the logics , as well as standard decision problems . some of our results answer open questions of kaminski and francez on register automata .", "reflective metalogical frameworks . a metalogical framework is a logic with an associated methodology that is used to represent other logics and to reason about their metalogical properties . we propose that logical frameworks can be good metalogical frameworks when their theories always have initial models and they support reflective and parameterized reasoning . we develop this thesis both abstractly and concretely . abstractly , we formalize our proposal as a set of requirements and explain how any logic satisfying these requirements can be used for metalogical reasoning . concretely , we present membership equational logic as a particular metalogic that satisfies these requirements . using membership equational logic , and its realization in the maude system , we show how reflection can be used for different , nontrivial kinds of formal metatheoretic reasoning . in particular , one can prove metatheorems that relate theories or establish properties of parameterized classes of theories .", "scheduling search procedures . we analyze preemptive on line scheduling against randomized adversaries , with the goal to finish an unknown distinguished target job . our motivation comes from clinical gene search projects , but the subject leads to general theoretical questions of independent interest , including some natural but unusual probabilistic models . we study problem versions with known and unknown processing times of jobs and target probabilities , and models where the on line player gets some randomized extra information about the target . for some versions we get optimal competitive ratios , expressed in terms of given parameters of instances .", "relating communicating processes with different interfaces . we present here an implementation relation intended to formalise the notion that a system built of communicating processes is an acceptable implementation of another base , or target , system in the event that the two systems have different interfaces . such a treatment has clear applicability in the software development process , where ( the interface of ) an implementation component may be expressed at a different level of abstraction to ( the interface of ) the relevant specification component . technically , processes are formalised using hoare ' s csp language , with its standard failures divergences model . the implementation relation is formulated in terms of failures and divergences of the implementation and target processes . interface difference is modelled by endowing the implementation relation with parameters called extraction patterns . these are intended to interpret implementation behaviour as target behaviour , and suitably constrain the former in connection to well formedness and deadlock properties . we extend the results of our previous work and replace implementation relations previously presented by a single , improved scheme . we also remove all the restrictions previously placed upon target processes . two basic kinds of results are obtained realisability and compositionality . the latter means that a target composed of several connected systems may be implemented by connecting their respective implementations . the former means that , if target and implementation in fact have the same interface , then the implementation relation they should satisfy collapses into standard implementation pre order . we also show how to represent processes and extraction patterns in a manner amenable to computer implementation , and detail a graph theoretic restatement of the conditions defining the implementation relation , from which algorithms for their automatic verification are easily derived .", "an information theoretic model for steganography . an information theoretic model for steganography with a passive adversary is proposed . the adversary ' s task of distinguishing between an innocent cover message c and a modified message s containing hidden information is interpreted as a hypothesis testing problem . the security of a steganographic system is quantified in terms of the relative entropy ( or discrimination ) between the distributions of c and s , which yields bounds on the detection capability of any adversary . it is shown that secure steganographic schemes exist in this model provided the covertext distribution satisfies certain conditions . a universal stegosystem is presented in this model that needs no knowledge of the covertext distribution , except that it is generated from independently repeated experiments .", "minimization and np multifunctions . the implicit characterizations of the polynomial time computable functions fp given by bellantoni cook and leivant suggest that this class is the complexity theoretic analog of the primitive recursive functions . hence , it is natural to add minimization operators to these characterizations and investigate the resulting class of partial functions as a candidate for the analog of the partial recursive functions . we do so in this paper for cobham ' s definition of fp by bounded recursion and for bellantoni cook ' s safe recursion and prove that the resulting classes capture exactly npmv , the nondeterministic polynomial time computable partial multifunctions . we also consider the relationship between our schemes and a notion of nondeterministic recursion defined by leivant and show that the latter characterizes the total functions of npmv . we view these results as giving evidence that npmv is the appropriate analog of partial recursive . this view is reinforced by earlier results of <unk> and stahl who show that for many of the relationships between partial recursive functions and r . e . sets , analogous relationships hold between npmv and np sets . furthermore , since npmv is obtained from fp in the same way as the recursive functions are obtained from the primitive recursive functions ( when defined via function schemes ) , this also gives further evidence that fp is properly seen as playing the role of primitive recursion .", "realizability models for <unk> like languages . we give a realizability model of girard scedrov scott ' s bounded linear logic ( <unk> ) . this gives a new proof that all numerical functions representable in that system are polytime . our analysis naturally justifies the design of the <unk> syntax and suggests further extensions .", "space efficient planar convex hull algorithms . a space efficient algorithm is one in which the output is given in the same location as the input and only a small amount of additional memory is used by the algorithm . we describe four space efficient algorithms for computing the convex hull of a planar point set .", "electronic jury voting protocols . this work stresses the fact that all current proposals for electronic voting schemes disclose the final tally of the votes . in certain situations , like jury voting , this may be undesirable . we present a robust and universally verifiable membership testing scheme ( mts ) that allows , among other things , a collection of voters to cast votes and determine whether their tally belongs to some pre specified small set ( e . g . , exceeds a given threshold ) our scheme discloses no additional information than that implied from the knowledge of such membership . we discuss several extensions of our basic mts . all the constructions presented combine features of two parallel lines of research concerning electronic voting schemes , those based on mix networks and in homomorphic encryption .", "detecting unauthorized activities using a sensor network . sensing devices can be deployed to form a network for monitoring a region of interest . this chapter investigates the detection of a target in the region being monitored by using collaborative target detection algorithms among the sensors . the objective is to develop a low cost sensor deployment strategy to meet a performance criteria . a path exposure metric is proposed to measure the goodness of deployment . exposure can be defined and efficiently computed for various target activities , targets traveling at variable speed and in the presence of obstacles in the region . using exposure to evaluate the detection performance , the problem of random sensor deployment is formulated . the problem defines cost functions that take into account the cost of single sensors and the cost of deployment . a sequential sensor deployment approach is then developed . the chapter illustrates that the overall cost of deployment can be minimized to achieve a desired detection performance by appropriately choosing the number of sensors deployed in each step of the sequential deployment strategy .", "symmetry groups for beta lattices . we present a construction of symmetry plane groups for quasiperiodic point sets named beta lattices . the framework is issued from beta integers counting systems . beta lattices are vector superpositions of beta integers . when > <digit> is a quadratic pisot <unk> algebraic unit , the set of beta integers can be equipped with an abelian group structure and an internal multiplicative law . when we show that these arithmetic and algebraic structures lead to freely generated symmetry plane groups for beta lattices . these plane groups are based on repetitions of discrete adapted rotations and translations we shall refer to as beta rotations and beta translations . hence beta lattices , endowed with beta rotations and beta translations , can be viewed like lattices . the quasiperiodic function s ( n ) , defined on the set of beta integers as counting the number of small tiles between the origin and the nth beta integer , plays a central part in these new group structures . in particular , this function behaves asymptotically like a linear function . as an interesting consequence , beta lattices and their symmetries behave asymptotically like lattices and lattice symmetries , respectively .", "mining the space of graph properties . existing data mining algorithms on graphs look for nodes satisfying specific properties , such as specific notions of structural similarity or specific measures of link based importance . while such analyses for predetermined properties can be effective in well understood domains , sometimes identifying an appropriate property for analysis can be a challenge , and focusing on a single property may neglect other important aspects of the data . in this paper , we develop a foundation for mining the properties themselves . we present a theoretical framework defining the space of graph properties , a variety of mining queries enabled by the framework , techniques to handle the enormous size of the query space , and an experimental system called f miner that demonstrates the utility and feasibility of property mining .", "using simulated execution in verifying distributed algorithms . this paper presents a methodology for using simulated execution to assist a theorem prover in verifying safety properties of distributed systems . execution based techniques such as testing can increase confidence in an implementation , provide intuition about behavior , and detect simple errors quickly . they can not by themselves demonstrate correctness . however , they can aid theorem provers by suggesting necessary lemmas and providing tactics to structure proofs . this paper describes the use of these techniques in a machine checked proof of correctness of the paxos algorithm for distributed consensus .", "fast , distributed approximation algorithms for positive linear programming with applications to flow control . we study combinatorial optimization problems in which a set of distributed agents must achieve a global objective using only local information . papadimitriou and yannakakis proceedings of the 25th acm symposium on theory of computing , <digit> , pp . <digit> <digit> initiated the study of such problems in a framework where distributed decision makers must generate feasible solutions to positive linear programs with information only about local constraints . we extend their model by allowing these distributed decision makers to perform local communication to acquire information over time and then explore the tradeoff between the amount of communication and the quality of the solution to the linear program that the decision makers can obtain . our main result is a distributed algorithm that obtains a ( <digit> approximation to the optimal linear programming solution while using only a polylogarithmic number of rounds of local communication . this algorithm offers a significant improvement over the logarithmic approximation ratio previously obtained by awerbuch and azar proceedings of the 35th annual ieee symposium on foundations of computer science , <digit> , pp . <digit> <digit> for this problem while providing a comparable running time . our results apply directly to the application of network flow control , an application in which distributed routers must quickly choose how to allocate bandwidth to connections using only local information to achieve global objectives . the sequential version of our algorithm is faster and considerably simpler than the best known approximation algorithms capable of achieving a ( <digit> approximation ratio for positive linear programming .", "splitting a matrix of laurent polynomials with symmetry and its application to symmetric framelet filter banks . let m be a <digit> times <digit> matrix of laurent polynomials with real coefficients and symmetry . in this paper , we obtain a necessary and sufficient condition for the existence of four laurent polynomials ( or finite impulse response filters ) u1 , u2 , v1 , v2 with real coefficients and symmetry such that left begin matrix u <digit> ( z ) v <digit> ( z ) u <digit> ( z ) v <digit> ( z ) end matrix right left begin matrix u <digit> ( <digit> z ) u <digit> ( <digit> z ) v <digit> ( <digit> z ) v <digit> ( <digit> z ) end matrix right m ( z ) qquad forall z in cc bs <digit> and <unk> ( z ) sv2 ( z ) <unk> ( z ) sv1 ( z ) , where sp ( z ) p ( z ) p ( <digit> z ) for a nonzero laurent polynomial p . our criterion can be easily checked and a step by step algorithm will be given to construct the symmetric filters u1 , u2 , v1 , v2 . as an application of this result to symmetric framelet filter banks , we present a necessary and sufficient condition for the construction of a symmetric multiresolution analysis tight wavelet frame with two compactly supported generators derived from a given symmetric refinable function . once such a necessary and sufficient condition is satisfied , an algorithm will be used to construct a symmetric framelet filter bank with two high pass filters which is of interest in applications such as signal denoising and image processing . as an illustration of our results and algorithms in this paper , we give several examples of symmetric framelet filter banks with two high pass filters which have good vanishing moments and are derived from various symmetric low pass filters including some b spline filters .", "inference of termination conditions for numerical loops in prolog . we present a new approach to termination analysis of numerical computations in logic programs . traditional approaches fail to analyse them due to non well foundedness of the integers . we present a technique that allows overcoming these difficulties . our approach is based on transforming a program in a way that allows integrating and extending techniques originally developed for analysis of numerical computations in the framework of query mapping pairs with the well known framework of acceptability . such an integration not only contributes to the understanding of termination behaviour of numerical computations , but also allows us to perform a correct analysis of such computations automatically , by extending previous work on a constraint based approach to termination . finally , we discuss possible extensions of the technique , including incorporating general term orderings .", "probabilistic symbolic model checking with prism a hybrid approach . in this paper we present efficient symbolic techniques for probabilistic model checking . these have been implemented in prism , a tool for the analysis of probabilistic models such as discrete time markov chains , continuous time markov chains and markov decision processes using specifications in the probabilistic temporal logics pctl and csl . motivated by the success of model checkers such as smv which use bdds ( binary decision diagrams ) , we have developed an implementation of pctl and csl model checking based on mtbdds ( multi terminal bdds ) and bdds . existing work in this direction has been hindered by the generally poor performance of mtbdd based numerical computation , which is often substantially slower than explicit methods using sparse matrices . the focus of this paper is a novel hybrid technique which combines aspects of symbolic and explicit approaches to overcome these performance problems . for typical examples , we achieve a dramatic improvement over the purely symbolic approach . in addition , thanks to the compact model representation using mtbdds , we can verify systems an order of magnitude larger than with sparse matrices , while almost matching or even beating them for speed .", "test sequence generation and model checking using dynamic transition relations . the task of finding a set of test sequences that provides good coverage of industrial circuits is infeasible because of the size of the circuits . for small critical subcircuits of the design , however , designers can create a set of test sequences that achieve good coverage . these sequences can not be used on the full design because the inputs to the subcircuit may not be accessible . in this work we present an efficient test generation algorithm that receives a test sequence created for the subcircuit and finds a test sequence for the full design that reproduces the given sequence on the subcircuit . the algorithm uses a new technique called dynamic transition relations to increase its efficiency . the most common and most expensive step in our algorithm is the computation of the set of predecessors of a set of states . to make this computation more efficient we exploit a partitioning of the transition relation into a set of simpler relations . at every step we use only those that are necessary , resulting in a smaller relation than the original one . a different relation is used for each step , hence the name dynamic transition relations . the same idea can be used to improve symbolic model checking for the temporal logic ctl . we have implemented the new method in smv and run it on several large circuits . our experiments indicate that the new method can provide gains of up to two orders of magnitude in time and space during verification . these results show that dynamic transition relations can make it possible to verify circuits that were previously unmanageable due to their size and complexity .", "on the performance of group key agreement protocols . group key agreement is a fundamental building block for secure peer group communication systems . several group key management techniques were proposed in the last decade , all assuming the existence of an underlying group communication infrastructure to provide reliable and ordered message delivery as well as group membership information . despite analysis , implementation , and deployment of some of these techniques , the actual costs associated with group key management have been poorly understood so far . this resulted in an undesirable tendency on the one hand , adopting suboptimal security for reliable group communication , while , on the other hand , constructing excessively costly group key management protocols . this paper presents a thorough performance evaluation of five notable distributed key management techniques ( for collaborative peer groups ) integrated with a reliable group communication system . an in depth comparison and analysis of the five techniques is presented based on experimental results obtained in actual local and wide area networks . the extensive performance measurement experiments conducted for all methods offer insights into their scalability and practicality . furthermore , our analysis of the experimental results highlights several observations that are not obvious from the theoretical analysis .", "sizing router buffers . all internet routers contain buffers to hold packets during times of congestion . today , the size of the buffers is determined by the dynamics of tcp ' s congestion control algorithm . in particular , the goal is to make sure that when a link is congested , it is busy <digit> % of the time which is equivalent to making sure its buffer never goes empty . a widely used rule of thumb states that each link needs a buffer of size is the average round trip time of a flow passing across the link , and c is the data rate of the link . for example , a 10gb s router linecard needs approximately 250ms x <digit> . 5gbits of buffers and the amount of buffering grows linearly with the line rate . such large buffers are challenging for router manufacturers , who must use large , slow , off chip drams . and queueing delays can be long , have high variance , and may destabilize the congestion control algorithms . in this paper we argue that the rule of thumb now outdated and incorrect for backbone routers . this is because of the large number of flows ( tcp connections ) multiplexed together on a single backbone link . using theory , simulation and experiments on a network of real routers , we show that a link with n flows requires no more than long lived or short lived tcp flows . the consequences on router design are enormous a <digit> . 5gb s link carrying <digit> , <digit> flows could reduce its buffers by <digit> % with negligible difference in throughput and a 10gb s link carrying <digit> , <digit> flows requires only 10mbits of buffering , which can easily be implemented using fast , on chip sram .", "a layered naming architecture for the internet . currently the internet has only one level of name resolution , dns , which converts user level domain names into ip addresses . in this paper we borrow liberally from the literature to argue that there should be three levels of name resolution from user level descriptors to service identifiers from service identifiers to endpoint identifiers and from endpoint identifiers to ip addresses . these additional levels of naming and resolution ( <digit> ) allow services and data to be first class internet objects ( in that they can be directly and persistently named ) , ( <digit> ) seamlessly accommodate mobility and multi homing and ( <digit> ) integrate middleboxes ( such as nats and firewalls ) into the internet architecture . we further argue that flat names are a natural choice for the service and endpoint identifiers . hence , this architecture requires scalable resolution of flat names , a capability that distributed hash tables ( dhts ) can provide .", "style based inverse kinematics . this paper presents an inverse kinematics system based on a learned model of human poses . given a set of constraints , our system can produce the most likely pose satisfying those constraints , in real time . training the model on different input data leads to different styles of ik . the model is represented as a probability distribution over the space of all possible poses . this means that our ik system can generate any pose , but prefers poses that are most similar to the space of poses in the training data . we represent the probability with a novel model called a scaled gaussian process latent variable model . the parameters of the model are all learned automatically no manual tuning is required for the learning component of the system . we additionally describe a novel procedure for interpolating between styles . our style based ik can replace conventional ik , wherever it is used in computer animation and computer vision . we demonstrate our system in the context of a number of applications interactive character posing , trajectory keyframing , real time motion capture with missing markers , and posing from a 2d image .", "parametric search made practical . in this paper we show that in sorting based applications of parametric search , quicksort can replace the parallel sorting algorithms that are usually advocated . because of the simplicity of quicksort , this may lead to applications of parametric search that are not only efficient in theory , but in practice as well . also , we argue that cole ' s optimization of certain parametric search algorithms may be unnecessary under realistic assumptions about the input . furthermore , we present a generic , flexible , and easy to use framework that greatly simplifies the implementation of algorithms based on parametric search . we use our framework to implement an algorithm that solves the <unk> distance problem . the implementation based on parametric search is faster than the binary search approach that is often suggested as a practical replacement for the parametric search technique .", "minimizing end to end delay in high speed networks with a simple coordinated schedule . we study the problem of providing end to end delay guarantees in connection oriented networks . in this environment , multiple hop sessions coexist and interfere with one another . parekh and gallager showed that the weighted fair queueing ( wfq ) scheduling discipline provides a worst case delay guarantee comparable to ( <digit> i ) ki for a session with rate i and ki hops . such delays can occur since a session i packet can wait for time <digit> i at every hop . we describe a randomized work conserving scheme that guarantees , with high probability , an additive delay bound of approximately <digit> i ki . this bound is smaller than the multiplicative bound ( <digit> i ) ki of wfq , especially when the hop count ki is large . we call our scheme coordinated earliest deadline first ( cedf ) since it uses an earliest deadline first approach in which simple coordination is applied to the deadlines for consecutive hops of a session . the key to the bound is that once a packet has passed through its first server , it can pass through all its subsequent servers quickly . we conduct simulations to compare the delays actually produced by the two scheduling disciplines . in many cases , these actual delays are comparable to their analytical worst case bounds , implying that cedf outperforms wfq .", "testing juntas . we show that a boolean valued function over n variables , where each variable ranges in an arbitrary probability space , can be tested for the property of depending on only j of them using a number of queries that depends only polynomially on j and the approximation parameter . we present several tests that require a number of queries that is polynomial in j and linear in <digit> . we <unk> non adaptive tests that has one sided error , an adaptive version of it that requires fewer queries , and a non adaptive two sided version of the test that requires the least number of queries . we also show a two sided non adaptive test that applies to functions over n boolean variables , and has a more compact analysis . we then provide a lower bound of ( j ) on the number of queries required for the nonadaptive testing of the above property a lower bound of ( log ( j <digit> ) ) for adaptive algorithms naturally follows from this . in establishing this lower bound we also prove a result about random walks on the group <unk> that may be interesting in its own right . we show that for some the distributions of the random walk at times t and t are close to each other , independently of the step distribution of the walk . we also discuss related questions . in particular , when given in advance a known j junta function h , we show how to test a function f for the property of being identical to h up to a permutation of the variables , in a number of queries that is polynomial in j and <digit> .", "shrinkwrap an efficient adaptive algorithm for triangulating an iso surface . an algorithm is presented which generates a triangular mesh to approximate an iso surface . it starts with a triangulation of a sphere and next applies a series of deformations to this triangulation to transform it into the required surface . these deformations leave the topology invariant , so the final iso surface should be homeomorphic with a sphere . the algorithm is adaptive in the sense that the lengths of the sides of the triangles in the mesh vary with the local curvature of the underlying surface . a quantitative analysis of the accuracy of the algorithm is given along with an empirical comparison with earlier algorithms .", "improving the static analysis of embedded languages via partial evaluation . programs in embedded languages contain invariants that are not automatically detected or enforced by their host language . we show how to use macros to easily implement partial evaluation of embedded interpreters in order to capture invariants encoded in embedded programs and render them explicit in the terms of their host language . we demonstrate the effectiveness of this technique in improving the results of a value flow analysis .", "increasing internet capacity using local search . open shortest path first ( ospf ) is one of the most commonly used intra domain internet routing protocol . traffic flow is routed along shortest paths , splitting flow evenly at nodes where several outgoing links are on shortest paths to the destination . the weights of the links , and thereby the shortest path routes , can be changed by the network operator . the weights could be set proportional to the physical lengths of the links , but often the main goal is to avoid congestion , i . e . overloading of links , and the standard heuristic recommended by cisco ( a major router vendor ) is to make the weight of a link inversely proportional to its capacity . we study the problem of optimizing ospf weights for a given a set of projected demands so as to avoid congestion . we show this problem is np hard , even for approximation , and propose a local search heuristic to solve it . we also provide worst case results about the performance of ospf routing vs . an optimal multi commodity flow routing . our numerical experiments compare the results obtained with our local search heuristic to the optimal multi commodity flow routing , as well as simple and commonly used heuristics for setting the weights . experiments were done with a proposed next generation at t worldnet backbone as well as synthetic internetworks .", "a nonmonotonic observation logic . a variant of reiter ' s default logic is proposed as a logic for reasoning with ( defeasible ) observations . traditionally , default rules are assumed to represent generic information and the facts are assumed to represent specific information about the situation , but in this paper , the specific information derives from defeasible observations represented by ( normal free ) default rules , and the facts represent ( hard ) background knowledge . whenever the evidence underlying some observation is more refined than the evidence underlying another observation , this is modelled by means of a priority between the default rules representing the observations . we thus arrive at an interpretation of prioritized normal free default logic as an observation logic , and we propose a semantics for this observation logic . finally , we discuss how the proposed observation logic relates to the multiple extension problem and the problem of sensor fusion .", "self stabilizing clock synchronization in the presence of byzantine faults . we initiate a study of bounded clock synchronization under a more severe fault model than that proposed by lamport and melliar smith <digit> . realistic aspects of the problem of synchronizing clocks in the presence of faults are considered . one aspect is that clock synchronization is an on going task , thus the assumption that some of the processors never fail is too optimistic . to cope with this reality , we suggest self stabilizing protocols that stabilize in any ( long enough ) period in which less than a third of the processors are faulty . another aspect is that the clock value of each processor is bounded . a single transient fault may cause the clock to reach the upper bound . therefore , we suggest a bounded clock that wraps around when appropriate . we present two randomized self stabilizing protocols for synchronizing bounded clocks in the presence of byzantine processor failures . the first protocol assumes that processors have a common pulse , while the second protocol does not . a new type of distributed counter based on the chinese remainder theorem is used as part of the first protocol .", "plugging haskell in . extension languages enable users to expand the functionality of an application without touching its source code . commonly , these languages are dynamically typed languages , such as lisp , python , or domain specific languages , which support runtime plugins via dynamic loading of components . we show that haskell can be comfortably used as a statically typed extension language for both haskell and foreign language applications supported by the haskell ffi , and that it can perform type safe dynamic loading of plugins using dynamic types . moreover , we discuss how plugin support is especially useful to applications where haskell is used as an embedded domain specific language ( edsl ) . we explain how to realise type safe plugins using dynamic types , runtime compilation , and dynamic linking , exploiting infrastructure provided by the glasgow haskell compiler . we demonstrate the practicability of our approach with several applications that serve as running examples .", "an event detection algebra for reactive systems . in reactive systems , execution is driven by external events to which the system should respond with appropriate actions . such events can be simple , but systems are often supposed to react to sophisticated situations involving a number of simpler events occurring in accordance with some pattern . a systematic approach to handle this type of systems is to separate the mechanism for detecting composite events from the rest of the application logic . in this paper , we present an event algebra for composite event detection . we show a number of algebraic laws that facilitate formal reasoning , and justify the algebra semantics by showing to what extent the operators comply with intuition . finally , we present an implementation of the algebra , and identify a large subset of expressions for which detection can be performed with bounded resources .", "a methodology for generating verified combinatorial circuits . high level programming languages offer significant expressivity but provide little or no guarantees about resource use . resource bounded languages such as hardware description languages provide strong guarantees about the runtime behavior of computations but often lack mechanisms that allow programmers to write more structured , modular , and reusable programs . to overcome this basic tension in language design , recent work advocated the use of resource aware programming ( rap ) languages , which take into account the natural distinction between the development platform and the deployment platform for resource constrained software . this paper investigates the use of rap languages for the generation of combinatorial circuits . the key challenge that we encounter is that the rap approach does not safely admit a mechanism to express a posteriori ( post generation ) optimizations . the paper proposes and studies the use of abstract interpretation to overcome this problem . the approach is illustrated using an in depth analysis of the fast fourier transform ( fft ) . the generated computations are comparable to those generated by fftw .", "adaptive offloading for pervasive computing . pervasive computing lets users continuously and consistently access an application on heterogeneous devices . however , delivering complex applications on resource constrained mobile devices such as cell phones is challenging . application or system based adaptations attempt to address the problem , but often at the cost of considerable degradation to application fidelity . the solution is to dynamically partition the application and offload part of the application execution data to a powerful nearby surrogate . this allows delivery of the application in a pervasive computing environment without significant fidelity degradation or expensive application rewriting . runtime offloading must adapt to different application execution patterns and resource fluctuations in the pervasive computing environment . this offloading inference engine adaptively solves two key decision making problems in runtime offloading timely triggering of offloading and efficient partitioning of applications . both trace driven simulations and prototype experiments confirm the effectiveness of this adaptive offloading system .", "an experimental comparison of min cut max flow algorithms for energy minimization in vision . after <digit> , <digit> , <digit> , <digit> , <digit> , <digit> , minimum cut maximum flow algorithms on graphs emerged as an increasingly useful tool for exact or approximate energy minimization in low level vision . the combinatorial optimization literature provides many min cut max flow algorithms with different polynomial time complexity . their practical efficiency , however , has to date been studied mainly outside the scope of computer vision . the goal of this paper is to provide an experimental comparison of the efficiency of min cut max flow algorithms for applications in vision . we compare the running times of several standard algorithms , as well as a new algorithm that we have recently developed . the algorithms we study include both goldberg tarjan style push relabel methods and algorithms based on ford fulkerson style augmenting paths . we benchmark these algorithms on a number of typical graphs in the contexts of image restoration , stereo , and segmentation . in many cases , our new algorithm works several times faster than any of the other methods , making near real time performance possible . an implementation of our max flow min cut algorithm is available upon request for research purposes .", "towards proving strong direct product theorems . a fundamental question of complexity theory is the direct product question . a famous example is yao ' s xor lemma , in which one assumes that some function f is hard on average for small circuits ( meaning that every circuit of some fixed size s which attempts to compute f is wrong on a non negligible fraction of the inputs ) and concludes that every circuit of size s ' only has a small advantage over guessing randomly when computing . . . f ( xk ) on independently chosen x1 , . . . , xk . all known proofs of this lemma have the property that s ' < s . in words , the circuit which attempts to compute fk is smaller than the circuit which attempts to compute f on a single input this paper addresses the issue of proving strong direct product assertions , that is , ones in which s ' ks and is in particular larger than s . we study the question of proving strong direct product question for decision trees and communication protocols .", "the complexity of synchronous iterative do all with crashes . the ability to cooperate on common tasks in a distributed setting is key to solving a broad range of computation problems ranging from distributed search such as seti to distributed simulation and multi agent collaboration . do all , an abstraction of such cooperative activity , is the problem of performing n tasks in a distributed system of p failure prone processors . many distributed and parallel algorithms have been developed for this problem and several algorithm simulations have been developed by iterating do all algorithms . the efficiency of the solutions for do all is measured in terms of work complexity where all processing steps taken by all processors are counted . work is ideally expressed as a function of n , p , and f , the number of processor crashes . however the known lower bounds and the upper bounds for extant algorithms do not adequately show how work depends on f . we present the first non trivial lower bounds for do all that capture the dependence of work on n , p and f . for the model of computation where processors are able to make perfect load balancing decisions locally , we also present matching upper bounds . we define the r iterative do all problem that abstracts facts the repeated use of do all such as found in typical algorithm simulations . our f sensitive analysis enables us to derive tight bounds for r iterative do all work ( that are stronger than the r fold work complexity of a single do all ) . our approach that models perfect load balancing allows for the analysis of specific algorithms to be divided into two parts ( i ) the analysis of the cost of tolerating failures while performing work under free load balancing , and ( ii ) the analysis of the cost of implementing load balancing . we demonstrate the utility and generality of this approach by improving the analysis of two known efficient algorithms . we give an improved analysis of an efficient message passing algorithm . we also derive a tight and complete analysis of the best known do all algorithm for the synchronous shared memory model . finally we present a new upper bound on simulations of synchronous shared memory algorithms on crash prone processors .", "nested semantics over finite trees are equationally hard . this paper studies nested simulation and nested trace semantics over the language bccsp , a basic formalism to express finite process behaviour . it is shown that none of these semantics affords finite ( in ) equational axiomatizations over bccsp . in particular , for each of the nested semantics studied in this paper , the collection of sound , closed ( in ) equations over a singleton action set is not finitely based .", "resolution for label based formulas in hierarchical representation . order sorted logic <unk> many and partially ordered sorts as a sort hierarchy . in the field of knowledge representation and reasoning , it is useful to develop reasoning systems fbr terminological knowledge , together with assertional knowledge . however , the expression of sort hierarchies can not sufficiently capture the lexical diversity of terminological knowledge . in addition to sorts , various kinds of symbols constants , functions and predicates are semantically and hierarchically associated with each other . this is because natural language words identifying these symbols can be employed in the description of terminological knowledge . in this paper , we present a label based language for consistently handling the variety of hierarchical relationships among symbol names . for this language we develop a sorted resolution system whose reasoning power is enhanced by adding hierarchical inference rules with labeled substitutions .", "unit disk graph approximation . finding a good embedding of a unit disk graph given by its connectivity information is a problem of practical importance in a variety of fields . in wireless ad hoc and sensor networks , such an embedding can be used to obtain virtual coordinates . in this paper , we prove a non approximability result for the problem of embedding a given unit disk graph . particularly , we show that if non neighboring nodes are not allowed to be closer to each other than distance <digit> , then two neighbors can be as far apart as <digit> <digit> , where goes to <digit> as n goes to infinity , unless p np . we further show that finding a realization of a d quasi unit disk graph with d <digit> <digit> is np hard .", "debugging larch shared language specifications . the checkability designed into the lsl ( larch shared language ) is described , and two tools that help perform the checking are discussed . lp ( the larch power ) is the principal debugging tool . its design and development have been motivated primarily by work on lsl , but it also has other uses ( e . g . reasoning about circuits and concurrent algorithms ) . because of these other uses , and because they also tend to use lp to analyze larch interface specifications , the authors have tried not to make lp too lsl specific . instead , they have chosen to build a second tool , <unk> ( the lsl checker ) , to serve as a front end to lp . <unk> checks the syntax and static semantics of lsl specifications and generates lp proof obligations from their claims . these proof obligations fall into three categories consistency ( that a specification does not contradict itself ) , theory containment ( that a specification has intended consequences ) , and relative completeness ( that a set of operators is adequately defined ) . an extended example illustrating how lp is used to debug lsl specifications is presented .", "exploiting medium access diversity in rate adaptive wireless lans . recent years have seen the growing popularity of multi rate wireless network devices ( e . g . , <digit> . 11a cards ) that can exploit variations in channel conditions and improve overall network throughput . concurrently , rate adaptation schemes have been developed that selectively increase data transmissions on a link when it offers good channel quality . in this paper , we propose a medium access diversity ( mad ) scheme that leverages the benefits of rate adaptation schemes by aggressively exploiting multiuser diversity . the basic mechanism of mad is to obtain instantaneous channel condition information from multiple receivers and selectively transmit data to a receiver that improves the overall throughput of the network , while maintaining temporal fairness among multiple data flows . we identify and address the challenges in the design and implementation of mad ' s three phases channel probing , data transmission , and receiver scheduling . we also use analytical models to examine the tradeoff between network performance improvement and overhead of channel probing , and derive an asymptotic performance bound for the receiver scheduling algorithms used by mad . results from the analysis and the extensive simulations demonstrate that , on average , mad can improve the overall throughput of ieee <digit> . <digit> wireless lans by <digit> % as compared with the best existing rate adaptation scheme .", "arithmetic circuits and polynomial replacement systems . this paper addresses the problems of counting proof trees ( as introduced by venkateswaran and tompa ) and counting proof circuits , a related but seemingly more natural question . these problems lead to a common generalization of straight line programs which we call polynomial replacement systems prss . we contribute a classification of these systems and we investigate their complexity . diverse problems falling within the scope of this study include , for example , counting proof circuits and evaluating cup , circuits over the natural numbers . a number of complexity results are obtained , including a proof that counting proof circuits is <unk> complete .", "tight bounds for testing bipartiteness in general graphs . in this paper we consider the problem of testing bipartiteness of general graphs . the problem has previously been studied in two models , one most suitable for dense graphs and one most suitable for bounded degree graphs . roughly speaking , dense graphs can be tested for bipartiteness with constant complexity , while the complexity of testing bounded degree graphs is tilde theta ( sqrt n ) , where n is the number of vertices in the graph ( and tilde theta ( f ( n ) ) means theta ( f ( n ) cdot rm polylog ( f ( n ) ) ) ) . thus there is a large gap between the complexity of testing in the two cases . in this work we bridge the gap described above . in particular , we study the problem of testing bipartiteness in a model that is suitable for all densities . we present an algorithm whose complexity is tilde o ( min ( sqrt n , n <digit> m ) ) , where m is the number of edges in the graph , and we match it with an almost tight lower bound .", "a column approximate minimum degree ordering algorithm . sparse gaussian elimination with partial pivoting computes the factorization of a sparse matrix a , where the row ordering p is selected during factorization using standard partial pivoting with row interchanges . the goal is to select a column preordering , q , based solely on the nonzero pattern of a , that limits the worst case number of nonzeros in the factorization . the fill in also depends on p , but q is selected to reduce an upper bound on the fill in for any subsequent choice of p . the choice of q can have a dramatic impact on the number of nonzeros in l and u . one scheme for determining a good column ordering for a is to compute a symmetric ordering that reduces fill in in the cholesky factorization of ata . a conventional minimum degree ordering algorithm would require the sparsity structure of ata to be computed , which can be expensive both in terms of space and time since ata may be much denser than a . an alternative is to compute q directly from the sparsity structure of a this strategy is used by matlab ' s colmmd preordering algorithm . a new ordering algorithm , colamd , is presented . it is based on the same strategy but uses a better ordering heuristic . colamd is faster and computes better orderings , with fewer nonzeros in the factors of the matrix .", "rounding algorithms for a geometric embedding of minimum multiway cut . given an undirected graph with edge costs and a subset ofk <digit> nodes <unk> , a multiway , ork way , cut is a subset of the edges whose removal disconnects each terminal from the others . the multiway cut problem is to find a minimum cost multiway cut . this problem is max snp hard . recently , calinescu et al . ( calinescu , g . , h . karloff , y . rabani . <digit> . an improved approximation algorithm for multiway cut . j . comput . system sci . <digit> ( <digit> ) <digit> <digit> ) gave a novel geometric relaxation of the problem and a rounding scheme that produced a ( <digit> <digit> <digit> k ) approximation algorithm . in this paper , we study their geometric relaxation . in particular , we study the worst case ratio between the value of the relaxation and the value of the minimum multicut ( the so called integrality gap of the relaxation ) . fork <digit> , we show the integrality gap is <digit> <digit> , giving tight upper and lower bounds . that is , we exhibit a family of graphs with integrality gaps arbitrarily close to <digit> <digit> and give an algorithm that finds a cut of value <digit> <digit> times the relaxation value . our lower bound shows that this is the best possible performance guarantee for any algorithm based purely on the value of the relaxation . our upper bound meets the lower bound and improves the factor of <digit> <digit> shown by calinescu et al . for allk , we show that there exists a rounding scheme with performance ratio equal to the integrality gap , and we give explicit constructions of polynomial time rounding schemes that lead to improved upper bounds . fork <digit> and <digit> , our best upper bounds are based on computer constructed rounding schemes ( with computer proofs of correctness ) . for <unk> we give an algorithm with performance ratio <digit> . <digit> e k . our results were discovered with the help of computational experiments that we also describe here .", "hard equality constrained integer knapsacks . we consider the following integer feasibility problem given positive integer <unk> , a1 , . . . , a n , with gcd ( a1 , . . . , a n does there exist a <unk> z n <unk> x a0 we prove that if the <unk> , . . . , a <unk> a certain decomposable structure , then the frobenius number associated <unk> , . . . , a n , i . e . , the largest value <unk> for <unk> x a0 does not have a nonnegative integer solution , is close to a known upper bound . in the instances we consider , we <unk> to be the frobenius number . furthermore , we show that the decomposable structure <unk> , . . . , a <unk> the solution of a lattice reformulation of our problem almost trivial , since the number of lattice hyperplanes that intersect the polytope resulting from the reformulation in the direction of the last coordinate is going to be very small . for branch and bound such instances are difficult to solve , since they are infeasible and have large values <unk> a i , <digit> i n . we illustrate our results by some computational examples .", "pictorial structures for object recognition . in this paper we present a computationally efficient framework for part based modeling and recognition of objects . our work is motivated by the pictorial structure models introduced by fischler and elschlager . the basic idea is to represent an object by a collection of parts arranged in a deformable configuration . the appearance of each part is modeled separately , and the deformable configuration is represented by spring like connections between pairs of parts . these models allow for qualitative descriptions of visual appearance , and are suitable for generic recognition problems . we address the problem of using pictorial structure models to find instances of an object in an image as well as the problem of learning an object model from training examples , presenting efficient algorithms in both cases . we demonstrate the techniques by learning models that represent faces and human bodies and using the resulting models to locate the corresponding objects in novel images .", "constraint programming viewed as rule based programming . we study here a natural situation when constraint programming can be entirely reduced to rule based programming . to this end we explain first how one can compute on constraint satisfaction problems using rules represented by simple first order formulas . then we consider constraint satisfaction problems that are based on predefined , explicitly given constraints . to solve them we first derive rules from these explicitly given constraints and limit the computation process to a repeated application of these rules , combined with labeling . we consider two types of rule here . the first type , that we call equality rules , leads to a new notion of local consistency , called rule consistency that turns out to be weaker than arc consistency for constraints of arbitrary arity ( called hyper arc consistency in marriott stuckey ( <digit> ) ) . for boolean constraints rule consistency coincides with the closure under the well known propagation rules for boolean constraints . the second type of rules , that we call membership rules , yields a rule based characterization of arc consistency . to show feasibility of this rule based approach to constraint programming , we show how both types of rules can be automatically generated , as chr rules of <unk> ( <digit> ) . this yields an implementation of this approach to programming by means of constraint logic programming . we illustrate the usefulness of this approach to constraint programming by discussing various examples , including boolean constraints , two typical examples of many valued logics , constraints dealing with waltz ' s language for describing polyhedral scenes , and allen ' s qualitative approach to temporal logic .", "typing constraint logic programs . we present a prescriptive type system with parametric polymorphism and subtyping for constraint logic programs . the aim of this type system is to detect programming errors statically . it introduces a type discipline for constraint logic programs and modules , while maintaining the capabilities of performing the usual coercions between constraint domains , and of typing meta programming predicates , thanks to the exibility of subtyping . the property of subject reduction expresses the consistency of a prescriptive type system w . r . t . the execution model if a program is well typed , then all derivations starting from a well typed goal are again well typed . that property is proved w . r . t . the abstract execution model of constraint programming which proceeds by accumulation of constraints only , and w . r . t . an enriched execution model with type constraints for substitutions . we describe our implementation of the system for type checking and type inference . we report our experimental results on type checking iso prolog , the ( constraint ) libraries of sicstus prolog and other prolog programs .", "a theory of normed simulations . in existing simulation proof techniques , a single step in a lower level specification may be simulated by an extended execution fragment in a higher level one . as a result , it is cumbersome to mechanize these techniques using general purpose theorem provers . moreover , it is undecidable whether a given relation is a simulation , even if tautology checking is decidable for the underlying specification logic . this article studies various types of < i > normed simulations < i > . in a normed simulation , each step in a lower level specification can be simulated by at most one step in the higher level one , for any related pair of states . in earlier work we demonstrated that normed simulations are quite useful as a vehicle for the formalization of refinement proofs via theorem provers . here we show that normed simulations also have pleasant theoretical properties ( <digit> ) under some reasonable assumptions , it is decidable whether a given relation is a normed forward simulation , provided tautology checking is decidable for the underlying logic ( <digit> ) at the semantic level , normed forward and backward simulations together form a complete proof method for establishing behavior inclusion , provided that the higher level specification has finite invisible nondeterminism .", "a statistical analysis of the long run node spatial distribution in mobile ad hoc networks . in this paper , we analyze the node spatial distribution of mobile wireless ad hoc networks . characterizing this distribution is of fundamental importance in the analysis of many relevant properties of mobile ad hoc networks , such as connectivity , average route length , and network capacity . in particular , we have investigated under what conditions the node spatial distribution resulting after a large number of mobility steps resembles the uniform distribution . this is motivated by the fact that the existing theoretical results concerning mobile ad hoc networks are based on this assumption . in order to test this hypothesis , we performed extensive simulations using two well known mobility models the random waypoint model , which resembles intentional movement , and a brownian like model , which resembles nonintentional movement . our analysis has shown that in brownian like motion the uniformity assumption does hold , and that the intensity of the concentration of nodes in the center of the deployment region that occurs in the random waypoint model heavily depends on the choice of some mobility parameters . for extreme values of these parameters , the uniformity assumption is impaired .", "adaptive dissemination of data in time critical asymmetric communication environments . the proliferation of new data intensive applications in asymmetric communication environments has led to an increasing interest in the development of push based techniques , in which the information is broadcast to a large population of clients in order to achieve the most efficient use of the limited server and communication resources . it is important to note that quite often the data that is broadcast is time critical in nature . most of the related current research focuses on a pure push based approach ( broadcast disks model ) , where the transmission of data is done without allowing explicit requests from the users . more recently , some bidirectional models incorporating a low capacity uplink channel have been proposed in order to increase the functionality of the broadcast disks model . however , the impact of integration of the uplink channel has been investigated using only static client profiles or ignoring the existence of time sensitive data . none of the existing models integrates all the characteristics needed to perform effectively in a real world , dynamic time critical asymmetric communication environment . in this paper we present an adaptive data dissemination model and the associated on line scheduling algorithms . these improve the functionality and performance of bidirectional broadcast models , maximizing the total number of satisfied users in asymmetric communication environments with dynamic client profiles and time requirements ( e . g . , mobile systems ) . this is achieved by means of dynamic adaptation of the broadcast program to the needs of the users , taking into account the bandwidth constraints inherent in asymmetric communication environments and the deadline requirements of the user requests . performance is evaluated by simulation of a real time asymmetric communication environment", "wait free synchronization . a wait free implementation of a concurrent data object is one that guarantees that any process can complete any operation in a finite number of steps , regardless of the execution speeds of the other processes . the problem of constructing a wait free implementation of one data object from another lies at the heart of much recent work in concurrent algorithms , concurrent data structures , and multiprocessor architectures . first , we introduce a simple and general technique , based on reduction to a concensus protocol , for proving statements of the form , there is no wait free implementation of x by y . we derive a hierarchy of objects such that no object at one level has a wait free implementation in terms of objects at lower levels . in particular , we show that atomic read write registers , which have been the focus of much recent attention , are at the bottom of the hierarchy <unk> can not be used to construct wait free implementations of many simple and familiar data types . moreover , classical synchronization primitives such <unk> set and fetch add , while more powerful than read and write , are also computationally weak , as are the standard message passing primitives . second , nevertheless , we show that there do exist simple universal objects from which one can construct a wait free implementation of any sequential object .", "short signatures from the weil pairing . we introduce a short signature scheme based on the computational diffiehellman assumption on certain elliptic and hyperelliptic curves . for standard security parameters , the signature length is about half that of a dsa signature with a similar level of security . our short signature scheme is designed for systems where signatures are typed in by a human or are sent over a low bandwidth channel . we survey a number of properties of our signature scheme such as signature aggregation and batch verification .", "towards provable security for ad hoc routing protocols . we propose a formal framework for the security analysis of on demand source routing protocols for wireless ad hoc networks . our approach is based on the well known simulation paradigm that has been proposed to prove the security of cryptographic protocols . our main contribution is the application of the simulation based approach in the context of ad hoc routing . this involves a precise definition of a real world model , which describes the real operation of the protocol , and an ideal world model , which captures what the protocol wants to achieve in terms of security . both models take into account the peculiarities of wireless communications and ad hoc routing . then , we give a formal definition of routing security in terms of indistinguishability of the two models from the point of view of honest parties . we demonstrate the usefulness of our approach by analyzing two secure ad hoc routing protocols , srp and ariadne . this analysis leads to the discovery of as yet unknown attacks against both protocols . finally , we propose a new ad hoc routing protocol and prove it to be secure in our model .", "location diversity in anonymity networks . anonymity networks have long relied on diversity of node location for protection against attacks typically an adversary who can observe a larger fraction of the network can launch a more effective attack . we investigate the diversity of two deployed anonymity networks , mixmaster and tor , with respect to an adversary who controls a single internet administrative domain . specifically , we implement a variant of a recently proposed technique that passively estimates the set of administrative domains ( also known as autonomous systems , or ases ) between two arbitrary end hosts without having access to either end of the path . using this technique , we analyze the as level paths that are likely to be used in these anonymity networks . we find several cases in each network where multiple nodes are in the same administrative domain . further , many paths between nodes , and between nodes and popular endpoints , traverse the same domain .", "( optimal ) duplication is not elementary recursive . in <digit> , asperti and mairson proved that the cost of reducing a term using an optimal reducer ( a la <unk> ) can not be bound by any elementary function in the number of shared beta steps . we prove in this paper that an analogous result holds for lamping ' s abstract algorithm . that is , there is no elementary function in the number of shared beta steps bounding the number of duplication steps of the optimal reducer . this theorem vindicates the oracle of lamping ' s algorithm as the culprit for the negative result of asperti and mairson . the result is obtained using as a technical tool elementary affine logic .", "on learning monotone dnf under product distributions . we show that the class of monotone <digit> < sup > o ( log < i > n < i > ) < sup > term dnf formulae can be pac learned in polynomial time under the uniform distribution from random examples only . this is an exponential improvement over the best previous polynomial time algorithms in this model , which could learn monotone o ( log < sup > <digit> < sup > < i > n < i > ) term dnf . we also show that various classes of small constant depth circuits which compute monotone functions are pac learnable in polynomial time under the uniform distribution . all of our results extend to learning under any constant bounded product distribution .", "efficient incremental algorithms for dynamic detection of likely invariants . dynamic detection of likely invariants is a program analysis that generalizes over observed values to hypothesize program properties . the reported program properties are a set of likely invariants over the program , also known as an operational abstraction . operational abstractions are useful in testing , verification , bug detection , refactoring , comparing behavior , and many other tasks . previous techniques for dynamic invariant detection scale poorly or report too few properties . incremental algorithms are attractive because they process each observed value only once and thus scale well with data sizes . previous incremental algorithms only checked and reported a small number of properties . this paper takes steps toward correcting this problem . the paper presents two new incremental algorithms for invariant detection and compares them analytically and experimentally to two existing algorithms . furthermore , the paper presents four optimizations and shows how to implement them in the context of incremental algorithms . the result is more scalable invariant detection that does not sacrifice functionality .", "reusable cryptographic fuzzy extractors . we show that a number of recent definitions and constructions of fuzzy extractors are not adequate for multiple uses of the same fuzzy secret a major shortcoming in the case of biometric applications . we propose two particularly stringent security models that specifically address the case of fuzzy secret reuse , respectively from an outsider and an insider perspective , in what we call a chosen perturbation attack . we characterize the conditions that fuzzy extractors need to satisfy to be secure , and present generic constructions from ordinary building blocks . as an illustration , we demonstrate how to use a biometric secret in a remote fuzzy authentication protocol that does not require any storage on the client ' s side .", "id based encryption for complex hierarchies with applications to forward security and broadcast encryption . a forward secure encryption scheme protects secret keys from exposure by evolving the keys with time . forward security has several unique requirements in hierarchical identity based encryption ( hibe ) scheme ( <digit> ) users join dynamically ( <digit> ) encryption is joining time oblivious ( <digit> ) users evolve secret keys autonomously . we present a scalable forward secure hibe ( fs hibe ) scheme satisfying the above properties . we also show how our fs hibe scheme can be used to construct a forward secure public key broadcast encryption scheme , which protects the secrecy of prior transmissions in the broadcast encryption setting . we further generalize fs hibe into a collusion resistant multiple hierarchical id based encryption scheme , which can be used for secure communications with entities having multiple roles in role based access control . the security of our schemes is based on the bilinear diffie hellman assumption in the random oracle model .", "models of software development environments . a general model of software development environments that consists of structures , mechanisms , and policies is presented . the advantage of this model is that it distinguishes intuitively those aspects of an environment that are useful in comparing and contrasting software development environments . four classes of environments the individual , the family , the city . and the state are characterized by means of a sociological metaphor based on scale . the utility of the taxonomy is that it delineates the important classes of interactions among software developers and exposes the ways in which current software development environments inadequately support the development of large systems . the generality of the model is demonstrated by its application to a previously published taxonomy that categorizes environments according to how they relate to language centered , structure oriented , toolkit , and method based environments .", "reliable solution of special event location problems for odes . computing the solution of the initial value problem in ordinary differential equations ( odes ) may be only part of a larger task . one such task is finding where an algebraic function of the solution ( an event function ) has a root ( an event occurs ) . this is a task which is difficult both in theory and in software practice . for certain useful kinds of event functions , it is possible to avoid two fundamental difficulties . it is described how to achieve the reliable solutions of such problems in a way that allows the capability to be grafted onto popular codes for the initial value problem .", "mixed finite element approximation of incompressible mhd problems based on weighted regularization . we introduce and analyze a new mixed finite element method for the numerical approximation of stationary incompressible magneto hydrodynamics ( mhd ) problems in polygonal and polyhedral domains . the method is based on standard inf sup stable elements for the discretization of the hydrodynamic unknowns and on nodal elements for the discretization of the magnetic variables . in order to achieve convergence in non convex domains , the magnetic bilinear form is suitably modified using the weighted regularization technique recently developed in numer . math . <digit> ( <digit> ) <digit> . we first discuss the well posedness of this approach and establish a novel existence and uniqueness result for non linear mhd problems with small data . we then derive quasi optimal error bounds for the proposed finite element method and show the convergence of the approximate solutions in non convex domains . the theoretical results are confirmed in a series of numerical experiments for a linear two dimensional oseen type mhd problem , demonstrating that weighted regularization is indispensable for the resolution of the strongest magnetic singularities .", "i o efficient dynamic planar point location . we present an i o efficient dynamic data structure for point location in a general planar subdivision . our structure uses o ( < i > n b < i > ) disk blocks of size < i > b < i > to store a subdivision of size < i > n < i > . queries can be answered in o ( log < inf > < i > b < i > < inf > < sup > <digit> < sup > < i > n < i > ) i os in the worst case , and insertions and deletions can be performed in o ( log < inf > < i > b < i > < inf > < sup > <digit> < sup > < i > n < i > ) and o ( log < inf > < i > b < i > < inf > < i > n < i > ) i os amortized , respectively . part of our data structure is based on an external version of the so called logarithmic method that allows for efficient dynamization of static external memory data structures with certain characteristics . another important part of our structure is an external data structure for vertical ray shooting among line segments in the plane with endpoints on < i > b < i > lines , developed using an external version of dynamic fractional cascading . we believe that these methods could prove helpful in the development of other dynamic external memory data structures .", "on relations between counting communication complexity classes . we develop upper and lower bound arguments for counting acceptance modes of communication protocols . a number of separation results for counting communication complexity classes is established . this extends the investigation of the complexity of communication between two processors in terms of complexity classes initiated by babai et al . ( proceedings of the 27th ieee focs , <digit> , pp . <digit> <digit> ) and continued in several papers ( e . g . , j . comput . system sci . <digit> ( <digit> ) <digit> <digit> ( <digit> ) <digit> proceedings of the 36th ieee focs , <digit> , pp . <digit> <digit> ) . in particular , it will be shown that for all pairs of distinct primes < i > p < i > and < i > q < i > the communication complexity classes mod < inf > < i > p < i > < inf > < i > p < i > < sup > cc < sup > and mod < inf > < i > q < i > < inf > < i > p < i > < sup > cc < sup > are incomparable with regard to inclusion . the same is true for pp < sup > cc < sup > and mod < inf > < i > m < i > < inf > < i > p < i > < sup > cc < sup > , for any number < i > m < i > <digit> . moreover , non determinism and modularity are incomparable to a large extend . on the other hand , if < i > m < i > < i > p < i > < inf > <digit> < inf > < i > l < i > < inf > <digit> < inf > ' . . . ' < i > p < i > < inf > r < inf > < i > l < i > < inf > r < inf > is the prime decomposition of < i > m < i > <digit> , then the complexity classes mod < inf > < i > m < i > < inf > < i > p < i > < sup > cc < sup > and mod < inf > < i > ( m ) < i > < inf > < i > p < i > < sup > cc < sup > coincide , where < i > ( m ) < i > < i > p < i > < inf > <digit> < inf > ' . . . ' < i > p < i > < inf > r < inf > . the results are obtained by characterizing the modular and probabilistic communication complexity in terms of the minimum rank of matrices ranging over certain equivalence classes . methods from algebra and analytic geometry are used . this paper is the completely revised and strongly extended version of the conference paper damm et al . ( proc . 9th ann . stacs , pp . <digit> <digit> ) where a subset of the results was presented .", "dynamically adapting registration areas to user mobility and call patterns for efficient location management in pcs networks . in this paper , we propose an extension to the personal communication services ( pcs ) location management protocol which uses dynamically overlapped registration areas . the scheme is based on monitoring the aggregate mobility and call pattern of the users during each reconfiguration period and adapting to the mobility and call patterns by either expanding or shrinking registration areas at the end of each reconfiguration period . we analytically characterize the trade off resulting from the inclusion or exclusion of a cell in a registration area in terms of expected change in aggregate database access cost and signaling overhead . this characterization is used to guide the registration area adaption in a manner in which the signaling and database access load on any given location register ( lr ) does not exceed a specified limit . our simulation results show that it is useful to dynamically adapt the registration areas to the aggregate mobility and call patterns of the mobile units when the mobility pattern exhibits locality . for such mobility and call patterns , the proposed scheme can greatly reduce the average signaling and database access load on lrs . further , the cost of adapting the registration areas is shown to be low in terms of memory and communication requirements .", "software trace cache . this paper explores the use of compiler optimizations which optimize the layout of instructions in memory . the target is to enable the code to make better use of the underlying hardware resources regardless of the specific details of the processor architecture in order to increase fetch performance . the software trace cache ( stc ) is a code layout algorithm with a broader target than previous layout optimizations . we target not only an improvement in the instruction cache hit rate , but also an increase in the effective fetch width of the fetch engine . the stc algorithm organizes basic blocks into chains trying to make sequentially executed basic blocks reside in consecutive memory positions , then maps the basic block chains in memory to minimize conflict misses in the important sections of the program . we evaluate and analyze in detail the impact of the stc , and code layout optimizations in general , on the three main aspects of fetch performance the instruction cache hit rate , the effective fetch width , and the branch prediction accuracy . our results show that layout optimized codes have some special characteristics that make them more amenable for high performance instruction they have a very high rate of not taken branches and execute long chains of sequential instructions also , they make very effective use of instruction cache lines , mapping only useful instructions which will execute close in time , increasing both spatial and temporal locality .", "random walks on truncated cubes and sampling <digit> <digit> knapsack solutions . we solve an open problem concerning the mixing time of symmetric random walk on the n dimensional cube truncated by a hyperplane , showing that it is polynomial in n . as a consequence , we obtain a fully polynomial randomized approximation scheme for counting the feasible solutions of a <digit> <digit> knapsack problem . the results extend to the case of any fixed number of hyperplanes . the key ingredient in our analysis is a combinatorial construction we call a balanced almost uniform permutation , which is of independent interest .", "detecting global predicates in distributed systems with clocks . this paper proposes a framework for detecting global state predicates in systems of processes with approximately synchronized real time clocks . timestamps from these clocks are used to define two orderings on events definitely occurred before and possibly occurred before . these orderings lead naturally to definitions of <digit> distinct detection modalities , i . e . , <digit> meanings of predicate held during a computation , namely poss < sup > < i > db < i > < sup > ( possibly held ) , definitely held ) , and inst ( definitely held in a specific global state ) . this paper defines these modalities and gives efficient algorithms for detecting them . the algorithms are based on algorithms of garg and waldecker , alagar and venkatesan , cooper and marzullo , and fromentin and raynal . complexity analysis shows that under reasonable assumptions , these real time clock based detection algorithms are less expensive than detection algorithms based on lamport ' s happened before ordering . sample applications are given to illustrate the benefits of this approach .", "superstabilizing mutual exclusion . a superstabilizing protocol is a protocol that ( i ) is self stabilizing , meaning that it can recover from an arbitrarily severe transient fault and ( ii ) can recover from a local transient fault while satisfying a passage predicate during recovery . this paper investigates the possibility of superstabilizing protocols for mutual exclusion in a ring of processors , where a local fault consists of any transient fault at a single processor the passage predicate specifies that there be at most one token in the ring , with the single exception of a spurious token colocated with the transient fault . the first result of the paper is an impossibility theorem for a class of superstabilizing mutual exclusion protocols . two unidirectional protocols are then presented to show that conditions for impossibility can independently be relaxed so that superstabilization is possible using either additional time or communication registers . a bidirectional protocol subsequently demonstrates that superstabilization in < i > o < i > ( <digit> ) time is possible . all three superstabilizing protocols are optimal with respect to the number of communication registers used .", "secure reliable multicast protocols in a wan . a secure reliable multicast protocol enables a process to send a message to a group of recipients such that all correct destinations receive the same message , despite the malicious efforts of fewer than a third of the total number of processes , including the sender . this has been shown to be a useful tool in building secure distributed services , albeit with a cost that typically grows linearly with the size of the system . for very large networks , for which this is prohibitive , we present two approaches for reducing the cost first , we show a protocol whose cost is on the order of the number of tolerated failures . secondly , we show how relaxing the consistency requirement to a probabilistic guarantee can reduce the associated cost , effectively to a constant .", "communication based prevention of useless checkpoints in distributed computations . a useless checkpoint is a local checkpoint that can not be part of a consistent global checkpoint . this paper addresses the following problem . given a set of processes that take ( basic ) local checkpoints in an independent and unknown way , the problem is to design communication induced checkpointing protocols that direct processes to take additional local ( forced ) checkpoints to ensure no local checkpoint is useless . the paper first proves two properties related to integer timestamps which are associated with each local checkpoint . the first property is a necessary and sufficient condition that these timestamps must satisfy for no checkpoint to be useless . the second property provides an easy timestamp based determination of consistent global checkpoints . then , a general communication induced checkpointing protocol is proposed . this protocol , derived from the two previous properties , actually defines a family of timestamp based communication induced checkpointing protocols . it is shown that several existing checkpointing protocols for the same problem are particular instances of the general protocol . the design of this general protocol is motivated by the use of communication induced checkpointing protocols in consistent global checkpoint based distributed applications such as the detection of stable or unstable properties and the determination of distributed breakpoints .", "constraint based structuring of network protocols . the complexity of designing protocols has led to compositional techniques for designing and verifying protocols . we propose a technique based on the notion of parallel composition of protocols . we view a composite protocol as an interleaved execution of the component protocols subject to a set of constraints . using the constraints as building blocks , we define several constraint based structures with each structure combining the properties of the component protocols in a different way . for instance , the component protocols of a multifunction protocol can be structured so that the composite protocol performs all the individual functions concurrently or performs only one of them depending on the order of initiation of the component protocols . we provide inference rules to infer safety and liveness properties of the composite protocol . some properties are derived from those of the component protocols while others are derived from the structuring mechanism ( the set of constraints ) used to combine the component protocols .", "byzantine quorum systems . quorum systems are well known tools for ensuring the consistency and availability of replicated data despite the benign failure of data repositories . in this paper we consider the arbitrary ( byzantine ) failure of data repositories and present the first study of quorum system requirements and constructions that ensure data availability and consistency despite these failures . we also consider the load associated with our quorum systems , i . e . , the minimal access probability of the busiest server . for services subject to arbitrary failures , we demonstrate quorum systems over < i > n < i > servers with a load of < i > o < i > ( <digit> < i > n < i > ) , thus meeting the lower bound on load for benignly fault tolerant quorum systems . we explore several variations of our quorum systems and extend our constructions to cope with arbitrary client failures .", "keeping track of the latest gossip in a distributed system . we tackle a natural problem from distributed computing , involving time stamps . let < i > p < i > < i > p < i > < inf > <digit> < inf > , < i > p < i > < inf > <digit> < inf > , . . . , < i > p < i > < inf > n < inf > be a set of computing agents or processes which synchronize with each other from time to time and exchange information about themselves and others . the gossip problem is the following whenever a set < i > p < i > < i > p < i > meets , the processes in < i > p < i > must decide amongst themselves which of them has the latest information , direct or indirect , about each agent < i > p < i > in the system . we propose an algorithm to solve this problem which is finite state and local . formally , this means that our algorithm can be implemented as an asynchronous automation .", "efficient leader election using sense of direction . this paper presents a protocol for leader election in complete networks with a sense of direction . sense of direction provides nodes the capability of distinguishing between their incident links according to a global scheme . we propose a protocol for leader election which requires < i > o ( n ) < i > messages and < i > o < i > ( log < i > n < i > ) time . the protocol is message optimal and the time complexity is a significant improvement over currently known protocols for this problem .", "randomized naming using wait free shared variables . a naming protocol assigns unique names ( keys ) to every process out of a set of communicating processes . we construct a randomized wait free naming protocol using wait free atomic read write registers ( shared variables ) as process intercommunication primitives . each process has its own private register and can read all others . the addresses names each one uses for the others are possibly different processes < i > p < i > and < i > q < i > address the register of process < i > r < i > in a way not known to each other . for < i > n < i > processes and > <digit> , the protocol uses a name space of size ( <digit> ) < i > n < i > and < i > o < i > ( < i > n < i > log < i > n < i > log log < i > n < i > ) running time ( read writes to shared bits ) with probability at least <digit> < i > o < i > ( <digit> ) , and < i > o < i > ( < i > n < i > log < sup > <digit> < sup > < i > n < i > ) overall expected running time . the protocol is based on the wait free implementation of a novel test <unk> object that randomly and fast selects a winner from a set of < i > q < i > contenders with probability at least in the face of the strongest possible adaptive adversary .", "communication lower bounds for distributed memory matrix multiplication . we present lower bounds on the amount of communication that matrix multiplication algorithms must perform on a distributed memory parallel computer . we denote the number of processors by < i > p < i > and the dimension of square matrices by < i > n < i > . we show that the most widely used class of algorithms , the so called two dimensional ( 2d ) algorithms , are optimal , in the sense that in any algorithm that only uses < i > o < i > ( < i > n < i > < sup > <digit> < sup > < i > p < i > ) words of memory per processor , at least one processor must send or receive ( < i > n < i > < sup > <digit> < sup > < i > p < i > < sup > <digit> <digit> < sup > ) words . we also show that algorithms from another class , the so called three dimensional ( 3d ) algorithms , are also optimal . these algorithms use replication to reduce communication . we show that in any algorithm that uses < i > o < i > ( < i > n < i > < sup > <digit> < sup > < i > p < i > < sup > <digit> <digit> < sup > ) words of memory per processor , at least one processor must send or receive ( < i > n < i > < sup > <digit> < sup > < i > p < i > < sup > <digit> <digit> < sup > ) words . furthermore , we show a continuous tradeoff between the size of local memories and the amount of communication that must be performed . the 2d and 3d bounds are essentially instantiations of this tradeoff . we also show that if the input is distributed across the local memories of multiple nodes without replication , then ( < i > n < i > < sup > <digit> < sup > ) words must cross any bisection cut of the machine . all our bounds apply only to conventional ( < i > n < i > < sup > <digit> < sup > ) algorithms . they do not apply to strassen ' s algorithm or other < i > o < i > ( < i > n < i > < sup > <digit> < sup > ) algorithms .", "approximation algorithms for partial covering problems . we study a generalization of covering problems called partial covering . here we wish to cover only a desired number of elements , rather than covering all elements as in standard covering problems . for example , in < i > k < i > partial set cover , we wish to choose a minimum number of sets to cover at least < i > k < i > elements . for < i > k < i > partial set cover , if each element occurs in at most < i > f < i > sets , then we derive a primal dual < i > f < i > approximation algorithm ( thus implying a <digit> approximation for < i > k < i > partial vertex cover ) in polynomial time . without making any assumption about the number of sets an element is in , for instances where each set has cardinality at most three , we obtain an approximation of <digit> <digit> . we also present better than <digit> approximation algorithms for < i > k < i > partial vertex cover on bounded degree graphs , and for vertex cover on expanders of bounded average degree . we obtain a polynomial time approximation scheme for < i > k < i > partial vertex cover on planar graphs , and for covering < i > k < i > points in < i > r < sup > d < sup > < i > by disks .", "on exact selection of minimally unsatisfiable subformulae . a minimally unsatisfiable subformula ( mus ) is a subset of clauses of a given cnf formula which is unsatisfiable but becomes satisfiable as soon as any of its clauses is removed . the selection of a mus is of great relevance in many practical applications . this expecially holds when the propositional formula encoding the application is required to have a well defined satisfiability property ( either to be satisfiable or to be unsatisfiable ) . while selection of a mus is a hard problem in general , we show classes of formulae where this problem can be solved efficiently . this is done by using a variant of farkas ' lemma and solving a linear programming problem . successful results on real world contradiction detection problems are presented .", "crossing number , pair crossing number , and expansion . the < i > crossing number < i > cr ( < i > g < i > ) of a graph < i > g < i > is the minimum possible number of edge crossings in a drawing of < i > g < i > in the plane , while the < i > pair crossing number < i > pcr ( < i > g < i > ) is the smallest number of pairs of edges that cross in a drawing of < i > g < i > in the plane . while cr ( < i > g < i > ) pcr ( < i > g < i > ) holds trivially , it is not known whether a strict inequality can ever occur ( this question was raised by mohar and pach and tth ) . we aim at bounding cr ( < i > g < i > ) in terms of pcr ( < i > g < i > ) . using the methods of leighton and rao , bhatt and leighton , and even , guha and schieber , we prove that one of the main steps is an analogy of the well known lower bound cr ( < i > g < i > ) ( < i > b < i > ( < i > g < i > ) < sup > <digit> < sup > ) < i > o < i > ( <unk> ( < i > g < i > ) ) , where < i > b ( g ) < i > is the < i > bisection width < i > of < i > g < i > , that is , the smallest number of edges that have to be removed so that no component of the resulting graph has more than <digit> <digit> < i > n < i > vertices . we show that we also prove by similar methods that a graph < i > g < i > with crossing number log < sup > <digit> < sup > < i > n < i > has a nonplanar subgraph on at most < i > o < i > ( < i > nm < i > log < sup > <digit> < sup > < i > n < i > < i > k < i > ) vertices , where < i > m < i > is the number of edges , is the maximum degree in < i > g < i > , and < i > c < i > is a suitable sufficiently large constant .", "scenario based comparison of source tracing and dynamic source routing protocols for ad hoc networks . we present source tracing as a new viable approach to routing in ad hoc networks in which routers communicate the second to last hop and distance in preferred paths to destinations . we introduce a table driven protocol ( best ) in which routers maintain routing information for all destinations , and an on demand routing protocol ( dst ) in which routers maintain routing information for only those destinations to whom they need to forward data . simulation experiments are used to compare these protocols with dsr , which has been shown to incur less control overhead that other on demand routing protocols . the simulations show that dst requires far less control packets to achieve comparable or better average delays and percentage of packet delivered than dsr , and that best achieves comparable results to dsr while maintaining routing information for all destinations .", "building minority language corpora by learning to generate web search queries . the web is a source of valuable information , but the process of collecting , organizing , and effectively utilizing the resources it contains is difficult . we describe corpusbuilder , an approach for automatically generating web search queries for collecting documents matching a minority concept . the concept used for this paper is that of text documents belonging to a minority natural language on the web . individual documents are automatically labeled as relevant or nonrelevant using a language filter , and the feedback is used to learn what query lengths and inclusion exclusion term selection methods are helpful for finding previously unseen documents in the target language . our system learns to select good query terms using a variety of term scoring methods . using < i > odds ratio < i > scores calculated over the documents acquired was one of the most consistently accurate query generation methods . to reduce the number of estimated parameters , we parameterize the query length using a gamma distribution and present empirical results with learning methods that vary the time horizon used when learning from the results of past queries . we find that our system performs well whether we initialize it with a whole document or with a handful of words elicited from a user . experiments applying the same approach to multiple languages are also presented showing that our approach generalizes well across several languages regardless of the initial conditions .", "collaborative filtering with maximum entropy . the authors describe a novel maximum entropy ( maxent ) approach for generating online recommendations as a user navigates through a collection of documents . they show how to handle high dimensional sparse data and represent it as a collection of ordered sequences of document requests . this representation and the maxent approach have several advantages ( <digit> ) you can naturally model long term interactions and dependencies in the data sequences ( <digit> ) you can query the model quickly once it is learned , which makes the method applicable to high volume web servers and ( <digit> ) you obtain empirically high quality recommendations . although maxent learning is computationally infeasible if implemented in the straightforward way , the authors explored data clustering and several algorithmic techniques to make learning practical even in high dimensions . they present several methods for combining the predictions of maxent models learned in different clusters . they conducted offline tests using over six months ' worth of data from researchindex , a popular online repository of over <digit> , <digit> computer science documents . they show that their maxent algorithm is one of the most accurate recommenders , as compared to such techniques as correlation , a mixture of markov models , a mixture of multinomial models , individual similarity based recommenders currently available on researchindex , and even various combinations of current researchindex recommenders .", "privacy preserving data mining . data mining is under attack from privacy advocates because of a misunderstanding about what it actually is and a valid concern about how it ' s generally done . this article shows how technology from the security community can change data mining for the better , providing all its benefits while still maintaining privacy .", "selection of views to materialize in a data warehouse . a data warehouse stores materialized views of data from one or more sources , with the purpose of efficiently implementing decision support or olap queries . one of the most important decisions in designing a data warehouse is the selection of materialized views to be maintained at the warehouse . the goal is to select an appropriate set of views that minimizes total query response time and the cost of maintaining the selected views , given a limited amount of resource , e . g . , materialization time , storage space , etc . in this article , we have developed a theoretical framework for the general problem of selection of views in a data warehouse . we present polynomial time heuristics for a selection of views to optimize total query response time under a disk space constraint , for some important special cases of the general data warehouse scenario , viz . <digit> ) an and view graph , where each query view has a unique evaluation , e . g . , when a multiple query optimizer can be used to general a global evaluation plan for the queries , and <digit> ) an or view graph , in which any view can be computed from any one of its related views , e . g . , data cubes . we present proofs showing that the algorithms are guaranteed to provide a solution that is fairly close to ( within a constant factor ratio of ) the optimal solution . we extend our heuristic to the general and or view graphs . finally , we address in detail the view selection problem under the maintenance cost constraint and present provably competitive heuristics .", "efficient learning equilibrium . we introduce efficient learning equilibrium ( ele ) , a normative approach to learning in noncooperative settings . in ele , the learning algorithms themselves are required to be in equilibrium . in addition , the learning algorithms must arrive at a desired value after polynomial time , and a deviation from the prescribed ele becomes irrational after polynomial time . we prove the existence of an ele ( where the desired value is the expected payoff in a nash equilibrium ) and of a pareto ele ( where the objective is the maximization of social surplus ) in repeated games with perfect monitoring . we also show that an ele does not always exist in the imperfect monitoring case . finally , we discuss the extension of these results to general sum stochastic games .", "proving convergence of self stabilizing systems using first order rewriting and regular languages . in the framework of self stabilizing systems , the convergence proof is generally done by exhibiting a measure that strictly decreases until a legitimate configuration is reached . the discovery of such a measure is very specific and requires a deep understanding of the studied transition system . in contrast we propose here a simple method for proving convergence , which regards self stabilizing systems as string rewrite systems , and adapts a procedure initially designed by dershowitz for proving termination of string rewrite systems . in order to make the method terminate more often , we also propose an adapted procedure that manipulates schemes , i . e . regular sets of words , and incorporates a process of scheme generalization . the interest of the method is illustrated on several nontrivial examples .", "exponential lower bound for <digit> query locally decodable codes via a quantum argument . a locally decodable code ( ldc ) encodes n bit strings x in m bit codewords c ( x ) in such a way that one can recover any bit xi from a corrupted codeword by querying only a few bits of that word . we use a quantum argument to prove that ldcs with <digit> classical queries require exponential <digit> ( n ) . previously , this was known only for linear codes ( goldreich et al . , in proceedings of 17th ieee conference on computation complexity , <digit> , pp . <digit> <digit> ) . the proof proceeds by showing that a <digit> query ldc can be decoded with a single quantum query , when defined in an appropriate sense . it goes on to establish an exponential lower bound on any ' l query locally quantum decodable code ' . we extend our lower bounds to non binary alphabets and also somewhat improve the polynomial lower bounds by katz and trevisan for ldcs with more than <digit> queries . furthermore , we show that q quantum queries allow more succinct ldcs than the best known ldcs with q classical queries . finally , we give new classical lower bounds and quantum upper bounds for the setting of private information retrieval . in particular , we exhibit a quantum <digit> server private information retrieval ( pir ) scheme with o ( n3 <digit> ) qubits of communication , beating the o ( n1 <digit> ) bits of communication of the best known classical <digit> server pir .", "a tight bound on approximating arbitrary metrics by tree metrics . in this paper , we show that any n point metric space can be embedded into a distribution over dominating tree metrics such that the expected stretch of any edge is o ( log n ) . this improves upon the result of bartal who gave a bound of o ( log n log log n ) . moreover , our result is existentially tight there exist metric spaces where any tree embedding must have distortion ( log n ) distortion . this problem lies at the heart of numerous approximation and online algorithms including ones for group steiner tree , metric labeling , buy at bulk network design and metrical task system . our result improves the performance guarantees for all of these problems .", "load balancing scatter operations for grid computing . we present solutions to statically load balance scatter operations in parallel codes run on grids . our load balancing strategy is based on the modification of the data distributions used in scatter operations . we study the replacement of scatter operations with parameterized scatters , allowing custom distributions of data . the paper presents ( <digit> ) a general algorithm which finds an optimal distribution of data across processors ( <digit> ) a quicker guaranteed heuristic relying on hypotheses on communications and computations ( <digit> ) a policy on the ordering of the processors . experimental results with an mpi scientific code illustrate the benefits obtained from our load balancing .", "spatial gossip and resource location protocols . the dynamic behavior of a network in which information is changing continuously over time requires robust and efficient mechanisms for keeping nodes updated about new information . gossip protocols are mechanisms for this task in which nodes communicate with one another according to some underlying deterministic or randomized algorithm , exchanging information in each communication step . in a variety of contexts , the use of randomization to propagate information has been found to provide better reliability and scalability than more regimented deterministic approaches . in many settings , such as a cluster of distributed computing hosts , new information is generated at individual nodes , and is most interesting to nodes that are nearby . thus , we propose distance based propagation bounds as a performance measure for gossip mechanisms a node at distance d from the origin of a new piece of information should be able to learn about this information with a delay that grows slowly with d , and is independent of the size of the network . for nodes arranged with uniform density in euclidean space , we present natural gossip mechanisms , called spatial gossip , that satisfy such a guarantee new information is spread to nodes at distance d , with high probability , in o ( log1 steps . such a bound combines the desirable qualitative features of uniform gossip , in which information is spread with a delay that is logarithmic in the full network size , and deterministic flooding , in which information is spread with a delay that is linear in the distance and independent of the network size . our mechanisms and their analysis resolve a conjecture of demers et al . <digit> . we further show an application of our gossip mechanisms to a basic resource location problem , in which nodes seek to rapidly learn the location of the nearest copy of a resource in a network . this problem , which is of considerable practical importance , can be solved by a very simple protocol using spatial gossip , whereas we can show that no protocol built on top of uniform gossip can inform nodes of their approximately nearest resource within poly logarithmic time . the analysis relies on an additional useful property of spatial gossip , namely that information travels from its source to sinks along short paths not visiting points of the network far from the two nodes .", "fast monte carlo algorithms for finding low rank approximations . we consider the problem of approximating a given m n matrix a by another matrix of specified rank k , which is smaller than m and n . the singular value decomposition ( svd ) can be used to find the best such approximation . however , it takes time polynomial in m , n which is prohibitive for some modern applications . in this article , we develop an algorithm that is qualitatively faster , provided we may sample the entries of the matrix in accordance with a natural probability distribution . in many applications , such sampling can be done efficiently . our main result is a randomized algorithm to find the description of a matrix d of rank at most k so that holds with probability at least <digit> ( where verbar verbar f is the frobenius norm ) . the algorithm takes time polynomial in k , <digit> epsi , log ( <digit> ) only and is independent of m and n . in particular , this implies that in constant time , it can be determined if a given matrix of arbitrary size has a good low rank approximation .", "on the multiplicity of parts in a random composition of a large integer . in this paper we study the following question posed by h . s . wilf what is , asymptotically as n rightarrow infty , the probability that a randomly chosen part size in a random composition of an integer n has multiplicity m more specifically , given positive integers n and m , suppose that a composition lambda of n is selected uniformly at random and then , out of the set of part sizes in lambda , a part size j is chosen uniformly at random . let p ( a n ( m ) ) be the probability that j has multiplicity m . we show that for fixed m , p ( a n ( m ) ) goes to <digit> at the rate <digit> ln n . a more careful analysis uncovers an unexpected result ( ln n ) p ( a n ( m ) ) does not have a limit but instead oscillates around the value <digit> m as n to infty . this work is a counterpart of a recent paper of corteel , pittel , savage , and wilf , who studied the same problem in the case of partitions rather than compositions .", "approximation algorithms for the <digit> extension problem . in the <digit> extension problem , we are given a weighted graph with some nodes marked as terminals and a semimetric on the set of terminals . our goal is to assign the rest of the nodes to terminals so as to minimize the sum , over all edges , of the product of the edge ' s weight and the distance between the terminals to which its endpoints are assigned . this problem generalizes the multiway cut problem of dahlhaus et al . siam j . comput . , <digit> ( <digit> ) , pp . <digit> <digit> and is closely related to the metric labeling problem introduced by kleinberg and tardos proceedings of the 40th ieee annual symposium on foundations of computer science , new york , <digit> , pp . <digit> <digit> . we present approximation algorithms for sc <digit> extension . in arbitrary graphs , we present a o ( log k ) approximation algorithm , k being the number of terminals . we also give o ( <digit> ) approximation guarantees for weighted planar graphs . our results are based on a natural metric relaxation of the problem previously considered by karzanov european j . combin . , <digit> ( <digit> ) , pp . <digit> <digit> . it is similar in flavor to the linear programming relaxation of garg , vazirani , and yannakakis siam j . comput . , <digit> ( <digit> ) , pp . <digit> <digit> for the multicut problem , and similar to relaxations for other graph partitioning problems . we prove that the integrality ratio of the metric relaxation is at least c sqrt lg k for a positive c for infinitely many k . our results improve some of the results of kleinberg and tardos , and they further our understanding on how to use metric relaxations .", "homotopies for intersecting solution components of polynomial systems . we show how to use numerical continuation to compute the intersection c a cap b of two algebraic sets a and b , where a , b , and c are numerically represented by witness sets . en route to this result , we first show how to find the irreducible decomposition of a system of polynomials restricted to an algebraic set . the intersection of components a and b then follows by considering the decomposition of the diagonal system of equations u restricted to u , v in a times b . an offshoot of this new approach is that one can solve a large system of equations by finding the solution components of its subsystems and then intersecting these . it also allows one to find the intersection of two components of the two polynomial systems , which is not possible with any previous numerical continuation approach .", "an open and shut typecase . two different ways of defining ad hoc polymorphic operations commonly occur in programming languages . with the first form polymorphic operations are defined inductively on the structure of types while with the second form polymorphic operations are defined for specific sets of types . in intensional type analysis operations are defined by induction on the structure of types . therefore no new cases are necessary for user defined types , because these types are equivalent to their underlying structure . however , intensional type analysis is closed to extension , as the behavior of the operations can not be differentiated for the new types , thus destroying the distinctions that these types are designed to express . haskell type classes on the other hand define polymorphic operations for sets of types . operations defined by class instances are considered open the programmer can add instances for new types without modifying existing code . however , the operations must be extended with specialized code for each new type , and it may be tedious or even impossible to add extensions that apply to a large universe of new types . both approaches have their benefits , so it is important to let programmers decide which is most appropriate for their needs . in this paper , we define a language that supports both forms of ad hoc polymorphism , using the same basic constructs .", "associated types with class . haskell ' s type classes allow ad hoc overloading , or type indexing , of functions . a natural generalisation is to allow type indexing of data types as well . it turns out that this idea directly supports a powerful form of abstraction called associated types , which are available in c using traits classes . associated types are useful in many applications , especially for self optimising libraries that adapt their data representations and algorithms in a type directed manner . in this paper , we introduce and motivate associated types as a rather natural generalisation of haskell ' s existing type classes . formally , we present a type system that includes a type directed translation into an explicitly typed target language akin to system f the existence of this translation ensures that the addition of associated data types to an existing haskell compiler only requires changes to the front end .", "ergodicity and throughput bounds of petri nets with unique consistent firing count vector . ergodicity and throughput bound characterization are addressed for a subclass of timed and stochastic petri nets , interleaving qualitative and quantitative theories . the nets considered represent an extension of the well known subclass of marked graphs , defined as having a unique consistent firing count vector , independently of the stochastic interpretation of the net model . in particular , persistent and mono t semiflow net subclasses are considered . upper and lower throughput bounds are computed using linear programming problems defined on the incidence matrix of the underlying net . the bounds proposed depend on the initial marking and the mean values of the delays but not on the probability distributions ( thus including both the deterministic and the stochastic cases ) . from a different perspective , the considered subclasses of synchronized queuing networks thus , the proposed bounds can be applied to these networks .", "multiple resolution segmentation of textured images . a multiple resolution algorithm is presented for segmenting images into regions with differing statistical behavior . in addition , an algorithm is developed for determining the number of statistically distinct regions in an image and estimating the parameters of those regions . both algorithms use a causal gaussian autoregressive model to describe the mean , variance , and spatial correlation of the image textures . together , the algorithms can be used to perform unsupervised texture segmentation . the multiple resolution segmentation algorithm first segments images at coarse resolution and then progresses to finer resolutions until individual pixels are classified . this method results in accurate segmentations and requires significantly less computation than some previously known methods . the field containing the classification of each pixel in the image is modeled as a markov random field . segmentation at each resolution is then performed by maximizing the a posteriori probability of this field subject to the resolution constraint . at each resolution , the a posteriori probability is maximized by a deterministic greedy algorithm which iteratively chooses the classification of individual pixels or pixel blocks . the unsupervised parameter estimation algorithm determines both the number of textures and their parameters by minimizing a global criterion based on the aic information criterion . clusters corresponding to the individual textures are formed by alternately estimating the cluster parameters and repartitioning the data into those clusters . concurrently , the number of distinct textures is estimated by combining clusters until a minimum of the criterion is reached .", "fitting parameterized three dimensional models to images . model based recognition and motion tracking depend upon the ability to solve for projection and model parameters that will best fit a <digit> d model to matching <digit> d image features . the author extends current methods of parameter solving to handle objects with arbitrary curved surfaces and with any number of internal parameters representing articulation , variable dimensions , or surface deformations . numerical stabilization methods are developed that take account of inherent inaccuracies in the image measurements and allow useful solutions to be determined even when there are fewer matches than unknown parameters . the levenberg marquardt method is used to always ensure convergence of the solution . these techniques allow model based vision to be used for a much wider class of problems than was possible with previous methods . their application is demonstrated for tracking the motion of curved , parameterized objects .", "an object oriented framework for the integration of interactive animation techniques . we present an interactive modeling and animation system that facilitates the integration of a variety of simulation and animation paradigms . this system permits the modeling of diverse objects that change in shape , appearance , and behaviour over time . our system thus extends modeling tools to include animation controls . changes can be effected by various methods of control , including scripted , gestural , and behavioral specification . the system is an extensible testbed that supports research in the interaction of disparate control methods embodied in controller objects . this paper discusses some of the issues involved in modeling such interactions and the mechanisms implemented to provide solutions to some of these issues . the system ' s object oriented architecture uses delegation hierarchies to let objects change all of their attributes dynamically . objects include displayable objects , controllers , cameras , lights , renderers , and user interfaces . techniques used to obtain interactive performance include the use of data dependency networks , lazy evaluation , and extensive caching to exploit inter and intra frame coherency .", "piecewise surface flattening for non distorted texture mapping . this paper introduces new techniques for interactive piecewise flattening of parametric <digit> d surfaces , leading to a non distorted , hence realistic , texture mapping . cuts are allowed on the mapped texture and we make a compromise between discontinuities and distortions . these techniques are based on results from differential geometry , more precisely on the notion of geodesic curvature isoparametric curves of the surface are mapped , in a constructive way , onto curves in the texture plane with preservation of geodesic curvature at each point . as an application , we give a concrete example which is a first step towards an efficient and robust cad tool for shoe modeling .", "minimal order loop free routing strategy . a multiorder routing strategy is developed which is loop free even in the presence of link node failures . unlike most conventional methods in which the same routing strategy is applied indiscriminately to all nodes in the network , nodes under this proposal may adopt different routing strategies according to the network structure . formulas are developed to determine the minimal order of routing strategy for each node to eliminate looping completely . a systematic procedure for striking a compromise between the operational overhead and network adaptability is proposed . several illustrative examples are presented .", "refinement methods for geometric bounds in constructive solid geometry . in constructive solid geometry , geometric solids are represented as trees whose leaves are labeled by primitive solids and whose internal nodes are labeled by set theoretic operations . a bounding function in this context is an upper or lower estimate on the extent of the constituent sets such bounds are commonly used to speed up algorithms based on such trees . we introduce the class of totally consistent bounding functions , which have the desirable properties of allowing surprisingly good bounds to be built quickly . both outer and inner bounds can be refined using a set of rewrite rules , for which we give some complexity and convergence results . we have implemented the refinement rules for outer bounds within a solid modeling system , where they have proved especially useful for intersection testing in three and four dimensions . our implementations have used boxes as bounds , but different classes ( shapes ) of bounds are also explored . the rewrite rules are also applicable to relatively slow , exact operations , which we explore for their theoretical insight , and to general boolean algebras . results concerning the relationship between these bounds and active zones are also noted .", "distributed representations , simple recurrent networks , and grammatical structure . in this paper three problems for a connectionist account of language are considered <digit> . what is the nature of linguistic representations <digit> . how can complex structural relationships such as constituent structure be represented <digit> . how can the apparently open ended nature of language be accommodated by a fixed resource system using a prediction task , a simple recurrent network ( srn ) is trained on <unk> sentences which contain multiply embedded relative clauses . principal component analysis of the hidden unit activation patterns reveals that the network solves the task by developing complex distributed representations which encode the relevant grammatical relations and hierarchical constituent structure . differences between the srn state representations and the more traditional pushdown store are discussed in the final section .", "embedding complete binary trees into butterfly networks . the authors present embeddings of complete binary trees into butterfly networks with or without wrap around connections . let m be an even integer and q m ( log m ) <digit> . the authors show how to embed a <digit> sup q <digit> <digit> node complete binary tree t ( q ) into a ( m <digit> ) <digit> sup m <digit> node wrap around butterfly b sub w ( m <digit> ) with a dilation of <digit> , and how to embed t ( q ) into a ( m <digit> ) <digit> sup m <digit> node wrap around butterfly b sub w ( m <digit> ) with an optimal dilation of <digit> . they also present an embedding of a wrap around butterfly b sub w ( m ) into a ( m <digit> ) <digit> sup m node no wrap around butterfly b ( m ) with a dilation of <digit> . using this embedding it is shown that t ( q ) can be embedded into a no wrap butterfly b ( m <digit> ) ( resp . b ( m <digit> ) ) with a dilation of <digit> ( resp . <digit> ) .", "a packaging system for heterogeneous execution environments . a packaging system that allows diverse software components to be easily interconnected within heterogeneous programming environments is described . interface software and stubs are generated for programmers automatically once the programmers express their application ' s geometry in a few simple rules and module interconnection language attributes . by generating custom interface code for each application , based on analysis and extraction of interfacing requirements , the system is able to produce executables whose run time performance is comparable to manually integrated applications . the system is implemented within the unix environment .", "using program slicing in software maintenance . program slicing is applied to the software maintenance problem by extending the notion of a program slice ( that originally required both a variable and line number ) to a decomposition slice , one that captures all computation on a given variable , i . e . , is independent of line numbers . using the lattice of single variable decomposition slices ordered by set inclusion , it is shown how a slice based decomposition for programs can be formed . one can then delineate the effects of a proposed change by isolating those effects in a single component of the decomposition . this gives maintainers a straightforward technique for determining those statements and variables which may be modified in a component and those which may not . using the decomposition , a set of principles to prohibit changes which will interfere with unmodified components is provided . these semantically consistent changes can then be merged back into the original program in linear time .", "adaptive programming . an adaptive program is one that changes its behavior base on the current state of its environment . this notion of adaptivity is formalized , and a logic for reasoning about adaptive programs is presented . the logic includes several composition operators that can be used to define an adaptive program in terms of given constituent programs programs resulting from these compositions retain the adaptive properties of their constituent programs . the authors begin by discussing adaptive sequential programs , then extend the discussion to adaptive distributed programs . the relationship between adaptivity and self stabilization is discussed . a case study for constructing an adaptive distributed program where a token is circulated in a ring of processes is presented .", "performance prediction and evaluation of parallel processing on a numa multiprocessor . the efficiency of the basic operations of a numa ( nonuniform memory access ) multiprocessor determines the parallel processing performance on a numa multiprocessor . the authors present several analytical models for predicting and evaluating the overhead of interprocessor communication , process scheduling , process synchronization , and remote memory access , where network contention and memory contention are considered . performance measurements to support the models and analyses through several numerical examples have been done on the bbn gp1000 , a numa shared memory multiprocessor . analytical and experimental results give a comprehensive understanding of the various effects , which are important for the effective use of numa shared memory multiprocessor . the results presented can be used to determine optimal strategies in developing an efficient programming environment for a numa system .", "optimal weight assignment for signature generation . previous work on superimposed coding has been characterized by two aspects . first , it is generally assumed that signatures are generated from logical text blocks of the same size that is , each block contains the same number of unique terms after stopword and duplicate removal . we call this approach the fixed size block ( fsb ) method , since each text block has the same size , as measured by the number of unique terms contained in it . second , with only a few exceptions <digit> , <digit> , <digit> , <digit> , <digit> , most previous work has assumed that each term in the text contributes the same number of ones to the signature ( i . e . , the weight of the term signatures is fixed ) . the main objective of this paper is to derive an optimal weight assignment that assigns weights to document terms according to their occurrence and query frequencies in order to minimize the false drop probability . the optimal scheme can account for both uniform and nonuniform occurence and query frequencies , and the signature generation method is still based on hashing rather than on table lookup . furthermore , a new way of generating signatures , the fixed weight block ( <unk> ) method , is introduced . <unk> controls the weight of every signature to a constant , whereas in fsb , only the expected signature weight is constant . we have shown that <unk> has a lower false drop probability than that of the fsb method , but its storage overhead is slightly higher . other advantages of <unk> are that the optimal weight assignment can be obtained analytically without making unrealistic assumptions and that the formula for computing the term signature weights is simple and efficient .", "a lingua franca for concurrent logic programming . two of the more important concurrent logic programming languages with nonflat guards are ghc and parlog . they balance the requirements of having clean semantics and providing good control facilities rather differently , and their respective merits are compared and contrasted . since concurrent logic programming would benefit from both , but neither language is able to express all the programs expressible in the other language , a lingua franca of these languages is defined and justified . a method is given for translating ghc and parlog to and from it . the method preserves the arities and execution conditions of each clause . it enables a lingua franca implementation to support both languages transparently , and to provide a simple concurrent logic programming language suitable for programming in its own right .", "a control flow normalization algorithm and its complexity . a single method for normalizing the control flow of programs to facilitate program transformations , program analysis , and automatic parallelization is presented . while previous methods result in programs whose control flowgraphs are reducible , programs normalized by this technique satisfy a stronger condition than reducibility and are therefore simpler in their syntax and structure than with previous methods . in particular , all control flow cycles are normalized into single entry , single exit while loops and all gotos are eliminated . furthermore , the method avoids problems of code replication that are characteristic of node splitting techniques . this restructuring obviates the control dependence graph , since afterwards control dependence relations are manifest in the syntax tree of the program . transformations that effect this normalization are presented , and the complexity of the method is studied .", "what are race conditions . in shared memory parallel programs that use explicit synchronization , race conditions result when accesses to shared memory are not properly synchronized . race conditions are often considered to be manifestations of bugs , since their presence can cause the program to behave unexpectedly . unfortunately , there has been little agreement in the literature as to precisely what constitutes a race condition . two different notions have been implicitly considered one pertaining to programs intended to be deterministic ( which we call general races ) and the other to nondeterministic programs containing critical sections ( which we call data races ) . however , the differences between general races and data races have not yet been recognized . this paper examines these differences by characterizing races using a formal model and exploring their properties . we show that two variations of each type of race exist feasible general races and data races capture the intuitive notions desired for debugging and apparent races capture less accurate notions implicitly assumed by most dynamic race detection methods . we also show that locating feasible races is an np hard problem , implying that only the apparent races , which are approximations to feasible races , can be detected in practice . the complexity of dynamically locating apparent races depends on the type of synchronization used by the program . apparent races can be exhaustively located efficiently only for weak types of synchronization that are incapable of implementing mutual exclusion . this result has important implications since we argue that debugging general races requires exhaustive race detection and is inherently harder than debugging data races ( which requires only partial race detection ) . programs containing data races can therefore be efficiently debugged by locating certain easily identifiable races . in contrast , programs containing general races require more complex debugging techniques .", "a multimodel methodology for qualitative model engineering . qualitative models arising in artificial intelligence domain often concern real systems that are difficult to represent with traditional means . however , some promise for dealing with such systems is offered by research in simulation methodology . such research produces models that combine both continuous and discrete event formalisms . nevertheless , the aims and approaches of the ai and the simulation communities remain rather mutually ill understood . consequently , there is a need to bridge theory and methodology in order to have a uniform language when either analyzing or reasoning about physical systems . this article introduces a methodology and formalism for developing multiple , cooperative models of physical systems of the type studied in qualitative physics . the formalism combines discrete event and continuous models and offers an approach to building intelligent machines capable of physical modeling and reasoning .", "on workload characterization of relational database environments . a relational database workload analyzer ( <unk> ) is developed to characterize the workload in a db2 environment . this is applied to study a production db2 system where a structured query language ( sql ) trace for a two hour interval and an image copy of the database catalog were obtained . the results of the workload study are summarized . the structure and complexity of sql statements , the makeup and run time behavior of transactions queries , and the composition of relations and views are discussed . the results obtained provide the important information needed to build a benchmark workload to evaluate the alternative design tradeoffs of database systems .", "detecting unsafe error recovery schedules . a mechanism for modeling timing , precedence , and data consistency constraints on concurrently executing processes is presented . the model allows durations and intervals between events to be specified . an algorithm is provided to detect schedules which may be unsafe with respect to the constraints . this work , motivated by the design and validation of autonomous error recovery strategies on the galileo spacecraft , appears to be applicable to a variety of asynchronous real time systems .", "vectorized software for bessel function evaluation . a suite of computer programs for the evaluation of bessel functions and modified bessel functions of orders zero and one for a vector of real arguments is described . distinguishing characteristics of these programs are that ( a ) they are portable across a wide range of machines , and ( b ) they are vectorized in the case when multiple function evaluations are to be performed . the performance of the new programs are compared with software from the <unk> collection of fullerton on which the new software is based .", "a file system for continuous media . the continuous media file system , cmfs , supports real time storage and retrieval of continuous media data ( digital audio and video ) on disk . cmfs clients read or write files in sessions , each with a guaranteed minimum data rate . multiple sessions , perhaps with different rates , and non real time access can proceed concurrently . cmfs addresses several interrelated design issues real time semantics fo sessions , disk layout , an acceptance test for new sessions , and disk scheduling policy . we use simulation to compare different design choices .", "the convergence of td ( <unk> ) for general <unk> . the method of temporal differences ( td ) is one way of making consistent predictions about the future . this paper uses some analysis of watkins ( <digit> ) to extend a convergence theorem due to sutton ( <digit> ) from the case which only uses information from adjacent time steps to that involving information from arbitrary ones . it also considers how this version of td behaves in the face of linearly dependent representations for <unk> that it still converges , but to a different answer from the least mean squares algorithm . finally it adapts watkins ' theorem that cal q learning , his closely related prediction and action learning method , converges with probability one , to demonstrate this strong form of convergence for a slightly modified version of td .", "tools for building asynchronous servers to support speech and audio applications . distributed client server models are becoming increasingly prevalent in multimedia systems and advanced user interface design . a multimedia application , for example , may play and record audio , use speech recognition input , and use a window system for graphical i o . the software architecture of such a system can be simplified if the application communicates to multiple servers ( e . g . , audio servers , recognition servers ) that each manage different types of input and output . this paper describes tools for rapidly prototyping distributed asynchronous servers and applications , with an emphasis on supporting highly interactive user interfaces , temporal media , and multi modal i o .", "declarative programming of graphical interfaces by visual examples . graphical user interfaces ( gui ) provide intuitive and easy means for users to communicate with computers . however , construction of gui software requires complex programming that is far from being intuitive . because of the semantic gap between the textual application program and its graphical interface , the programmer himself must conceptually maintain the correspondence between the textual programming and the graphical image of the resulting interface . instead , we propose a programming environment based on the programming by visual example ( pbve ) scheme , which allows the gui designers to program visual interfaces for their applications by drawing the example visualization of application data with a direct manipulation interface . our system , trip3 , realizes this with ( <digit> ) the bi directional translation model between the ( abstract ) application data and the pictorial data of the gui , and ( <digit> ) the ability to generate mapping rules for the translation from example application data and its corresponding example visualization . the latter is made possible by the use of generalization of visual examples , where the system is able to automatically generate generalized mapping rules from a given set of examples .", "a subexponential bound for linear programming . we present a simple randomized algorithm which solves linear programs with n constraints and d variables in expected o ( nde ( d ln ( n <digit> ) ) <digit> <digit> ) time in the unit cost model ( where we count the number of arithmetic operations on the numbers in the input ) . the expectation is over the internal randomizations performed by the algorithm , and holds for any input . the algorithm is presented in an abstract framework , which facilitates its application to several other related problems . the algorithm has been presented in a previous work by the authors shw , but its analysis and the subexponential complexity bound are new .", "the decoupled simulation model for virtual reality systems . the virtual reality user interface style allows the user to manipulate virtual objects in a 3d environment using 3d input devices . this style is best suited to application areas where traditional two dimensional styles fall short , but the current programming effort required to produce a vr application is somewhat large . we have built a toolkit called mr , which facilitates the development of vr applications . the toolkit provides support for distributed computing , head mounted displays , room geometry , performance monitoring , hand input devices , and sound feedback . in this paper , the architecture of the toolkit is outlined , the programmer ' s view is described , and two simple applications are described .", "lessons learned from suit , the simple user interface toolkit . in recent years , the computer science community has realized the advantages of guis ( graphical user interfaces ) . because high quality guis are difficult to build , support tools such as uimss , ui toolkits , and interface builders have been developed . although these tools are powerful , they typically make two assumptions first , that the programmer has some familiarity with the gui model , and second , that he is willing to invest several weeks becoming proficient with the tool . these tools typically operate only on specific platforms , such as dos , the macintosh , or unix x windows .", "lexical ambiguity and information retrieval . lexical ambiguity is a pervasive problem in natural language processing . however , little quantitative information is available about the extent of the problem or about the impact that it has on information retrieval systems . we report on an analysis of lexical ambiguity in information retrieval test collections and on experiments to determine the utility of word meanings for separating relevant from nonrelevant documents . the experiments show that there is considerable ambiguity even in a specialized database . word senses provide a significant separation between relevant and nonrelevant documents , but several factors contribute to determining whether disambiguation will make an improvement in performance . for example , resolving lexical ambiguity was found to have little impact on retrieval effectiveness for documents that have many words in common with the query . other uses of word sense disambiguation in an information retrieval context are discussed .", "estimation and enhancement of real time software reliability through mutation analysis . a simulation based method for obtaining numerical estimates of the reliability of n version , real time software is proposed . an extended stochastic petri net is used to represent the synchronization structure of n versions of the software , where dependencies among versions are modeled through correlated sampling of module execution times . the distributions of execution times are derived from automatically generated test cases that are based on mutation testing . since these test cases are designed to reveal software faults , the associated execution times and reliability estimates are likely to be conservative . experimental results using specifications for nasa ' s planetary lander control software suggest that mutation based testing could hold greater potential for enhancing reliability than the desirable but perhaps unachievable goal of independence among n versions . nevertheless , some support for n version enhancement of high quality , mutation tested code is also offered . mutation analysis could also be valuable in the design of fault tolerant software systems .", "programming and verifying real time systems by means of the synchronous data flow language lustre . the benefits of using a synchronous data flow language for programming critical real time systems are investigated . these benefits concern ergonomy ( since the dataflow approach meets traditional description tools used in this domain ) and ability to support formal design and verification methods . it is shown , using a simple example , how the language lustre and its associated verification tool <unk> , can be used to design a program , to specify its critical properties , and to verify these properties . as the language lustre and its uses have already been discussed in several papers , emphasis is put on program verification .", "automatic recognition of tractability in inference relations . a procedure is given for recognizing sets of inference rules that generate polynomial time decidable inference relations . the procedure can automatically recognize the tractability of the inference rules underlying congruence closure . the recognition of tractability for that particular rule set constitutes mechanical verification of a theorem originally proved independently by kozen and shostak . the procedure is algorithmic , rather than heuristic , and the class of automatically recognizable tractable rule sets can be precisely characterized . a series of examples of rule sets whose tractability is nontrivial , yet machine recognizable , is also given . the technical framework developed here is viewed as a first step toward a general theory of tractable inference relations .", "fast algorithms for generating discrete random variates with changing distributions . one of the most fundamental operations when simulating a stochastic discrete event dynamic system is the generation of a nonuniform discrete random variate . the simplest form of this operation can be stated as follows generate a random variable x that is distributed over the integers <digit> , <digit> , , n such that are fixed nonnegative numbers . the well known alias algorithm is available to accomplish this task in o ( <digit> ) time . a more difficult problem is to generate variates for x when the ai ' s are changing with time . we present three rejection based algorithms for this task , and for each algorithm we characterize the performance in terms of acceptance probability and the expected effort to generate a variate . we show that , under fairly unrestrictive conditions , the long run expected effort is o ( <digit> ) . applications to markovian queuing networks are discussed . we also compare the three algorithms with competing schemes appearing in the literature .", "coordinating rule based software processes with esp . esp is a language for modeling rule based software processes that take place in a distributed software development environment . it is based on polis , an abstract coordination model that relies on multiple tuple spaces , i . e . , collections of tuples a la linda . polis extends linda aiming at the specification and coordination of logically distributed systems . esp ( extended shared prolog ) combines the polis mechanisms to deal with concurrency and distribution , with the logic programming language prolog , to deal with rules and deduction . such a combination of a coordination model and a logic language provides a powerful framework in which experiments about rule based software process programming can be performed and evaluated .", "mutation analysis using mutant schemata . mutation analysis is a powerful technique for assessing and improving the quality of test data used to unit test software . unfortunately , current automated mutation analysis systems suffer from severe performance problems . this paper presents a new method for performing mutation analysis that uses program schemata to encode all mutants for a program into one metaprogram , which is subsequently compiled and run at speeds substantially higher than achieved by previous interpretive systems . preliminary performance improvements of over <digit> % are reported . this method has the additional advantages of being easier to implement than interpretive systems , being simpler to port across a wide range of hardware and software platforms , and using the same compiler and run time support system that is used during development and or deployment .", "analysis of or parallel execution models . we discuss fundamental limitations of or parallel execution models of nondeterministic programming languages . or parallelism corresponds to the execution of different nondeterministic computational paths in parallel . a natural way to represent the state of ( parallel ) execution of a nondeterministic program is by means of an or parallel tree . we identify three important criteria that underlie the design of or parallel implementations based on the or parallel tree constant time access to variables , constant time task creation , and constant time task switching , where the term constant time means that the time for these operations is independent of the number of nodes in the or parallel tree , as well as the size of each node . we prove that all three criteria can not be simultaneously satisfied by any or parallel execution model based on a finite number of processors but unbounded memory . we discuss in detail the application of our result to the class of logic programming languages and show how our result can serve as a useful way to categorize the various or parallel methods proposed in this field . we also discuss the suitability of different or parallel implemenation strategies for different parallel architectures .", "the logical data model . we propose an object oriented data model that generalizes the relational , hierarchical , and network models . a database scheme in this model is a directed graph , whose leaves represent data and whose internal nodes represent connections among the data . instances are constructed from objects , which have separate names and values . we define a logic for the model , and describe a nonprocedural query language that is based on the logic . we also describe an algebraic query language and show that it is equivalent to the logical language .", "parallelizing algorithms for symbolic computation using maple . maple ( speak parallel maple ) is a portable system for parallel symbolic computation . the system is built as an interface between the parallel declarative programming language strand and the sequential computer algebra system maple , thus providing the elegance of strand and the power of the existing sequential algorithms in maple .", "template driven interfaces for numerical subroutines . this paper describes a set of interfaces for numerical subroutines . typing a short ( often one line ) description allows one to solve problems in application domains including least squares data fitting , differential equations , minimization , root finding , and integration . our approach of template driven programming makes it easy to build such an interface a simple one takes a few hours to construct , while a few days suffice to build the most complex program we describe .", "a weighted nearest neighbor algorithm for learning with symbolic features . in the past , nearest neighbor algorithms for learning from examples have worked best in domains in which all features had numeric values . in such domains , the examples can be treated as points and distance metrics can use standard definitions . in symbolic domains , a more sophisticated treatment of the feature space is required . we introduce a nearest neighbor algorithm for learning in domains with symbolic features . our algorithm calculates distance tables that allow it to produce real valued distances between instances , and attaches weights to the instances to further modify the structure of feature space . we show that this technique produces excellent classification accuracy on three problems that have been studied by machine learning researchers predicting protein secondary structure , identifying dna promoter sequences , and pronouncing english text . direct experimental comparisons with the other learning algorithms show that our nearest neighbor algorithm is comparable or superior in all three domains . in addition , our algorithm has advantages in training speed , simplicity , and perspicuity . we conclude that experimental evidence favors the use and continued development of nearest neighbor algorithms for domains such as the ones studied here .", "a visual execution model for ada tasking . a visual execution model for ada tasking can help programmers attain a deeper understanding of the tasking semantics . it can illustrate subtleties in semantic definitions that are not apparent in natural language design . we describe a contour model of ada tasking that depicts asynchronous tasks ( threads of control ) , relationships between the environments in which tasks execute , and the manner in which tasks interact . the use of this high level execution model makes it possible to see what happens during execution of a program . the paper provides an introduction to the contour model of ada tasking and demonstrates its use .", "a conceptual framework for evolving software processes . software processes are complex entities that may last for long periods of time and are carried out through the interaction of humans and computerized tools . they need to continuously evolve in order to cope with different kinds of changes or customizations both in the organization and in the technologies used to support software production activities . in recent years , many software process support technologies have been developed , and have currently been further extended and used in trial projects . moreover , some research prototypes have generated commercial products , that are marketed and currently used in industrial organizations . despite these significant efforts and results , however , there is still little conceptual characterization and assessment of the properties of software processes and related support environments . it is difficult to compare and assess existing approaches . even a common characterization of the problems to be addressed seems to be problematic and difficult to achieve . this is particularly true when we consider the process evolution problem , for which it does not seem that a common view of the issue has been established yet . this paper aims at proposing a conceptual framework to describe and assess flexible and evolving software processes . it is based on the assumption that a software process is composed of two main components a software production process to carry out software production activities , and a software meta process to improve and evolve the whole software process . the general requirements and properties of the process domain are first discussed , and the meta process concept is introduced . then , we discuss several process related concepts and , in particular , the relationship between the meta process and the rest of the software process . methods and technologies needed to support the meta process are highlighted and discussed . finally , we apply the resulting framework to an example , in order to show the potential and expected benefits of the proposed approach .", "a comparison of adaptive wormhole routing algorithms . improvement of message latency and network utilization in torus interconnection networks by increasing adaptivity in wormhole routing algorithms is studied . a recently proposed partially adaptive algorithm and four new fully adaptive routing algorithms are compared with the well known e cube algorithm for uniform , hotspot , and local traffic patterns . our simulations indicate that the partially adaptive north last algorithm , which causes unbalanced traffic in the network , performs worse than the nonadaptive e cube routing algorithm for all three traffic patterns . another result of our study is that the performance does not necessarily improve with full adaptivity . in particular , a commonly discussed fully adaptive routing algorithm , which uses 2n virtual channels per physical channel of a k ary n cube , performs worse than e cube for uniform and hotspot traffic patterns . the other three fully adaptive algorithms , which give priority to messages based on distances traveled , perform much better than the e cube and partially adaptive algorithms for all three traffic patterns . one of the conclusions of this study is that adaptivity , full or partial , is not necessarily a benefit in wormhole routing .", "a survey of x protocol multiplexors . an x multiplexor allows a single x window system client to be displayed and interacted with on several x servers simultaneously . such a service is necessary for the construction of a computer supported cooperative work ( cscw ) environment such as <unk> ( joint viewing and tele operation service ) which is being implemented within race ii project <unk> . this paper describes several existing x multiplexors and evaluates their usefulness for <unk> .", "random walks in weyl chambers and the decomposition of tensor powers . we consider a class of random walks on a lattice , introduced by gessel and zeilberger , for which the reflection principle can be used to count the number of k step walks between two points which stay within a chamber of a weyl group . we prove three independent results about such reflectable walks first , a classification of all such walks semi second , many determinant formulas for walk numbers and their generating functions semi third , an equality between the walk numbers and the multiplicities of irreducibles in the kth tensor power of certain lie group representations associated to the walk types . our results apply to the defining representations of the classical groups , as well as some spin representations of the orthogonal groups .", "a new theory of deadlock free adaptive routing in wormhole networks . the theoretical background for the design of deadlock free adaptive routing <unk> wormhole networks is developed . the author proposes some basic definitions and <unk> . these create the conditions to verify that an adaptive algorithm <unk> free , even when there are cycles in the channel dependency graph . two <unk> are also proposed . the first supplies algorithms with a high degree offreedom , without increasing the number of physical channels . the second methodology <unk> for the design of fault tolerant algorithms . some examples are given to show theapplication of the methodologies . simulations show the performance improvement thatcan be achieved by designing the routing algorithms with the new theory .", "theory and practice of vector quantizers trained on small training sets . examines how the performance of a memoryless vector quantizer changes as a function of its training set size . specifically , the authors study how well the training set distortion predicts test distortion when the training set is a randomly drawn subset of blocks from the test or training image ( s ) . using the vapnik chervonenkis ( vc ) dimension , the authors derive formal bounds for the difference of test and training distortion of vector quantizer codebooks . the authors then describe extensive empirical simulations that test these bounds for a variety of codebook sizes and vector dimensions , and give practical suggestions for determining the training set size necessary to achieve good generalization from a codebook . the authors conclude that , by using training sets comprising only a small fraction of the available data , one can produce results that are close to the results obtainable when all available data are used .", "a nested graph model for the representation and manipulation of complex objects . three recent trends in database research are object oriented and deductive databases and graph based user interfaces . we draw these trends together in a data model we call the hypernode model . the single data structure of this model is the hypernode , a graph whose nodes can themselves be graphs . hypernodes are typed , and types , too , are nested graphs . we give the theoretical foundations of hypernodes and types , and we show that type checking is tractable . we show also how conventional type forming operators can be simulated by our graph types , including cyclic types . the hypernode model comes equipped with a rule based query language called hyperlog , which is complete with respect to computation and update . we define the operational semantics of hyperlog and show that the evaluation can be performed efficiently . we discuss also the use of hyperlog for supporting database browsing , an essential feature of hypertext databases . we compare our work with other graph based data <unk> previous graph based models , the hypernode model provides inherent support for data abstraction via its nesting of graphs . finally , we briefly discuss the implementation of a dbms based on the hypernode model .", "a really temporal logic . we introduce a temporal logic for the specification of real time systems . our logic , tptl , employs a novel quantifier construct for referencing time the freeze quantifier binds a variable to the time of the local temporal context .", "the elusive atomic register . we present a construction of a single writer , multiple reader atomic register from single writer , single reader atomic registers . the complexity of our construction is asymptotically optimal o ( m2 shared single writer , single reader safe bits are required to construct a single writer , m reader , n bit atomic register .", "parallel linear programming in fixed dimension almost surely in constant time . for any fixed dimension ) time , information processing letters , v . <digit> n . <digit> , p . <digit> <digit> , january <digit> , <digit>", "explaining type errors in polymorphic languages . strongly typed languages present programmers with compile time feedback about the type correctness of programs . errors during polymorphic type checking take the form of a unification failure for two types . finding the source of the type error in the code is often difficult because the error may occur far from the spot where the inconsistency is detected . as functional languages use more and more complex type systems , the difficulty of interpreting and locating these errors will increase . to locate the source of type errors the programmer must unravel the long chain of deductions and type instantiations made during type reconstruction . this paper describes an approach that maintains the deductive steps of type inference and the reasons for type instantiations . the approach could be used in an interactive system to guide the programmer to the source of a type error or to explain why the compiler assigned a particular type to an expression .", "executable interprocedural slices . the notion of a program slice , originally introduced by mark weiser , is useful in program debugging , automatic parallelization , program integration , and software maintenance . a slice of a program is taken with respect to a program point p and a variable x the slice consists of all statements of the program that might affect the value of x at point p . an interprocedural slice is a slice of an entire program , where the slice crosses the boundaries of procedure calls .", "precise and efficient groundness analysis for logic programs . we show how precise groundness information can be extracted from logic programs . the idea is to use abstract interpretation with boolean functions as approximations to groundness dependencies between variables . this idea is not new , and different classes of boolean functions have been used . we argue , however , that one class , the positive functions , is more suitable than others . positive boolean functions have a certain property which we ( inspired by a . langen ) call condensation . this property allows for rapid computation of groundness information .", "semantics of constraint logic programs with optimization . many applications of constraint logic programming ( clp ) languages require not only testing if a set of constraints is satisfiable , but also finding the optimal solution which satisfies them . unfortunately , the standard declarative semantics for clp languages does not consider optimization but only constraint satisfaction . here we give a model theoretic semantics for optimization , which is a simple extension of the standard semantics , and a corresponding operational semantics , which may be efficiently implemented .", "dynamic nurbs with geometric constraints for interactive sculpting . this article develops a dynamic generalization of the nonuniform rational b spline ( nurbs ) model . nurbs have become a defacto standard in commercial modeling systems because of their power to represent free form shapes as well as common analytic shapes . to date , however , they have been viewed as purely geometric primitives that require the user to manually adjust multiple control points and associated weights in order to design shapes . dynamic nurbs , or d nurbs , are physics based models that incorporate mass distributions , internal deformation energies , and other physical quantities into the popular nurbs geometric substrate . using d nurbs , a modeler can interactively sculpt curves and surfaces and design complex shapes to required specifications not only in the traditional indirect fashion , by adjusting control points and weights , but also through direct physical manipulation , by applying simulated forces and local and global shape constraints . d nurbs move and deform in a physically intuitive manner in response to the user ' s direct manipulations . their dynamic behavior results from the numerical integration of a set of nonlinear differential equations that automatically evolve the control points and weights in response to the applied forces and constraints . to derive these equations , we employ lagrangian mechanics and a finite element like discretization . our approach supports the trimming of d nurbs surfaces using d nurbs curves . we demonstrate d nurbs models and constraints in applications including the rounding of solids , optimal surface fitting to unstructured data , surface design from cross sections , and free form deformation . we also introduce a new technique for 2d shape metamorphosis using constrained d nurbs surfaces .", "multiresolution stochastic hybrid shape models with fractal priors . 3d shape modeling has received enormous attention in computer graphics and computer vision over the past decade . several shape modeling techniques have been proposed in literature , some are local ( distributed parameter ) while others are global ( lumped parameter ) in terms of the parameters required to describe the shape . hybrid models that combine both ends of this parameter spectrum have been in vogue only recently . however , they do not allow a smooth transition between the two extremes of this parameter spectrum .", "complexity restricted advice functions . the authors consider uniform subclasses of the nonuniform complexity classes defined by karp and lipton l ' <unk> . math . , <digit> ( <digit> ) via the notion of advice functions . these subclasses are obtained by restricting the complexity of computing correct advice . also , the effect of allowing advice functions of limited complexity to depend on the input rather than on the input ' s length is investigated . among other results , using the notions described above , new characterizations of ( a ) np np cap sparse , ( b ) np with a restricted access to an np oracle , and ( c ) the odd levels of the boolean hierarchy are given . as a consequence , it is shown that every set that is nondeterministically truth table reducible to sat in the sense of rich j . comput . system sci . , <digit> ( <digit> ) , pp . <digit> <digit> is already deterministically truth table reducible to sat . furthermore , it turns out that the np reduction classes of bounded versions of this reducibility coincide with the odd levels of the boolean hierarchy .", "generating linear extensions fast . one of the most important sets associated with a poset cal p is its set of linear extensions , e ( cal p ) . this paper presents an algorithm to generate all of the linear extensions of a poset in constant amortized time , that is , in time o ( e ( cp ) ) , where e ( cp ) . the fastest previously known algorithm for generating the linear extensions of a poset runs in time o ( n cdot e ( cp ) ) , where n is the number of elements of the poset . the algorithm presented here is the first constant amortized time algorithm for generating a naturally defined class of combinatorial objects for which the corresponding counting problem is p complete . furthermore , it is shown that linear extensions can be generated in constant amortized time where each extension differs from its predecessor by one or two adjacent transpositions . the algorithm is practical and can be modified to count linear extensions efficiently and to compute p ( x < y ) , for all pairs x , y , in time o ( n <digit> e ( cal p ) ) .", "computational complexity of sparse rational interpolation . the authors analyze the computational complexity of sparse rational interpolation , and give the first deterministic algorithm for this problem with singly exponential bounds on the number of arithmetic operations .", "tight upper and lower bounds on the path length of binary trees . the external path length of a tree t is the sum of the lengths of the paths from the root to each external node . the maximal path length difference , delta , is the difference between the lengths of the longest and shortest such paths . tight lower and upper bounds are proved on the external path length of binary trees with n external nodes and maximal path length difference delta is prescribed . in particular , an upper bound is given that , for each value of delta , can be exactly achieved for infinitely many values of n . this improves on the previously known upper bound that could only be achieved up to a factor proportional to n . an elementary proof of the known upper bound is also presented as a preliminary result . moreover , a lower bound is proved that can be exactly achieved for each value of n and delta leq n <digit> .", "the complexity of decision versus search . a basic question about np is whether or not search reduces in polynomial time to decision . this paper indicates that the answer is negative under a complexity assumption ( that deterministic and nondeterministic double exponential time are unequal ) a language in np for which search does not reduce to decision is constructed . these ideas extend in a natural way to interactive proofs and program checking . under similar assumptions , the authors present languages in np for which it is harder to prove membership interactively than it is to decide this membership , and languages in np that are not checkable .", "piecewise linear interpolation between polygonal slices . in this paper we present a new technique for piecewise linear surface reconstruction from a series of parallel polygonal cross sections . this is an important problem in medical imaging , surface reconstruction from topographic data , and other applications . we reduce the problem , as in most previous works , to a series of problems of piecewise linear interpolation between each pair of successive slices . our algorithm uses a partial curve matching technique for matching parts of the contours , an optimal triangulation of <digit> d polygons for resolving the unmatched parts , and a minimum spanning tree heuristic for interpolating between non simply connected regions . unlike previous attempts at solving this problem , our algorithm seems to handle successfully any kind of data . it allows multiple contours in each slice , with any hierarchy of contour nesting , and avoids the introduction of counter intuitive bridges between contours , proposed in some earlier papers to handle interpolation between multiply connected regions . experimental results on various complex examples , involving actual medical imaging data , are presented , and show the good and robust performance of our algorithm .", "improvements to graph coloring register allocation . we describe two improvements to chaitin style graph coloring register allocators . the first , optimistic coloring , uses a stronger heuristic to find a k coloring for the interference graph . the second extends chaitin ' s treatment of rematerialization to handle a larger class of values . these techniques are complementary . optimistic coloring decreases the number of procedures that require spill code and reduces the amount of spill code when spilling is unavoidable . rematerialization lowers the cost of spilling some values . this paper describes both of the techniques and our experience building and using register allocators that incorporate them . it provides a detailed description of optimistic coloring and rematerialization . it presents experimental data to show the performance of several versions of the register allocator on a suite of fortran programs . it discusses several insights that we discovered only after repeated implementation of these allocators .", "model checking and modular verification . we describe a framework for compositional verification of finite state processes . the framework is based on two ideas a subset of the logic ctl for which satisfaction is preserved under composition , and a preorder on structures which captures the relation between a component and a system containing the component . satisfaction of a formula in the logic corresponds to being below a particular structure ( a tableau for the formula ) in the preorder . we show how to do assume guarantee style reasoning within this framework . additionally , we demonstrate efficient methods for model checking in the logic and for checking the preorder in several special cases . we have implemented a system based on these methods , and we use it to give a compositional verification of a cpu controller .", "coordinating first order multiparty interactions . a first order multiparty interaction is an abstraction mechanism that defines communication among a set of formal process roles . actual processes participate in a first order interaction by enroling into roles , and execution of the interaction can proceed when all roles are filled by distinct processes . as in csp , <unk> statements can serve as guards in alternative commands . the <unk> guard scheduling problem then is to enable the execution of first order interactions through the judicious scheduling of roles to processes that are currently ready to execute <unk> guards .", "controlled grammatic ambiguity . a new approach to ambiguity of context free grammars is presented , and within this approach the ll and lr techniques are generalized to solve the following problems for large classes of ambiguous grammars", "reducing indirect function call overhead in c programs . modern computer architectures increasingly depend on mechanisms that estimate future control flow decisions to increase performance . mechanisms such as speculative execution and prefetching are becoming standard architectural mechanisms that rely on control flow prediction to prefetch and speculatively execute future instructions . at the same time , computer programmers are increasingly turning to object oriented languages to increase their productivity . these languages commonly use run time dispatching to implement object polymorphism . dispatching is usually implemented using an indirect function call , which presents challenges to existing control flow prediction techniques .", "faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts . this paper describes new algorithms for approximately solving the concurrent multicommodity flow problem with uniform capacities . these algorithms are much faster than algorithms discovered previously . besides being an important problem in its own right , the uniform capacity concurrent flow problem has many interesting applications . leighton and rao used uniform capacity concurrent flow to find an approximately sparsest cut in a graph and thereby approximately solve a wide variety of graph problems , including minimum feedback arc set , minimum cut linear arrangement , and minimum area layout . however , their method appeared to be impractical as it required solving a large linear program . this paper shows that their method might be practical by giving an o ( m <digit> log m ) expected time randomized algorithm for their concurrent flow problem on an m edge graph . raghavan and thompson used uniform capacity concurrent flow to solve approximately a channel width minimization problem in very large scale integration . an randomized algorithm and an o ( k min n , k ( m n log n ) log k ) deterministic algorithm is given for this problem when the channel width is omega ( log n ) , where k denotes the number of wires to be routed in an n node , m edge network .", "implementing complex elementary functions using exception handling . algorithms are developed for reliable and accurate evaluations of the complex elementary functions required in fortran <digit> and fortran <digit> , namely , cabs , <unk> , <unk> , clog , <unk> , and ccos . the algorithms are presented in a pseudocode that has a convenient exception handling facility . a tight error bound is derived for each algorithm . corresponding fortran programs for an ieee environment have also been developed to illustrate the practicality of the algorithms , and these programs have been tested very carefully to help confirm the correctness of the algorithms and their error bounds . the results of these tests are included in the paper , but the fortran programs are not .", "using genetic algorithms for concept learning . in this article , we explore the use of genetic algorithms ( gas ) as a key element in the design and implementation of robust concept learning systems . we describe and evaluate a ga based system called gabil that continually learns and refines concept classification rules from its interaction with the environment . the use of gas is motivated by recent studies showing the effects of various forms of bias built into different concept learning systems , resulting in systems that perform well on certain concept classes ( generally , those well matched to the biases ) and poorly on others . by incorporating a ga as the underlying adaptive search mechanism , we are able to construct a concept learning system that has a simple , unified architecture with several important features . first , the system is surprisingly robust even with minimal bias . second , the system can be easily extended to incorporate traditional forms of bias found in other concept learning systems . finally , the architecture of the system encourages explicit representation of such biases and , as a result , provides for an important additional feature the ability to dynamically adjust system bias . the viability of this approach is illustrated by comparing the performance of gabil with that of four other more traditional concept learners ( <unk> , c4 . <digit> , <unk> , and <unk> ) on a variety of target concepts . we conclude with some observations about the merits of this approach and about possible extensions .", "extracting refined rules from knowledge based neural networks . neural networks , despite their empirically proven abilities , have been little used for the refinement of existing knowledge because this task requires a three step process . first , knowledge must be inserted into a neural network . second , the network must be refined . third , the refined knowledge must be extracted from the network . we have previously described a method for the first step of this process . standard neural learning techniques can accomplish the second step . in this article , we propose and empirically evaluate a method for the final , and possibly most difficult , step . our method efficiently extracts symbolic rules from trained neural networks . the four major results of empirical tests of this method are that the extracted rules <digit> ) closely reproduce the accuracy of the network from which they are extracted semi <digit> ) are superior to the rules produced by methods that directly refine symbolic rules semi are superior to those produced by previous techniques for extracting rules from trained neural networks semi and are human comprehensible . thus , this method demonstrates that neural networks can be used to effectively refine symbolic knowledge . moreover , the rule extraction technique developed herein contributes to the understanding of how symbolic and connectionist approaches to artificial intelligence can be profitably integrated .", "factorization of matrix polynomials with symmetries . an n times n matrix polynomial l ( lambda ) ( with real or complex coefficients ) is called self adjoint if factorizations of selfadjoint and symmetric matrix polynomials of the form are studied , where d is a constant matrix and m ( lambda ) is a matrix polynomial . in particular , the minimal possible size of d is described in terms of the elementary divisors of l ( lambda ) and ( sometimes ) signature of the hermitian values of l ( lambda ) .", "combining static and dynamic scheduling on distributed memory multiprocessors . loops are a large source of parallelism for many numerical applications . an important issue in the parallel execution of loops is how to schedule them so that the workload is well balanced among the processors . most existing loop scheduling algorithms were designed for shared memory multiprocessors , with uniform memory access costs . these approaches are not suitable for distributed memory multiprocessors where data locality is a major concern and communication costs are high . this paper presents a new scheduling algorithm in which data locality is taken into account . our approach combines both worlds , static and dynamic scheduling , in a two level ( overlapped ) fashion . this way data locality is considered and communication costs are limited . the performance of the new algorithm is evaluated on a cm <digit> message passing distributed memory multiprocessor .", "using virtual lines to enhance locality exploitation . because the spatial locality of numerical codes is significant , the potential for performance improvements is important . however , large cache lines can not be used in current on chip data caches because of the important pollution they breed . in this paper , we propose a hardware design , called the virtual line scheme , that allows the utilization of large virtual cache lines when fetching data from memory for better exploitation of spatial locality , while the actual physical cache line is smaller than currently found cache lines for better exploitation of temporal locality . simulations show that a <digit> % to <digit> % reduction of the average memory access time can be obtained for a <digit> cycle memory latency . it is also shown how simple software informations can be used to significantly decrease memory traffic , a flaw associated with the utilization of large cache lines .", "an approach to communication efficient data redistribution . we address the development of efficient methods for performing data redistribution of arrays on distributed memory machines . data redistribution is important for the distributed memory implementation of data parallel languages such as high performance fortran . an algebraic representation of regular data distributions is used to develop an analytical model for evaluating the communication cost of data redistribution . using this algebraic representation and the analytical model , an approach to communication efficient data redistribution is developed . implementation results on the intel ipsc <digit> are reported .", "measure , stochasticity , and the density of hard languages . the main theorem of this paper is that , for every real number alpha < <digit> ( e . g . , alpha <digit> . <digit> ) , only a measure <digit> subset of the languages decidable in exponential time are leq p n alpha tt reducible to languages that are not exponentially dense . thus every leq p n alpha tt hard language for e is exponentially dense . this strengthens watanabe ' s <digit> result , that every leq p ( o log n ) tt hard language for e is exponentially dense . the combinatorial technique used here , the sequentially most frequent query selection , also gives a new , simpler proof of watanabe ' s result . the main theorem also has implications for the structure of np under strong hypotheses . ogiwara and watanabe ( <digit> ) have shown that the hypothesis p ne np implies that every leq p btt hard language for np is nonsparse ( i . e . , not polynomially sparse ) . their technique does not appear to allow significant relaxation of either the query bound or the sparseness criterion . it is shown here that a stronger hypothesis namely , that np does not have measure <digit> in exponential time implies the stronger conclusion that , for every real alpha < <digit> , every leq p n alpha tt hard language for np is exponentially dense . evidence is presented that this stronger hypothesis is reasonable . the proof of the main theorem uses a new , very general weak stochasticity theorem , ensuring that almost every language in e is statistically unpredictable by feasible deterministic algorithms , even with linear nonuniform advice .", "cache interference phenomena . the impact of cache interferences on program performance ( particularly numerical codes , which heavily use the memory hierarchy ) remains unknown . the general knowledge is that cache interferences are highly irregular , in terms of occurrence and intensity . in this paper , the different types of cache interferences that can occur in numerical loop nests are identified . an analytical method is developed for detecting the occurrence of interferences and , more important , for computing the number of cache misses due to interferences . simulations and experiments on real machines show that the model is generally accurate and that most interference phenomena are captured . experiments also show that cache interferences can be intense and frequent . certain parameters such as array base addresses or dimensions can have a strong impact on the occurrence of interferences . modifying these parameters only can induce global execution time variations of <digit> % and more . applications of these modeling techniques are numerous and range from performance evaluation and prediction to enhancement of data locality optimizations techniques .", "an exploratory evaluation of three interfaces for browsing large hierarchical tables of contents . three different interfaces were used to browse a large ( <digit> items ) table of contents . a fully expanded stable interface , expand contract interface , and <unk> interface were studied in a between groups experiment with <digit> novice participants . nine timed fact retrieval tasks were performed each task is analyzed and discussed separately . we found that both the expand contract and <unk> interfaces produced significantly faster times than the stable interface for many tasks using this large hierarchy other advantages of the expand contract and <unk> interfaces over the stable interface are discussed . the animation characteristics of the expand contract interface appear to play a major role . refinements to the <unk> and expand contract interfaces are suggested . a predictive model for measuring navigation effort of each interface is presented .", "fixpoint computation for polyvariant static analyses of higher order applicative programs . this paper presents an optimized general purpose algorithm for polyvariant , static analyses of higher order applicative programs . a polyvariant analysis is a very accurate form of analysis that produces many more abstract descriptions for a program than does a conventional analysis . it may also compute intermediate abstract descriptions that are irrelevant to the final result of the analysis . the optimized algorithm addresses this overhead while preserving the accuracy of the analysis . the algorithm is also parameterized over both the abstract domain and degree of polyvariance . we have implemented an instance of our algorithm and evaluated its performance compared to the unoptimized algorithm . our implementation runs significantly faster on average than the other algorithm for benchmarks reported here .", "a framework for expressing the relationships between multiple views in requirements specification . composite systems are generally comprised of heterogeneous components whose specifications are developed by many development participants . the requirements of such systems are invariably elicited from multiple perspectives that overlap , complement , and contradict each other . furthermore , these requirements are generally developed and specified using multiple methods and notations , respectively . it is therefore necessary to express and check the relationships between the resultant specification fragments . we deploy multiple viewpoints that hold partial requirements specifications , described and developed using different representation schemes and development strategies . we discuss the notion of inter viewpoint communication in the context of this viewpoints framework , and propose a general model for viewpoint interaction and integration . we elaborate on some of the requirements for expressing and enacting inter viewpoint relationships the vehicles for consistency checking and inconsistency management . finally , though we use simple fragments of the requirements specification method core to illustrate various components of our work , we also outline a number of larger case studies that we have used to validate our framework . our computer based viewpoints support environment , the viewer , is also briefly described .", "prototyping a process monitoring experiment . features are often the basic unit of development for a very large software system and represent long term efforts , spanning up to several years from inception to actual use . developing an experiment to monitor ( by means of sampling ) such lengthy processes requires a great deal of care in order to minimize casts and to maximize benefits . just as prototyping is often a necessary auxiliary step in a large scale , long term development effort , so , too , is prototyping a necessary step in the development of a large scale , long term process monitoring experiment . therefore , we have prototyped our experiment using a representative process and reconstructed data from a large and rich feature development . this approach has yielded three interesting sets of results . first , we reconstructed a <digit> month time diary for the lead engineer of a feature composed of both hardware and software . these data represent the daily state ( where the lead engineer spent the majority of his time ) for a complete cycle of the development process . second , we found that we needed to modify our experimental design . our initial set of states did not represent the data as well as we had hoped . this is exemplified by the fact that the other category is too large . finally , the data provide evidence for both a waterfall view and an interactive , cyclic view of software development . we conclude that the prototyping effort is a necessary part of developing and installing any large scale process monitoring experiment .", "serial array time slot interchangers and optical implementations . we consider time slot interchangers ( tsis ) which are built from <digit> spl times <digit> exchange switches and delays and which are useful for time division multiplexed ( tdm ) systems in telecommunications and pipelined systems such as time multiplexed optical multiprocessors . we formulate a general method for constructing tsis based on multistage interconnection networks in the space domain via space to time mapping . two types of tsis , time slot <unk> and time slot sorters , are considered . we review the time slot permuter based on the benes network , and obtain the spl <unk> tilde time slot permuter based on the bit controlled , self routing spl lambda permutation network . the time slot sorter , s sub n , is obtained from the batcher spatial sorting network . the generalized lambda time slot permuter spl <unk> <unk> q is obtained , in an algorithmic approach , by combining the idea of the spl <unk> tilde time slot permuter and q way bitonic decomposition ( q <digit> sup q ) . the numbers of switches , control complexities , and frame delays of these architectures are compared , and the problem of crosstalk in optical implementation is discussed . it is shown that control complexity can be traded against the number of switches .", "request combining in multiprocessors with arbitrary interconnection networks . several techniques have been proposed to allow parallel access to a shared <unk> by combining requests . they have one or more of the following attributes requirements for a priori knowledge of the request to combine , restrictions on the <unk> messages in the network , or the use of sophisticated interconnection network nodes . we present a new method of combining requests that does not have the <unk> . we obtain this new method for request combining by developing <unk> scheme for the existing methods of request combining . this <unk> is facilitated by separating the request combining process into a two <unk> determining the combining set , which is the set of requests that participate ina combined access and distributing the results of the combined access to the <unk> the combining set . the classification of combining strategies is based upon <unk> component , processor elements , or interconnection network performs each ofthese tasks . our approach , which uses the interconnection network to establish <unk> set and the processor elements to distribute the results , lies in an <unk> of the design space . we also present simulation results to assess the benefits of theproposed approach .", "fault tolerant routing in mesh architectures . it is important for a distributed computing system to be able to route messages <unk> faulty links or nodes may be present . we present a fault tolerant routingalgorithm that assures the delivery of every message as long as there is a path <unk> source and destination . the algorithm works on many common mesh <unk> as the torus and hexagonal mesh . the proposed scheme can also detect <unk> of a path between a pair of nodes in a finite amount of time . moreover , <unk> requires each node in the system to know only the state ( faulty or not ) of eachof its own links . the performance of the routing scheme is simulated for both square <unk> meshes while varying the physical distribution of faulty components . it <unk> that a shortest path between the source and destination of each message <unk> with a high probability , and , if a path exists , it is usually found very quickly .", "improving generalization with active learning . active learning differs from learning from examples in that the learning algorithm assumes at least some control over what part of the input domain it receives information about . in some situations , active learning is provably more powerful than learning from examples alone , giving better generalization for a fixed number of training examples . in this article , we consider the problem of learning a binary concept in the absence of noise . we describe a formalism for active concept learning called selective sampling and show how it may be approximately implemented by a neural network . in selective sampling , a learner receives distribution information from the environment and queries an oracle on parts of the domain it considers useful . we test our implementation , called an sg network , on three domains and observe significant improvement in generalization .", "index transformation algorithms in a linear algebra framework . we present a linear algebraic formulation for a class of index transformations such <unk> code encoding and decoding , matrix transpose , bit reversal , vector reversal , shuffles , and other index or dimension permutations . this formulation unifies , simplifies , and can be used to derive algorithms for hypercube multiprocessors . we show how all the widely known properties of gray codes , and some not so well known properties as well , can be derived using this framework . using this framework , we relate hypercube communications algorithms to gauss jordan elimination on a matrix of <digit> ' s and <digit> ' s .", "building information systems for mobile environments . it is expected that in the near future , tens of millions of users will have access to distributed information systems through wireless connections . the technical characteristics of the wireless medium and the resulting mobility of both data resources and data consumers raise new challenging questions regarding the development of information systems appropriate for mobile environments . in this paper , we report on the development of such a system . first , we describe the general architecture of the information system and the main considerations of our design . then , based on these considerations , we present our system support for maintaining the consistency of replicated data and for providing transaction schemas that account for the frequent but predictable disconnections , the mobility , and the vulnerability of the wireless environment .", "line search algorithms with guaranteed sufficient decrease . the development of software for minimization problems is often based on a line search method . we consider line search methods that satisfy sufficient decrease and curvature conditions , and formulate the problem of determining a point that satisfies these two conditions in terms of finding a point in a set t ( mgr ) . we describe a search algorithm for this problem that produces a sequence of iterates that converge to a point in t ( mgr ) and that , except for pathological cases , terminates in a finite number of steps . numerical results for an implementation of the search algorithm on a set of test functions show that the algorithm terminates within a small number of iterations .", "bounds and error estimates for radiosity . we present a method for determining a posteriori bounds and estimates for local and total errors in radiosity solutions . the ability to obtain bounds and estimates for the total error is crucial fro reliably judging the acceptability of a solution . realistic estimates of the local error improve the efficiency of adaptive radiosity algorithms , such as hierarchical radiosity , by indicating where adaptive refinement is necessary . first , we describe a hierarchical radiosity algorithm that computes conservative lower and upper bounds on the exact radiosity function , as well as on the approximate solution . these bounds account for the propagation of errors due to interreflections , and provide a conservative upper bound on the error . we also describe a non conservative version of the same algorithm that is capable of computing tighter bounds , from which more realistic error estimates can be obtained . finally , we derive an expression for the effect of a particular interaction on the total error . this yields a new error driven refinement strategy for hierarchical radiosity , which is shown to be superior to brightness weighted refinement .", "a framework for the analysis of error in global illumination algorithms . in this paper we identify sources of error in global illumination algorithms and derive bounds for each distinct category . errors arise from three sources inaccuracies in the boundary data , discretization , and computation . boundary data consists of surface geometry , reflectance functions , and emission functions , all of which may be perturbed by errors in measurement or simulation , or by simplifications made for computational efficiency . discretization error is introduced by replacing the continuous radiative transfer equation with a finite dimensional linear system , usually by means of boundary elements and a corresponding projection method . finally , computational errors perturb the finite dimensional linear system through imprecise form factors , inner products , visibility , etc . , as well as by halting iterative solvers after a finite number of steps . using the error taxonomy introduced in the paper we examine existing global illumination algorithms and suggest new avenues of research .", "spreadsheets for images . we describe a data visualization system based on spreadsheets . cells in our spreadsheet contain graphical objects such as images , volumes , or movies . cells may also contain widgets such as buttons , sliders , or curve editors . objects are displayed in miniature inside each cell . formulas for cells are written in a general purpose programming language ( tcl ) augmented with operators for array manipulation , image processing , and rendering . compared to flow chart visualization systems , spreadsheets are more expressive , morescalable , and easier to program . compared to conventional numerical spreadsheets , spreadsheets for images pose several unique design problems larger formulas , longer computation times , and more complicated intercelldependencies . in response to these problems , we have extended the spreadsheet paradigm in three ways formulas can display their results anywhere in the spreadsheet , cells can be selectively disabled , and multiple cells can be edited at once . we discuss these extensions and their implications , and we also point out some unexpected uses for our spreadsheets as a visual database browser , as a graphical user interface builder , as a smart clipboard for the desktop , and as a presentation tool .", "generalization of lambert ' ' s reflectance model . lambert ' s model for body reflection is widely used in computer graphics . it is used extensively by rendering techniques such as radiosity and ray tracing . for several real world objects , however , lambert ' s model can prove to be a very inaccurate approximation to the body reflectance . while the brightness of a lambertian surface is independent of viewing direction , that of a rough surface increases as the viewing direction approaches the light source direction . in this paper , a comprehensive model is developed that predicts body reflectance from rough surfaces . the surface is modeled as a collection of lambertian facets . it is shown that such a surface is inherently non lambertian due to the foreshortening of the surface facets . further , the model accounts for complex geometric and radiometric phenomena such as masking , shadowing , and interreflections between facets . several experiments have been conducted on samples of rough diffuse surfaces , such as , plaster , sand , clay , and cloth . all these surface demonstrate significant deviation from lambertian behavior . the reflectance measurements obtained are in strong agreement with the reflectance predicted by the model .", "free form shape design using triangulated surfaces . we present an approach to modeling with truly mutable yet completely controllable free form surfaces of arbitrary topology . surfaces may be pinned down at points and along curves , cut up and smoothly welded back together , and faired and reshaped in the large . this style of control is formulated as a constrained shape optimization , with minimization of squared principal curvatures yielding graceful shapes that are free of the parameterization worries accompanying many patch based approaches . triangulated point sets are used to approximate these smooth variational surfaces , bridging the gap between patch based and particle based representations . automatic refinement , mesh smoothing , and re triangulation maintain a good computational mesh as the surface shape evolves , and give sample points and surface features much of the freedom to slide around in the surface that oriented particles enjoy . the resulting surface triangulations are constructed and maintained in real time .", "the <unk> approach to testing object oriented programs . this article describes a new approach to the unit testing of object oriented programs , a set of tools based on this approach , and two case studies . in this approach , each test case consists of a tuple of sequences of messages , along with tags indicating whether these sequences should put objects of the class under test into equivalent states and or return objects that are in equivalent states . tests are executed by sending the sequences to objects of the class under test , then invoking a user supplied equivalence checking mechanism . this approach allows for substantial automation of many aspects of testing , including test case generation , test driver generation , test execution , and test checking . experimental prototypes of tools for test generation and test execution are described . the test generation tool requires the availability of an algebraic specification of the abstract data type being tested , but the test execution tool can be used when no formal specification is available . using the test execution tools , case studies involving execution of tens of thousands of test cases , with various sequence lengths , parameters , and combinations of operations were performed . the relationships among likelihood of detecting an error and sequence length , range of parameters , and relative frequency of various operations were investigated for priority queue and sorted list implementations having subtle errors . in each case , long sequences tended to be more likely to detect the error , provided that the range of parameters was sufficiently large and likelihood of detecting an error tended to increase up to a threshold value as the parameter range increased .", "multiresolution curves . we describe a multiresolution curve representation , based on wavelets , that conveniently supports a variety of operations smoothing a curve editing the overall form of a curve while preserving its details and approximating a curve within any given error tolerance for scan conversion . we present methods to support continuous levels of smoothing as well as direct manipulation of an arbitrary portion of the curve the control points , as well as the discrete nature of the underlying hierarchical representation , can be hidden from the user . the multiresolution representation requires no extra storage beyond that of the original control points , and the algorithms using the representation are both simple and fast .", "a graphical interval logic for specifying concurrent systems . this article describes a graphical interval logic that is the foundation of a tool set supporting formal specification and verification of concurrent software systems . experience has shown that most software engineers find standard temporal logics difficult to understand and use . the objective of this article is to enable software engineers to specify and reason about temporal properties of concurrent systems more easily by providing them with a logic that has an intuitive graphical representation and with tools that support its use . to illustrate the use of the graphical logic , the article provides some specifications for an elevator system and proves several properties of the specifications . the article also describes the tool set and the implementation .", "using particles to sample and control implicit surfaces . we present a new particle based approach to sampling and controlling implicit surfaces . a simple constraint locks a set of particles onto a surface while the particles and the surface move . we use the constraint to make surfaces follow particles , and to make particles follow surfaces . we implement control points for direct manipulation by specifying particle motions , then solving for surface motion that maintains the constraint . for sampling and rendering , we run the constraint in the order direction , creating floater particles that roam freely over the surface . local repulsion is used to make floaters spread evenly across the surface . by varying the radius of repulsion adaptively , and fissioning or killing particles based on the local density , we can achieve good sampling distributions very rapidly , and maintain them even in the face of rapid and extreme deformations and changes in surface topology .", "piecewise smooth surface reconstruction . we present a general method for automatic reconstruction of accurate , concise , piecewise smooth surface models from scattered range data . the method can be used in a variety of applications such as reverse <unk> automatic generation of cad models from physical objects . novel aspects of the method are its ability to model surfaces of arbitrary topological type and to recover sharp features such as creases and corners . the method has proven to be effective , as demonstrated by a number of examples using both simulated and real data . a key ingredient in the method , and a principal contribution of this paper , is the introduction of a new class of piecewise smooth surface representations based on subdivision . these surfaces have a number of properties that make them ideal for use in surface reconstruction they are simple to implement , they can model sharp features concisely , and they can be fit to scattered range data using an unconstrained optimization procedure .", "a clustering algorithm for radiosity in complex environments . we present an approach for accelerating hierarchical radiosity by clustering objects . previous approaches constructed effective hierarchies by subdividing surfaces , but could not exploit a hierarchical grouping on existing surfaces . this limitation resulted in an excessive number of initial links in complex environments . initial linking is potentially the most expensive portion of hierarchical radiosity algorithms , and constrains the complexity of the environments that can be simulated . the clustering algorithm presented here operates by estimating energy transfer between collections of objects while maintaining reliable error bounds on each transfer . two methods of bounding the transfers are employed with different tradeoffs between accuracy and time . in contrast with the o ( s2 ) time and space complexity of the initial linking in previous hierarchical radiosity algorithms , the new methods have complexities of o ( <unk> ) and o ( s ) for both time and space . using these methods we have obtained speedups of two orders of magnitude for environments of moderate complexity while maintaining comparable accuracy .", "visual techniques for traditional and multimedia layouts . character user interfaces ( cui ) generally display only pieces of text and semi graphical objects , whereas graphical user interfaces ( gui ) display interaction objects ( io ) such as icons , check boxes , list boxes , radio buttons and push buttons . traditional gui do not often go beyond such existing io . multimedia gui add interactive objects such as pictures , images , video sequences that could serve as a base for sophisticated user interaction . all these types of user interfaces have in common the problem of determining a basic layout of io . the complexity of this problem is proportional to the variety of io accessible for the designer . this paper summarises visual techniques exported from the area of visual design to be further exploited for user interface . these visual techniques provide the designer a wide range of means for laying out io . a small set of guidelines for effectively applying these visual techniques is given .", "an architecture for an extensible 3d interface toolkit . this paper presents the architecture for an extensible toolkit used in construction and rapid prototyping of three dimensional interfaces , interactive illustrations , and three dimensional widgets . the toolkit provides methods for the direct manipulation of 3d primitives which can be linked together through a visual programming language to create complex constrained behavior . features of the toolkit include the ability to visually build , encapsulate , and parameterize complex models , and impose limits on the models . the toolkit ' s constraint resolution technique is based on a dynamic object model similar to those in prototype delegation object systems . the toolkit has been used to rapidly prototype tools for mechanical modelling , scientific visualization , construct 3d widgets , and build mathematical illustrations .", "extending a graphical toolkit for two handed interaction . multimodal interaction combines input from multiple sensors such as pointing devices or speech recognition systems , in order to achieve more fluid and natural interaction . two handed interaction has been used recently to enrich graphical interaction . building applications that use such combined interaction requires new software techniques and frameworks . using additional devices means that user interface toolkits must be more flexible with regard to input devices and event types . the possibility of parallel interactions must also be taken into account , with consequences on the structure of toolkits . finally , frameworks must be provided for the combination of events and status of several devices . this paper reports on the extensions we made to the direct manipulation interface toolkit whizz in order to experiment two handed interaction . these extensions range from structural adaptations of the toolkit to new techniques for specifying the time dependent fusion of events .", "reducing memory traffic with cregs . array and pointer references are often ambiguous in that compile time analysis can not always determine if distinct references are to the same object . ambiguously aliased objects are not allocated to registers by conventional compilers due to the cost of the loads and stores required to keep register copies consistent with memory and each other . there are several hardware and software strategies that can be used to solve the ambiguous alias problem we have implemented one such scheme called cregs in a compiler and instruction level simulator . we present a modification to briggs ' optimistic coloring algorithm that allows us to allocate local and parameter arrays to cregs . the cregs register file operation and instruction set modifications required to implement this scheme are discussed . underlying hardware issues such as pipeline impact and chip area are briefly discussed . several benchmarks are compared in terms of dynamic instructions executed for two creg set sizes . the measured reduction in memory operations is significant , averaging <digit> % for the benchmarks shown .", "data relocation and prefetching for programs with large data sets . numerical applications frequently contain nested loop structures that process large arrays of data . the execution of these loop structures often produces memory reference patterns that poorly utilize data caches . limited associativity and cache capacity result in cache conflict misses . also , non unit stride access patterns can cause low utilization of cache lines . data copying has been proposed and investigated in order to reduce cache conflict misses , but this technique has a high execution overhead since it performs the copy operations entirely in software . we propose a combined hardware and software technique called data relocation and prefetching which eliminates much of the overhead of data copying through the use of special hardware . furthermore , by relocating the data while performing software prefetching , the overhead of copying the data can be reduced further . experimental results for data relocation and prefetching are encouraging and show a large improvement in cache performance .", "a high performance microarchitecture with hardware programmable functional units . this paper explores a novel way to incorporate hardware programmable resources into a processor microarchitecture to improve the performance of general purpose applications . through a coupling of compile time analysis routines and hardware synthesis tools , we automatically configure a given set of the hardware programmable functional units ( pfus ) and thus augment the base instruction set architecture so that it better meets the instruction set needs of each application . we refer to this new class of general purpose computers as programmable instruction set computers ( prisc ) . although similar in concept , the prisc approach differs from dynamically programmable microcode because in prisc we define entirely new primitive datapath operations . in this paper , we concentrate on the microarchitectural design of the simplest form of <unk> risc microprocessor with a single pfu that only evaluates combinational functions . we briefly discuss the operating system and the programming language compilation techniques that are needed to successfully build prisc and , we present performance results from a proof of concept study . with the inclusion of a single <digit> bit wide pfu whose hardware cost is less than that of a <digit> kilobyte sram , our study shows a <digit> % improvement in processor performance on the specint92 benchmarks .", "accessing hyperdocuments through interactive dynamic maps . we propose a new navigation paradigm based on a spatial metaphor to help users access and navigate within large sets of documents . this metaphor is implemented by a computer artifact called an interactive dynamic map ( idm ) . an idm plays a role similar to the role of a real map with respect to physical space . two types of idms are computed from the documents topic idms represent the semantic contents of a set of documents while document idms visualize a subset of documents such as those resulting from a query . idms can be used for navigating , browsing , and querying . they can be made active , they can be customized and they can be shared among users . the article presents the shadocs document retrieval system and describes the role , use and generation of idms in shadocs .", "an interaction engine for rich hypertexts . in semantically rich hypertexts it is attractive to enable presentation of a network of nodes and link at different levels of abstraction . it is also important that the user can interact with the hypertext using a command repertoire that reflects the chosen abstraction level . based on a characterization of rich hypertext we introduce the concept of an interaction engine that governs the separation between internal hypertext representation and external screen presentation . this separation is the key principle of the hyperpro system . the hyperpro interaction engine is based on simple rules for presentation , interpretation of events , and menu set up . much of the power of the interaction engine framework comes from the organization of these rules relative to the type of hierarchy of nodes and links , and relative to a hierarchy of so called interaction schemes . the primary application domain discussed in the paper is program development and program documentation .", "interpreted collaboration protocols and their use in groupware prototyping . the correct and timely creation of systems for coordination of group work depends on the ability to express , analyze , and experiment with protocols for managing multiple work threads . we present an evolution of the trellis model that provides a formal basis for prototyping the coordination structure of a collaboration system . in trellis , group interaction protocols are represented separately from the interface processes that use them for coordination . protocols are interpreted ( rather than compiled into applications ) so group interactions can be changed as a collaborative task progresses . changes can be made either by a person editing the protocol specification on the fly or by a silent observation process that participates in an application solely to perform behavioral adaptations . trellis uniquely mixes hypermedia browsing with collaboration support . we term this combination a hyperprogram , and we say that a hyperprogram integrates the description of a collaborative task with the information required for that task . as illustration , we describe a protocol for a moderated meeting and show a trellis prototype conference tool controlled by this protocol .", "a flexible object merging framework . the need to merge different versions of an object to a common state arises in collaborative computing due to several reasons including optimistic concurrency control , asynchronous coupling , and absence of access control . we have developed a flexible object merging framework that allows definition of the merge policy based on the particular application and the context of the collaborative activity . it performs automatic , semi automatic , and interactive merges , supports semantics determined merges , operates on objects with arbitrary structure and semantics , and allows fine grained specification of merge policies . it is based on an existing collaborative applications framework and consists of a merge matrix , which defines merge functions and their parameters and allows definition of multiple merge policies , and a merge algorithm , which performs the merge based on the results computed by the merge functions . in conjunction with our framework we introduce a set of merge policies for several useful kinds of merges we have identified . this paper motivates the need for a general approach to merging , identifies some important merging issues , surveys previous research in merging , identifies a list of merge requirements , describes our merging framework and illustrates it with examples , and evaluates the framework with respect to the requirements and other research efforts in merging objects .", "a forum for supporting interactive presentations to distributed audiences . computer technology is available to build video based tools for supporting presentations to distributed audiences , but it is unclear how such an environment affects participants ' ability to interact and to learn . we built and tested a tool called forum that broadcasts live audio , video and slides from a speaker , and enables audiences to interact with the speaker and other audience members in a variety of ways . the challenge was to enable effective interactions while overcoming obstacles introduced by the distributed nature of the environment , the large size of the group , and the asymmetric roles of the participants . forum was most successful in enabling effective presentations in cases when the topic sparked a great deal of audience participation or when the purpose of the talk was mostly informational and did not require a great deal of interaction . we are exploring ways to enhance forum to expand the effectiveness of this technology .", "tight bounds on oblivious chaining . the chaining problem is defined as follows . given values the chaining problem appears as a subproblem in many contexts . there are known algorithms that solve the chaining problem on crcw prams in o ( alpha ( n ) ) time , where alpha ( n ) is the inverse of ackerman ' s function , and is a very slowly growing function . the author studies a class of algorithms ( called oblivious algorithms ) for this problem . a simple oblivious chaining algorithm running in o ( alpha ( n ) ) time is presented . more importantly , the optimality of the algorithm is demonstrated by showing a matching lower bound for oblivious algorithms using n processors . the first steps toward a lower bound for all chaining algorithms are also provided by showing that any chaining algorithm that runs in two steps must use a superlinear number of processors . the proofs use prefix graphs and weak superconcentrators . an interesting connection between the two is demonstrated and this idea is used to obtain improved bounds on the size of prefix graphs .", "using specialized procedures and specification based analysis to reduce the runtime costs of modularity . managing tradeoffs between program structure and program efficiency is one of the most difficult problems facing software engineers . decomposing programs into abstractions simplifies the construction and maintenance of software and results in fewer errors . however , the introduction of these abstractions often introduces significant inefficiencies . this paper describes a strategy for eliminating many of these inefficiencies . it is based upon providing alternative implementations of the same abstraction , and using information contained in formal specifications to allow a compiler to choose the appropriate one . the strategy has been implemented in a prototype compiler that incorporates theorem proving technology .", "trap driven simulation with tapeworm ii . tapeworm ii is a software based simulation tool that evaluates the cache and tlb performance of multiple task and operating system intensive workloads . tapeworm resides in an os kernel and causes a host machine ' s hardware to drive simulations with kernel traps instead of with address traces , as is conventionally done . this allows tapeworm to quickly and accurately capture complete memory referencing behavior with a limited degradation in overall system performance . this paper compares trap driven simulation , as implemented in tapeworm , with the more common technique of trace driven memory simulation with respect to speed , accuracy , portability and flexibility .", "reducing branch costs via branch alignment . several researchers have proposed algorithms for basic block reordering . we call these branch alignment algorithms . the primary emphasis of these algorithms has been on improving instruction cache locality , and the few studies concerned with branch prediction reported small or minimal improvements . as wide issue architectures become increasingly popular the importance of reducing branch costs will increase , and branch alignment is one mechanism which can effectively reduce these costs . in this paper , we propose an improved branch alignment algorithm that takes into consideration the architectural cost model and the branch prediction architecture when performing the basic block reordering . we show that branch alignment algorithms can improve a broad range of static and dynamic branch prediction architectures . we also show that a program performance can be improved by approximately <digit> % even when using recently proposed , highly accurate branch prediction architectures . the programs are compiled by any existing compiler and then transformed via binary transformations . when implementing these algorithms on a alpha axp <digit> up to a <digit> % reduction in total execution time is achieved .", "inverse kinematics positioning using nonlinear programming for highly articulated figures . an articulated figure is often modeled as a set of rigid segments connected with joints . its configuration can be altered by varying the joint angles . although it is straight forward to compute figure configurations given joint angles ( forward kinematics ) , it is more difficult to find the joint angles for a desired configuration ( inverse kinematics ) . since the inverse kinematics problem is of special importance to an animator wishing to set a figure to a posture satisfying a set of positioning constraints , researchers have proposed several different approaches . however , when we try to follow these approaches in an interactive animation system where the object on which to operate is as highly articulated as a realistic human figure , they fail in either generality or performance . so , we approach this problem through nonlinear programming techniques . it has been successfully used since <digit> in the spatial constraint system within jack , a human figure simulation system developed at the university of pennsylvania , and proves to be satisfactorily efficient , controllable , and robust . a spatial constraint in our system involves two parts one constraint on the figure , the end effector , and one on the spatial environment , the goal . these two parts are dealt with separately , so that we can achieve a neat modular implementation . constraints can be added one at a time with appropriate weights designating the importance of this constraint relative to the others and are always solved as a group . if physical limits prevent satisfaction of all the constraints , the system stops with the ( possibly local ) optimal solution for the given weights . also , the rigidity of each joint angle can be controlled , which is useful for redundant degrees of freedom .", "solution differentiability for nonlinear parametric control problems . perturbed nonlinear control problems with data depending on a vector parameter are considered . using second order sufficient optimality conditions , it is shown that the optimal solution and the adjoint multipliers are differentiable functions of the parameter . the proof exploits the close connections between solutions of a riccati differential equation and shooting methods for solving the associated boundary value problem . solution differentiability provides a firm theoretical basis for numerical feedback schemes that have been developed for computing neighbouring extremals . the results are illustrated by an example that admits two extremal solutions . second order sufficient conditions single out one optimal solution for which a sensitivity analysis is carried out .", "robust indirect adaptive control of time varying plants with unmodeled dynamics and disturbances . it is shown that indirect pole zero placement adaptive controllers are robust for systems with time varying parameters as well as unmodeled dynamics and disturbances . a parameter estimator with projection is used . no special signal normalization is employed to ensure robustness . the nominal system parameters need only be bounded , and their variations need only be small in an average sense . this allows them to vary slowly with time , as well as to take large jumps occasionally . the adaptive controllers can also simultaneously tolerate small unmodeled dynamics , as well as bounded disturbances , with no restriction on the magnitude of the bound .", "randomized algorithms for multiprocessor page migration . the page migration problem is to manage a globally addressed shared memory in a multiprocessor system . each physical page of memory is located at a given processor , and memory references to that page by other processors incur a cost proportional to the network distance . at times the page may migrate between processors at cost proportional to the distance times d , a page size factor . the problem is to schedule movements on line so that the total cost of memory references is within a constant factor c of the best off line schedule . an algorithm that does so is called c competitive . black and sleator gave <digit> competitive deterministic on line algorithms for uniform networks ( complete graphs with unit edge lengths ) and for trees with arbitrary edge lengths . no good deterministic algorithm is known for general networks with arbitrary edge lengths . randomized algorithms are presented for the migration problem that are both simple and better than <digit> competitive against an oblivious adversary . an algorithm for uniform graphs is given . it is approximately <digit> . <digit> competitive as d grows large . a second , more powerful algorithm that works on graphs with arbitrary edge distances is also given . this algorithm is approximately <digit> . <digit> competitive ( or , <digit> plus the golden ratio ) for large d . both these algorithms use random bits only during an initialization phase , and from then on run deterministically . the competitiveness of a very simple coin flipping algorithm is also examined .", "powerlist a structure for parallel recursion . many data parallel <unk> fourier transform , batcher ' s sorting schemes , and the prefix <unk> recursive structure . we propose a data structure called powerlist that permits succinct descriptions of such algorithms , highlighting the roles of both parallelism and recursion . simple algebraic properties of this data structure can be <unk> to derive properties of these algorithms and to establish equivalence of different algorithms that solve the same problem .", "distributed network computing over local atm networks . communication between processors has long been the bottleneck of distributed network computing . however , recent progress in switch based high speed local area networks ( lans ) may be changing this situation . asynchronous transfer mode ( atm ) is one of the most widely accepted and emerging high speed network standards which can potentially satisfy the communication needs of distributed network computing . in this paper , we investigate distributed network computing over local atm networks . we first study the performance characteristics involving end to end communication in an environment that includes several types of workstations interconnected via a fore systems ' asx <digit> atm switch . we then compare the communication performance of four different application programming interfaces ( apis ) . the four apis were fore systems atm api , bsd socket programming interface , sun ' s remote procedure call ( rpc ) , and the parallel virtual machine ( pvm ) message passing library . each api represents distributed programming at a different communication protocol layer . we evaluate parallel matrix multiplication over the local atm network . the experimental results show that network computing is promising over local atm networks .", "invariants of six points and projective reconstruction from three uncalibrated images . <unk> are three projective invariants of a set of six points in general position in space . it is well known that these invariants can not be recovered from one image , however an invariant relationship does exist between space invariants and image invariants . this invariant relationship is first derived for a single image . then this invariant relationship is used to derive the space invariants , when multiple images are available . this paper establishes that the minimum number of images for computing these invariants is three , and the computation of invariants of six points from three images can have as many as three solutions . algorithms are presented for computing these invariants in closed form . the accuracy and stability with respect to image noise , selection of the triplets of images and distance between viewing positions are studied both through real and simulated images . applications of these invariants are also presented . both the results of faugeras <digit> and hartley et al . <digit> for projective reconstruction and <unk> method <digit> for epipolar geometry determination from two uncalibrated images with at least seven points are extended to the case of three uncalibrated images with only six points .", "efficient image processing algorithms on the scan line array processor . <unk> develop efficient algorithms for low and intermediate level image processing on the scan line array processor , a simd machine consisting of a linear array of cells that processes images in a scan line fashion . for low level processing , we present algorithms for block dft , block dct , convolution , template matching , shrinking , and expanding which run in real time . by real time , we mean that , if the required processing is based on neighborhoods of size mm , then the output lines are generated at a rate of o ( m ) operations per line and a latency of o ( m ) scan lines , which is the best that can be achieved on this model . we also develop an algorithm for median filtering which runs in almost real time at a cost of o ( m rm log m ) time per scan line and a latency of bf lfloor underline m , , <digit> rfloor scan lines . for intermediate level processing , we present optimal algorithms for translation , histogram computation , scaling , and rotation . we also develop efficient algorithms for labelling the connected components and determining the convex hulls of multiple figures which run in o ( n rm log n ) and o ( n rm log 2n ) time , respectively . the latter algorithms are significantly simpler and easier to implement than those already reported in the literature for linear arrays .", "a bayesian segmentation methodology for parametric image models . <unk> based image segmentation methods require some criterion for determining when to merge regions . this paper presents a novel approach by introducing a bayesian probability of homogeneity in a general statistical context . our approach does not require parameter estimation and is therefore particularly beneficial for cases in which estimation based methods are most prone to error when little information is contained in some of the regions and , therefore , parameter estimates are unreliable . we apply this formulation to three distinct parametric model families that have been used in past segmentation schemes implicit polynomial surfaces , parametric polynomial surfaces , and gaussian markov random fields . we present results on a variety of real range and intensity images .", "designing programs that check their work . a program correctness checker is an algorithm for checking the output of a computation . that is , given a program and an instance on which the program is run , the checker certifies whether the output of the program on that instance is correct . this paper defines the concept of a program checker . it designs program checkers for a few specific and carefully chosen problems in the class fp of functions computable in polynomial time . problems in fp for which checkers are presented in this paper include sorting , matrix rank and gcd . it also applies methods of modern cryptography , especially the idea of a probabilistic interactive proof , to the design of program checkers for group theoretic computations . two structural theorems are proven here . one is a characterization of problems that can be checked . the other theorem establishes equivalence classes of problems such that whenever one problem in a class is checkable , all problems in the class are checkable .", "developing a reflective model of collaborative systems . recent years have seen a shift in perception of the nature of hci and interactive systems . as interface work has increasingly become a focus of attention for the social sciences , we have expanded our appreciation of the importance of issues such as work practice , adaptation , and evolution in interactive systems . the reorientation in our view of interactive systems has been accompanied by a call for a new model of design centered around user needs and participation . this article argues that a new process of design is not enough and that the new view necessitates a similar reorientation in the structure of the systems we build . it outlines some requirements for systems that support a deeper conception of interaction and argues that the traditional system design techniques are not suited to creating such systems . finally , using examples from ongoing work in the design of an open toolkit for collaborative applications , it illustrates how the principles of computational reflection and metaobject protocols can lead us toward a new model based on open abstraction that holds great promise in addressing these issues .", "a fortran <digit> environment for research and prototyping of enclosure algorithms for nonlinear equations and global optimization . an environment for general research into and prototyping of algorithms for reliable constrained and unconstrained global nonlinear optimization and reliable enclosure of all roots of nonlinear systems of equations , with or without inequality constraints , is being developed . this environment should be portable , easy to learn , use , and maintain , and sufficiently fast for some production work . the motivation , design principles , uses , and capabilities for this environment are outlined . the environment includes an interval data type , a symbolic form of automatic differentiation to obtain an internal representation for functions , a special technique to allow conditional branches with operator overloading and interval computations , and generic routines to give interval and noninterval function and derivative information . some of these generic routines use a special version of the backward mode of automatic differentiation . the package also includes dynamic data structures for exhaustive search algorithms .", "closure analysis in constraint form . flow analyses of untyped higher order functional programs have in the past decade been presented by ayers , bondorf , consel , jones , heintze , sestoft , shivers , <unk> , wand , and others . the analyses are usually defined as abstract interpretations and are used for rather different tasks such as type recovery , globalization , and binding time analysis . the analyses all contain a global closure analysis that computes information about higher order control flow . sestoft proved in <digit> and <digit> that closure analysis is correct with respect to call by name and call by value semantics , but it remained open if correctness holds for arbitrary beta reduction . this article answers the question both closure analysis and others are correct with respect to arbitrary beta reduction . we also prove a subject reduction result closure information is still valid after beta reduction . the core of our proof technique is to define closure analysis using a constraint system . the constraint system is equivalent to the closure analysis of bondorf , which in turn is based on sestoft ' s .", "effective cache prefetching on bus based multiprocessors . compiler directed cache prefetching has the potential to hide much of the high memory latency seen by current and future high performance processors . however , prefetching is not without costs , particularly on a shared memory multiprocessor . prefetching can negatively affect bus utilization , overall cache miss rates , memory latencies and data sharing . we simulate the effects of a compiler directed prefetching algorithm , running on a range of bus based multiprocessors . we show that , despite a high memory latency , this architecture does not necessarily support prefetching well , in some cases actually causing performance degradations . we pinpoint several problems with prefetching on a shared memory architecture ( additional conflict misses , no reduction in the data sharing traffic and associated latencies , a multiprocessor ' s greater sensitivity to memory utilization and the sensitivity of the cache hit rate to prefetch distance ) and measure their effect on performance . we then solve those problems through architectural techniques and heuristics for prefetching that could be easily incorporated into a compiler ( <digit> ) victim caching , which eliminates most of the cache conflict misses caused by prefetching in a direct mapped cache , ( <digit> ) special prefetch algorithms for shared data , which significantly improve the ability of our basic prefetching algorithm to prefetch individual misses , and ( <digit> ) compiler based shared data restructuring , which eliminates many of the invalidation misses the basic prefetching algorithm does not predict . the combined effect of these improvements is to make prefetching effective over a much wider range of memory architectures .", "combining analyses , combining optimizations . modern optimizing compilers use several passes over a program ' s intermediate representation to generate good code . many of these optimizations exhibit a phase ordering problem . getting the best code may require iterating optimizations until a fixed point is reached . combining these phases can lead to the discovery of more facts about the program , exposing more opportunities for optimization . this article presents a framework for describing optimizations . it shows how to combine two such frameworks and how to reason about the properties of the resulting framework . the structure of the frame work provides insight into when a combination yields better results . to make the ideas more concrete , this article presents a framework for combining constant propagation , value numbering , and unreachable code elimination . it is an open question as to what other frameworks can be combined in this way .", "conjoining specifications . we show how to specify components of concurrent systems . the specification of a system is the conjunction of its components ' specifications . properties of the system are proved by reasoning about its components . we consider both the decomposition of a given system into parts , and the composition of given parts to form a system .", "a complete calculus for the multialgebraic and functional semantics of nondeterminism . the current algebraic models for nondeterminism focus on the notion of possibility rather than necessity and consequently equate ( nondeterministic ) terms that one would intuitively not consider equal . furthermore , existing models for nondeterminism depart radically from the standard models for ( equational ) specifications of deterministic operators . one would prefer that a specification language for nondeterministic operators be based on an extension of the standard model concepts , preferably in such a way that the reasoning system for ( possibly nondeterministic ) operators becomes the standard equational one whenever restricted to the deterministic <unk> objective should be to minimize the departure from the standard frameworks . in this article we define a specification language for nondeterministic operators and multialgebraic semantics . the first complete reasoning system for such specifications is introduced . we also define a transformation of specifications of nondeterministic operators into derived specifications of deterministic ones , obtaining a computational semantics of nondeterministic specification by adopting the standard semantics of the derived specification as the semantics of the original one . this semantics turns out to be a refinement of multialgebra semantics . the calculus is shown to be sound and complete also with respect to the new semantics .", "matrix powers in finite precision arithmetic . if a is a square matrix with spectral radius less than <digit> then a k to <digit> as k to infty , but the powers computed in finite precision arithmetic may or may not converge . we derive a sufficient condition for fl ( a k ) to <digit> as k to infty and a bound on norm fl ( a k ) , both expressed in terms of the jordan canonical form of a . examples show that the results can be sharp . we show that the sufficient condition can be rephrased in terms of a pseudospectrum of a when a is diagonalizable , under certain assumptions . our analysis leads to the rule of thumb that convergence or divergence of the computed powers of a can be expected according as the spectral radius computed by any backward stable algorithm is less than or greater than <digit> .", "an experimental comparison of the nearest neighbor and nearest hyperrectangle algorithms . algorithms based on nested generalized exemplar ( nge ) theory ( salzberg , <digit> ) classify new data points by computing their distance to the nearest generalized exemplar ( i . e . , either a point or an axis parallel rectangle ) . they combine the distance based character of nearest neighbor ( nn ) classifiers with the axis parallel rectangle representation employed in many rule learning systems . an implementation of nge was compared to the k nearest neighbor ( knn ) algorithm in <digit> domains and found to be significantly inferior to knn in <digit> of them . several modifications of nge were studied to understand the cause of its poor performance . these show that its performance can be substantially improved by preventing nge from creating overlapping rectangles , while still allowing complete nesting of rectangles . performance can be further improved by modifying the distance metric to allow weights on each of the features ( salzberg , <digit> ) . best results were obtained in this study when the weights were computed using mutual information between the features and the output class . the best version of nge developed is a batch algorithm ( bnge <unk> ) that has no user tunable parameters . bnge <unk> ' s performance is comparable to the first nearest neighbor algorithm ( also incorporating feature weights ) . however , the k nearest neighbor algorithm is still significantly superior to bnge <unk> in <digit> of the <digit> domains , and inferior to it in only <digit> . we conclude that , even with our improvements , the nge approach is very sensitive to the shape of the decision boundaries in classification problems . in domains where the decision boundaries are axis parallel , the nge approach can produce excellent generalization with interpretable hypotheses . in all domains tested , nge algorithms require much less memory to store generalized exemplars than is required by nn algorithms .", "approximate analysis of reader writer queues . we analyze the performance of queues that serve readers and writers . readers are served concurrently , while writers require exclusive service . we approximately analyze a first come first serve ( fcfs ) reader writer queue , and derive simple formulae for computing waiting times and capacity under the assumption of poisson arrivals and exponential service . we extend the analysis to handle a one writer queue , and a queue that includes write intention locks . the simple analyses that we present can be used as rules of thumb for designing concurrent systems .", "evaluation of binarization methods for document images . <unk> paper presents an evaluation of eleven locally adaptive binarization methods for gray scale images with low contrast , variable background intensity and noise . <unk> method with the addition of the postprocessing step of yanowitz and <unk> method added performed the best and was also one of the fastest binarization methods .", "when is the assignment bound tight for the asymmetric traveling salesman problem . we consider the probabilistic relationship between the value of a random asymmetric traveling salesman problem atsp ( m ) and the value of its assignment relaxation ap ( m ) . we assume here that the costs are given by an n times n matrix m whose entries are independently and identically distributed . we focus on the relationship between pr ( atsp ( m ) ap ( m ) ) and the probability p n that any particular entry is zero . if np n rightarrow infty with n then we prove that atsp ( m ) ap ( m ) with probability <digit> o ( <digit> ) . this is shown to be best possible in the sense that if np ( n ) rightarrow c , c > <digit> and constant , then pr ( atsp ( m ) ap ( m ) ) < <digit> phi ( c ) for some positive function phi . finally , if np n rightarrow <digit> then pr ( atsp ( m ) ap ( m ) ) rightarrow <digit> .", "search problems in the decision tree model . the relative power of determinism , randomness , and nondeterminism for search problems in the boolean decision tree model is studied . it is shown that the gaps between the nondeterministic , the randomized , and the deterministic complexities can be arbitrarily large for search problems . an interesting connection of this model to the complexity of resolution proofs is also mentioned .", "a domain specific software architecture for adaptive intelligent systems . a good software architecture facilitates application system development , promotes achievement of functional requirements , and supports system reconfiguration . we present a domain specific software architecture ( dssa ) that we have developed for a large application domain of adaptive intelligent systems ( ais ' s ) . the dssa provides a ) an ais reference architecture designed to meet the functional requirements shared by applications in this domain , b ) principles for decomposing expertise into highly reusable components , and c ) an application configuration method for selecting relevant components from a library and automatically configuring instances of those components in an instance of the architecture . the ais reference architecture incorporates features of layered , pipe and filter , and blackboard style architectures . we describe three studies demonstrating the utility of our architecture in the subdomain of mobile office robots and identify software engineering principles embodied in the architecture .", "measured performance of data transmission over cellular telephone networks . recent developments in mobile communication and personal computer technology have laid a new foundation for mobile computing . performance of the data communication system as seen by an application program is a fundamental factor when communication infrastructure at the application layer is designed . this paper provides results of performance measurements of data transmission over two different cellular telephone networks , a digital gsm network and an analogue nmt network . since our emphasis is on performance as seen by application programs , we use the standard tcp ip protocols in the measurements . the performance is measured using three basic operations establishment of a wireless dial up connection , exchange of request reply messages , and bulk data transfer . the external conditions under which the measurements were carried out present a normal office environment when the field strength of the cellular link is good or fairly good .", "model uncertainty in discrete event systems . earlier work concerning control of discrete event systems usually assumed that a correct model of the system to be controlled was available . a goal of this work is to provide an algorithm for determining the correct model from a set of models . the result of the algorithm is a finite language that can be used to test for the correct model or notification that the remaining models can not be controllably distinguished . we use the finite state machine model with controllable and uncontrollable events presented by ramadge and wonham .", "analysis of costate discretizations in parameter estimation for linear evolution equations . a widely used approach to parameter identification is the output least squares formulation . numerical methods for solving the resulting minimization problem almost invariably require the computation of the gradient of the output least squares functional . when the identification problem involves time dependent distributed parameter systems ( or approximations thereof ) , numerical evaluation of the gradient can be extremely time consuming . the costate method can greatly reduce the cost of computing these gradients . however , questions have been raised concerning the accuracy and convergence of costate approximations , even when the numerical methods being used are known to converge rapidly on the forward problem . in this paper it is shown that the use of time marching schemes that yield high order accuracy on the forward problem does not necessarily lead to high order accurate costate approximations . in fact , in some cases these approximations do not converge at all . however , under certain circumstances , rapidly converging gradient approximations do result because of rapid weak star type convergence of the costate approximations . these issues are treated both theoretically and numerically .", "a globally convergent successive approximation method for severely nonsmooth equations . this paper presents a globally convergent successive approximation method for solving f ( x ) <digit> where f is a continuous function . at each step of the method , f is approximated by a smooth function f k , with pa f k f pa rightarrow <digit> as k rightarrow infty . the direction f ' k ( x k ) <digit> f ( x k ) is then used in a line search on a sum of squares objective . the approximate function f k can be constructed for nonsmooth equations arising from variational inequalities , maximal monotone operator problems , nonlinear complementarity problems , and nonsmooth partial differential equations . numerical examples are given to illustrate the method .", "tighter lower bounds on the exact complexity of string matching . this paper considers the exact number of character comparisons needed to find all occurrences of a pattern of length m in a text of length n using on line and general algorithms . for on line algorithms , a lower bound of about ( <digit> frac <digit> <digit> ( m <digit> ) ) cdot n character comparisons is obtained . for general algorithms , a lower bound of about ( <digit> frac <digit> m <digit> ) cdot n character comparisons is obtained . these lower bounds complement an on line upper bound of about ( <digit> frac <digit> <digit> ( m <digit> ) ) cdot n comparisons obtained recently by cole and hariharan . the lower bounds are obtained by finding patterns with interesting combinatorial properties . it is also shown that for some patterns off line algorithms can be more efficient than on line algorithms .", "planar strong connectivity helps in parallel depth first search . this paper proves that for a strongly connected planar directed graph of size n , a depth first search tree rooted at a specified vertex can be computed in o ( log <digit> n ) time with n log n processors . previously , for planar directed graphs that may not be strongly connected , the best depth first search algorithm runs in o ( log <digit> n ) time with n processors . both algorithms run on a parallel random access machine that allows concurrent reads and concurrent writes in its shared memory , and in case of a write conflict , permits an arbitrary processor to succeed .", "optimal file sharing in distributed networks . the following file distribution problem is considered given a network of processors represented by an undirected graph g ( v , e ) and a file size k , an arbitrary file w of k bits is to be distributed among all nodes of g . to this end , each node is assigned a memory device such that by accessing the memory of its own and of its adjacent nodes , the node can reconstruct the contents of w . the objective is to minimize the total size of memory in the network . this paper presents a file distribution scheme which realizes this objective for k gg log delta g , where delta g stands for the maximum degree in g for this range of k , the total memory size required by the suggested scheme approaches an integer programming lower bound on that size . the scheme is also constructive in the sense that given g and k , the memory size at each node in g , as well as the mapping of any file w into the node memory devices , can be computed in time complexity which is polynomial in k and v . furthermore , each node can reconstruct the contents of such a file w in o ( k <digit> ) bit operations . finally , it is shown that the requirement of k being much larger than log delta g is necessary in order to have total memory size close to the integer programming lower bound .", "the complexity and distribution of hard problems . measure theoretic aspects of the leq rm p rm m reducibility structure of the exponential time complexity classes e dtime ( <digit> rm linear ) and e <digit> rm dtime ( <digit> rm polynomial ) are investigated . particular attention is given to the complexity ( measured by the size of complexity cores ) and distribution ( abundance in the sense of measure ) of languages that are leq rm p rm m hard for e and other complexity classes . tight upper and lower bounds on the size of complexity cores of hard languages are derived . the upper bound says that the leq rm p rm m hard languages for e are unusually simple , in the sense that they have smaller complexity cores than most languages in e . it follows that the leq rm p rm m complete languages for e form a measure <digit> subset of e ( and similarly in e <digit> ) . this latter fact is seen to be a special case of a more general theorem , namely , that it every pmr degree ( e . g . , the degree of all pmr complete languages for np ) has measure <digit> in e and in ep .", "private computations over the integers . the subject of this work is the possibility of private distributed computations of n argument functions defined over the integers . a function f is t private if there exists a protocol for computing f , so that no coalition of at most t participants can infer any additional information from the execution of the protocol . it is known that over finite domains , every function can be computed left lfloor ( n <digit> ) <digit> right rfloor privately . some functions , like addition , are even n private . we prove that this result can not be extended to infinite domains . the possibility of privately computing f is shown to be closely related to the communication complexity of f . using this relation , we show , for example , that n argument addition is left lfloor ( n <digit> ) <digit> right rfloor private over the nonnegative integers , but not even <digit> private over all the integers . finally , a complete characterization of t private boolean functions over countable domains is given . a boolean function is <digit> private if and only if its communication complexity is bounded . this characterization enables us to prove that every boolean function falls into one of the following three categories it is either n private , left lfloor ( n <digit> ) <digit> right rfloor private but not left lceil n <digit> right rceil private , or not <digit> private .", "a new approach to formal language theory by kolmogorov complexity . we present a new approach to formal language theory using kolmogorov complexity . the main results presented here are an alternative for pumping lemma ( s ) , a new characterization for regular languages , and a new method to separate deterministic context free languages and nondeterministic context free languages . the use of the new incompressibility arguments is illustrated by many examples . the approach is also successful at the high end of the chomsky hierarchy since one can quantify <unk> in terms of kolmogorov complexity .", "eigenvalues and expansion of regular graphs . the spectral method is the best currently known technique to prove lower bounds on expansion . ramanujan graphs , which have asymptotically optimal second eigenvalue , are the best known explicit expanders . the spectral method yielded a lower bound of k <digit> on the expansion of linear sized subsets of k regular ramanujan graphs . we improve the lower bound on the expansion of ramanujan graphs to approximately k <digit> . moreover , we construct a family of k regular graphs with asymptotically optimal second eigenvalue and linear expansion equal to k <digit> . this shows that k <digit> is the best bound one can obtain using the second eigenvalue method . we also show an upper bound of roughly <digit> k <digit> on the average degree of linear sized induced subgraphs of ramanujan graphs . this compares positively with the classical bound 2k <digit> . as a byproduct , we obtain improved results on random walks on expanders and construct selection networks ( respectively , extrovert graphs ) of smaller size ( respectively , degree ) than was previously known .", "on the minimality and global consistency of row convex constraint networks . constraint networks have been shown to be useful in formulating such diverse problems as scene labeling , natural language parsing , and temporal reasoning . given a constraint network , we often wish to ( i ) find a solution that satisfies the constraints and ( ii ) find the corresponding minimal network where the constraints are as explicit as possible . both tasks are known to be np complete in the general case . task ( <digit> ) is usually solved using a backtracking algorithm , and task ( ii ) is often solved only approximately by enforcing various levels of local consistency . in this paper , we identify a property of binary constraint called row convexity and show its usefulness in deciding when a form of local consistency called path consistency is sufficient to guarantee that a network is both minimal and globally consistent . globally consistent networks have the property that a solution can be found without backtracking . we show that one can test for the row convexity property efficiently and we show , by examining applications of constraint networks discussed in the literature , that our results are useful in practice . thus , we identify a class of binary constraint networks for which we can solve both tasks ( i ) and ( ii ) efficiently . finally , we generalize the results for binary constraint networks to networks with nonbinary constraints .", "an optimal service policy for buffer systems . consider a switching component in a packet switching network , where messages from several incoming channels arrive and are routed to appropriate outgoing ports according to a service policy . one requirement in the design of such a system is to determine the buffer storage necessary at the input of each channel and the policy for serving these buffers that will prevent buffer overflow and the corresponding loss of messages . in this paper , a class of buffer service policies , called least time to reach bound ( <unk> ) , is introduced that guarantees no overflow , and for which the buffer size required at each input channel is independent of the number of channels and their relative speeds . further , the storage requirement is only twice the maximal length of a message in all cases , and as a consequence the class is shown to be optimal in the sense that any <unk> policy requires at least as much storage as <unk> .", "approximating the minimum equivalent digraph . the meg ( minimum equivalent graph ) problem is the following given a directed graph , find a smallest subset of the edges that maintains all reachability relations between nodes . this problem is np hard this paper gives an approximation algorithm achieving a performance guarantee of about <digit> . <digit> in polynomial time . the algorithm achieves a performance guarantee of <digit> . <digit> in the time required for transitive closure . the heart of the meg problem is the minimum scss ( strongly connected spanning subgraph ) problem the meg problem restricted to strongly connected digraphs . for the minimum scss problem , the paper gives a practical , nearly linear time implementation achieving a performance guarantee of <digit> . <digit> . the algorithm and its analysis are based on the simple idea of contracting long cycles . the analysis applies directly to <digit> exchange , a general local improvement algorithm , showing that its performance guarantee is <digit> . <digit> .", "stability of linear equations solvers in interior point methods . primal dual interior point methods for linear complementarity and linear programming problems solve a linear system of equations to obtain a modified newton step at each iteration . these linear systems become increasingly ill conditioned in the later stages of the algorithm , but the computed steps are often sufficiently accurate to be useful . we use error analysis techniques tailored to the special structure of these linear systems to explain this observation and examine how theoretically superlinear convergence of a path following algorithm is affected by the roundoff errors .", "polynomial time membership comparable sets . this paper studies a notion called polynomial time membership comparable sets . for a function g , a set a is polynomial time g membership comparable if there is a polynomial time computable function f such that for any x <digit> , cdots , x m with m geq g ( max x <digit> , cdots , x m ) , outputs b in <digit> , <digit> m such that ( a ( x <digit> ) , cdots , a ( x m ) ) neq b . the following is a list of major results proven in the paper . <digit> . polynomial time membership comparable sets construct a proper hierarchy according to the bound on the number of arguments . <digit> . polynomial time membership comparable sets have polynomial size circuits . <digit> . for any function f and for any constant c > <digit> , if a set is leq p f ( n ) tt reducible to a p selective set , then the set is polynomial time ( <digit> c ) log f ( n ) membership comparable . <digit> . for any cal c chosen from rm pspace , up , fewp , np , c p , pp , mod <digit> p , mod <digit> , cdots , if cal c subseteq rm p mc ( c log n ) for some c < <digit> , then cal as a corollary of the last two results , it is shown that if there is some constant c < <digit> such that all of cal c are polynomial time n c truth table reducible to some p selective sets , then cal which resolves a question that has been left open for a long time .", "a case study in simulating pcs networks using time warp . there has been rapid growth in the demand for mobile communications over the past few years . this has led to intensive research and development efforts for complex pcs ( personal communication service ) networks . capacity planning and performance modeling is necessary to maintain a high quality of service to the mobile subscriber while minimizing cost to the pcs provider . the need for flexible analysis tools and the high computational requirements of large pcs network simulations make it an excellent candidate for parallel simulation . here , we describe our experiences in developing two pcs simulation models on a general purpose distributed simulation platform based on the time warp mechanism . these models utilize two widely used approaches to simulating pcs networks ( i ) the call initiated and ( ii ) the portable initiated models . we discuss design decisions that were made in mapping these models to the time warp executive , and characterize the workloads resulting from these models in terms of factors such as communication locality and computation granularity . we then present performance measurements for their execution on a network of workstations . these measurements indicate that the call initiated model generally outperforms the portable initiated model , but is not able to capture phenomenon such as the busy line effect . moreover , these studies indicate that the high locality in large scale pcs network simulations make them well suited for execution on general purpose parallel and distributed simulation platforms .", "probabilistic adaptive direct optimism control in time warp . in a distributed memory environment the communication overhead of time warp as induced by the rollback procedure due to overoptimistic progression of the simulation is the dominating performance factor . to limit optimism to an extent that can be justified from the inherent model parallelism , an optimism control mechanism is proposed , which by maintaining a history record of virtual time differences from the time stamps carried by arriving messages , and forecasting the timestamps of forthcoming messages , probabilistically delays the execution of scheduled events to avoid potential rollback and associated communication overhead ( antimessages ) . after investigating statistical forecast methods which express only the central tendency of the arrival process , we demonstrate that arrival processes in the context of time warp simulations of timed petri nets have certain predictable and consistent arima characteristics , which encourage the use of sophisticated and recursive forecast procedures based on those models . adaptiveness is achieved in two respects the synchronization behavior of logical processes automatically progressing and conservatively blocking , that is the most adequate for ( i ) the specific simulation model and ( ii ) the communication computation speed characteristics of the underlying execution platform .", "super criticality revisited . critical path analysis has been suggested as a technique for establishing a lower bound on the completion times of parallel discrete event simulations . a protocol is super critical if there is at least one simulation that can complete in less than the critical path time using that protocol . previous studies have shown that several practical protocols are super critical while others are not . we present a sufficient condition to demonstrate that a protocol is super criticality . it has been claimed that super criticality requires independence of one or more messages ( states ) on events in the logical past of those messages ( states ) . we present an example which contradicts this claim and examine the implications of this contradiction on lower bounds .", "buffer management in shared memory time warp systems . mechanisms for managing message buffers in time warp parallel simulations executing on cache coherent shared memory multiprocessors are studied . two simple buffer management strategies called the sender pool and receiver pool mechanisms are examined with respect to their efficiency , and in particular , their interaction with multiprocessor cache coherence protocols . measurements of implementations on a kendall square research ksr <digit> machine using both synthetic workloads and benchmark applications demonstrate that sender pools offer significant performance advantages over receiver pools . however , it is also observed that both schemes , especially the sender pool mechanism , are prone to severe performance degradations due to poor locality of reference in large simulations using substantial amounts of message buffer memory . a third strategy called the partitioned buffer pool approach is proposed that exploits the advantages of sender pools , but exhibits much better locality . measurements of this approach indicate that the partitioned pool mechanism yields substantially better performance than both the sender and receiver pool schemes for large scale , small granularity parallel simulation applications . the central conclusions from this study are ( <digit> ) buffer management strategies play an important role in determining the overall efficiency of multiprocessor based parallel simulators , and ( <digit> ) the partitioned buffer pool organization offers significantly better performance than the sender and receiver pool schemes . these studies demonstrate that poor performance may result if proper attention is not paid to realizing an efficient buffer management mechanism .", "language constructs and transformation for hard real time systems . in practice , time critical portions of hard real time systems are still implemented in low level programming languages and manually tuned to meet all the timing requirements . without a real time language that supports an appropriate way of specifying timing constraints for a generic hard real time systems , and high precision timing analysis that is transparent to users , the users will ever suffer from the complex coding and analysis , particularly for systems requiring fast turnaround responses . in this paper , we propose novel language constructs that can be added to any imperative programming language so that the extended language provides users a way to specify relative timing constraints between arbitrary operations at instruction level . the compilation techniques unique to transformation of the proposed language are also presented as a part of charts , the compiler for hard real time systems , which generates a valid instruction sequence for a target execution model .", "visualizing real time multivariate data using preattentive processing . a new method is presented for visualizing data as they are generated from real time applications . these techniques allow viewers to perform simple data analysis tasks such as detection of data groups and boundaries , target detection , and estimation . the goal is to do this rapidly and accurately on a dynamic sequence of data frames . our techniques take advantage of an ability of the human visual system called preattentive processing . preattentive processing refers to an initial organization of the visual system based on operations believed to be rapid , automatic , and spatially parallel . examples of visual features that can be detected in this way include hue , orientation , intensity , size , curvature , and line length . we believe that studies from preattentive processing should be used to assist in the design of visualization tools , especially those for which high speed target , boundary , and region detection are important . previous work has shown that results from research in preattentive processing can be used to build visualization tools that allow rapid and accurate analysis of individual , static data frames . we extend these techniques to a dynamic real time environment . this allows users to perform similar tasks on dynamic sequences of frames , exactly like those generated by real time systems such as visual interactive simulation . we studied two known preattentive features , hue and curvature . the primary question investigated was whether rapid and accurate target and boundary detection in dynamic sequences is possible using these features . behavioral experiments were run that simulated displays from our preattentive visualization tools . analysis of the results of the experiments showed that rapid and accurate target and boundary detection is possible with both hue and curvature . a second question , whether interactions occur between the two features in a real time environment , was answered positively .", "production and playback of human figure motion for visual simulation . we describe a system for off line production and real time playback of motion for articulated human figures in 3d virtual environments . the key notion are ( <digit> ) the logical storage of full body motion in posture graphs , which provides a simple motion access method for playback , and ( <digit> ) mapping the motions of high dof figures to lower dof figures using slaving to provide human models at several levels of detail , both in geometry and articulation , for later playback . we present our system in the context of a simple problem animating human figures in a distributed simulation , using dis protocols for communicating the human state information . we also discuss several related techniques for real time animation of articulated figures in visual simulation .", "active camera calibration for a head eye platform using the variable state dimension filter . <unk> correspondence presents a new technique for calibrating a camera mounted on a controllable head eye platform . it uses the trajectories of an arbitrary number of tracked corner features to improve the calibration parameter estimates over time , utilizing a novel variable state dimension form of recursive filter . no special visual stimuli are required and no assumptions are made about the structure of the scene , other than that it is stationary relative to the head . the algorithm runs at <digit> frames per second on a single inmos t805 transputer , and is fully integrated into a real time active vision system . updated calibration parameters are regularly passed to the vision modules that require them . although the algorithm requires an initial estimate of camera focal length , results are presented from real experiments demonstrating that convergence is achieved for initial errors up to <digit> % .", "scale space properties of the multiscale morphological dilation erosion . abstracta multiscale morphological dilation erosion smoothing operation and its associated scale space expansion for multidimensional signals are proposed . properties of this smoothing operation are developed and , in particular a scale space monotonic property for signal extrema is demonstrated . scale space fingerprints from this approach have advantages over gaussian scale space fingerprints in that they are defined for negative values of the scale parameter have monotonic properties in two and higher dimensions , do not cause features to be shifted by the smoothing , and allow efficient computation . the application of reduced multiscale dilation erosion fingerprints to the surface matching of terrain is demonstrated .", "genetic algorithms , operators , and dna fragment assembly . we study different genetic algorithm operators for one permutation problem associated with the human genome <unk> assembly of dna sequence fragments from a parent clone whose sequence is unknown into a consensus sequence corresponding to the parent sequence . the sorted order representation , which does not require specialized operators , is compared with a more traditional permutation representation , which does require specialized operators . the two representations and their associated operators are compared on problems ranging from 2k to 34k base pairs ( kb ) . edge recombination crossover used in conjunction with several specialized operators is found to perform best in these experiments semi these operators solved a 10kb sequence , consisting of <digit> fragments , with no manual intervention . natural building blocks in the problem are exploited at progressively higher levels through macro operators . this significantly improves performance .", "unsupervised learning of multiple motifs in biopolymers using expectation maximization . the meme algorithm extends the expectation maximization ( em ) algorithm for identifying motifs in unaligned biopolymer sequences . the aim of meme is to discover new motifs in a set of biopolymer sequences where little or nothing is known in advance about any motifs that may be present . meme innovations expand the range of problems which can be solved using em and increase the chance of finding good solutions . first , subsequences which actually occur in the biopolymer sequences are used as starting points for the em algorithm to increase the probability of finding globally optimal motifs . second , the assumption that each sequence contains exactly one occurrence of the shared motif is removed . this allows multiple appearances of a motif to occur in any sequence and permits the algorithm to ignore sequences with no appearance of the shared motif , increasing its resistance to noisy data . third , a method for probabilistically erasing shared motifs after they are found is incorporated so that several distinct motifs can be found in the same set of sequences , both when different motifs appear in different sequences and when a single sequence may contain multiple motifs . experiments show that meme can discover both the crp and lexa binding sites from a set of sequences which contain one or both sites , and that meme can discover both the <digit> and <digit> promoter regions in a set of e . coli sequences .", "evaluation and selection of biases in machine learning . in this introduction , we define the term bias as it is used in machine learning systems . we motivate the importance of automated methods for evaluating and selecting biases using a framework of bias selection as search in bias and meta bias spaces . recent research in the field of machine learning bias is summarized .", "processor mapping techniques toward efficient data redistribution . <unk> time data redistribution can enhance algorithm performance in distributed memory machines . explicit redistribution of data can be performed between algorithm phases when a different data decomposition is expected to deliver increased performance for a subsequent phase of computation . redistribution , however , represents increased program overhead as algorithm computation is discontinued while data are exchanged among processor memories . in this paper , we present a technique that minimizes the amount of data exchange for block to cyclic ( c ) ( or vice versa ) redistributions of arbitrary number of dimensions . preserving the semantics of the target ( destination ) distribution pattern , the technique manipulates the data to logical processor mapping of the target pattern . when implemented on an ibm sp , the mapping technique demonstrates redistribution performance improvements of approximately <digit> % over traditional data to processor mapping . relative to the traditional mapping technique , the proposed method affords greater flexibility in specifying precisely which data elements are redistributed and which elements remain on processor .", "a comparison of id3 and backpropagation for english text to speech mapping . the performance of the error backpropagation ( bp ) and id3 learning algorithms was compared on the task of mapping english text to phonemes and stresses . under the distributed output code developed by sejnowski and rosenberg , it is shown that bp consistently out performs id3 on this task by several percentage points . three hypotheses explaining this difference were explored ( a ) id3 is overfitting the training data , ( b ) bp is able to share hidden units across several output units and hence can learn the output units better , and ( c ) bp captures statistical information that id3 does not . we conclude that only hypothesis ( c ) is correct . by augmenting id3 with a simple statistical learning procedure , the performance of bp can be closely matched . more complex statistical procedures can improve the performance of both bp and id3 substantially in this domain .", "weakly hard problems . a weak completeness phenomenon is investigated in the complexity class rm e rm dtime ( <digit> rm linear ) . according to standard terminology , a language h is leq rm p m hard for e if the set rm p m ( h ) , consisting of all languages a leq rm p m h , contains the entire class e . a language c is leq rm p m complete for e if it is leq rm p m hard for e and is also an element of e . generalizing this , a language h is weakly leq rm p m hard for e if the set rm p m ( h ) does not have measure <digit> in e . a language c is weakly leq rm p m complete for e if it is weakly leq rm p m hard for e and is also an element of e . the main result of this paper is the construction of a language that is weakly leq rm p m complete , but not leq rm p m complete , for e . the existence of such languages implies that previously known strong lower bounds on the complexity of weakly leq rm p m hard problems for e ( given by work of lutz , mayordomo , and juedes ) are indeed more general than the corresponding bounds for leq rm p m hard problems for e . the proof of this result introduces a new diagonalization method , called martingale diagonalization . using this method , one simultaneously develops an infinite family of polynomial time computable martingales ( betting strategies ) and a corresponding family of languages that defeat these martingales ( prevent them from winning too much money ) while also pursuing another agenda . martingale diagonalization may be useful for a variety of applications .", "adaptive pattern matching . pattern matching is an important operation used in many applications such as functional programming , rewriting , and rule based expert systems . by preprocessing the patterns into a dfa like automaton , we can rapidly select the matching pattern ( s ) in a single scan of the relevant portions of the input term . this automaton is typically based on left to right traversal of the patterns . by adapting the traversal order to suit the set of input patterns , it is possible to considerably reduce the space and matching time requirements of the automaton . the design of such adaptive automata is the focus of this paper . we first formalize the notion of an adaptive traversal . we then present several strategies for synthesizing adaptive traversal orders aimed at reducing space and matching time complexity . in the worst case , however , the space requirements can be exponential in the size of the patterns . we show this by establishing an exponential lower bounds on space that is independent of the traversal order used . we then discuss an orthogonal approach to space minimization based on direct construction of optimal dag automata . finally , our work brings forth the impact of typing in pattern matching . in particular , we show that several important problems ( e . g . , lazy pattern matching in ml ) are computationally hard in the presence of type disciplines , whereas they can be solved efficiently in the untyped setting .", "finding regular simple paths in graph databases . we consider the following problem given a labelled directed graph g and a regular expression r , find all pairs of nodes connected by a simple path such that the concatenation of the labels along the path satisfies r . the problem is motivated by the observation that many recursive queries in relational databases can be expressed in this form , and by the implementation of a query language , bf g , based on this observation . we show that the problem is in general intractable , but present an algorithm than runs in polynomial time in the size of the graph when the regular expression and the graph are free of conflicts . we also present a class of languages whose expressions can always be evaluated in time polynomial in the size of both the graph and the expression , and characterize syntactically the expressions for such languages .", "efficient algorithms for atmospheric correction of remotely sensed data . remotely sensed imagery has been used for developing and validating various studies regarding land cover dynamics . however , the large amounts of imagery collected by the satellites are largely contaminated by the effects of atmospheric particles . the objective of atmospheric correction is to retrieve the surface reflectance from remotely sensed imagery by removing the atmospheric effects . we introduce a number of computational techniques that lead to a substantial speedup of an atmospheric correction algorithm based on using look up tables . excluding i o time , the previous known implementation processes one pixel at a time and requires about <digit> . <digit> seconds per pixel on a sparc <digit> machine , while our implementation is based on processing the whole image and takes about <digit> <digit> microseconds per pixel on the same machine . we also develop a parallel version of our algorithm that is scalable in terms of both computation and i o . experimental results obtained show that a thematic mapper ( tm ) image ( <digit> mb per band , <digit> bands need to be corrected ) can be handled in less than <digit> . <digit> minutes on a <digit> node cm <digit> machine , including i o time .", "towards modeling the performance of a fast connected components algorithm on parallel machines . we present and analyze a portable , high performance algorithm for finding connected components on modern distributed memory multiprocessors . the algorithm is a hybrid of the classic dfs on the subgraph local to each processor and a variant of the shiloach vishkin pram algorithm on the global collection of subgraphs . we implement the algorithm in split c and measure performance on the the cray t3d , the meiko cs <digit> , and the thinking machines cm <digit> using a class of graphs derived from cluster dynamics methods in computational physics . on a <digit> processor cray t3d , the implementation outperforms all previous solutions by an order of magnitude . a characterization of graph parameters allows us to select graphs that highlight key performance features . we study the effects of these parameters and machine characteristics on the balance of time between the local and global phases of the algorithm and find that edge density , surface to volume ratio , and relative communication cost dominate performance . by understanding the effect of machine characteristics on performance , the study sheds light on the impact of improvements in computational and or communication performance on this challenging problem .", "message passing versus distributed shared memory on networks of workstations . the message passing programs are executed with the parallel virtual machine ( pvm ) library and the shared memory programs are executed using treadmarks . the programs are water and barnes hut from the splash benchmark suite <digit> d fft , integer sort ( is ) and embarrassingly parallel ( ep ) from the nas benchmarks ilink , a widely used genetic linkage analysis program and successive over relaxation ( sor ) , traveling salesman ( tsp ) , and quicksort ( qsort ) . two different input data sets were used for water ( water <digit> and water <digit> ) , is ( is small and is large ) , and sor ( sor zero and sor nonzero ) . our execution environment is a set of eight hp735 workstations connected by a 100mbits per second fddi network . for water <digit> , ep , ilink , sor zero , and sor nonzero , the performance of treadmarks is within <digit> % of pvm . for is small , water <digit> , barnes hut , <digit> d fft , tsp , and qsort , differences are on the order of <digit> % to <digit> % . finally , for is large , pvm performs two times better than treadmarks . more messages and more data are sent in treadmarks , explaining the performance differences . this extra communication is caused by <digit> ) the separation of synchronization and data transfer , <digit> ) extra messages to request updates for data by the invalidate protocol used in treadmarks , accumulation for migratory data in treadmarks .", "distributing a chemical process optimization application over a gigabit network . we evaluate the impact of a gigabit network on the implementation of a distributed chemical process optimization application . the optimization problem is formulated as a stochastic linear assignment problem and was solved using the thinking machines cm <digit> ( simd ) and the cray c <digit> ( vector ) computers at psc , and the intel iwarp ( mimd ) system at cmu , connected by the gigabit nectar testbed . we report our experience distributing the application across this heterogeneous set of systems and present measurements that show how the communication requirements of the application depend on the structure of the application . we use detailed traces to build an application performance model that can be used to estimate the elapsed time of the application for different computer system and network combinations . our results show that the application benefits from the high speed network , and that the need for high network throughput is increasing as computer systems get faster . we also observed that supporting high burst rates is critical , although structuring the application so that communication is overlapped with computation relaxes the bandwidth requirements .", "detecting coarse grain parallelism using an interprocedural parallelizing compiler . this paper presents an extensive empirical evaluation of an interprocedural parallelizing compiler , developed as part of the stanford suif compiler system . the system incorporates a comprehensive and integrated collection of analyses , including privatization and reduction recognition for both array and scalar variables , and symbolic analysis of array subscripts . the interprocedural analysis framework is designed to provide analysis results nearly as precise as full inlining but without its associated costs . experimentation with this system shows that it is capable of detecting coarser granularity of parallelism than previously possible . specifically , it can parallelize loops that span numerous procedures and hundreds of lines of codes , frequently requiring modifications to array data structures such as privatization and reduction transformations . measurements from several standard benchmark suites demonstrate that an integrated combination of interprocedural analyses can substantially advance the capability of automatic parallelization technology .", "relative debugging and its application to the development of large numerical models . because large scientific codes are rarely static objects , developers are often faced with the tedious task of accounting for discrepancies between new and old versions . in this paper , we describe a new technique called relative debugging that addresses this problem by automating the process of comparing a modified code against a correct reference code . we examine the utility of the relative debugging technique by applying a relative debugger called guard to a range of debugging problems in a large atmospheric circulation model . our experience confirms the effectiveness of the approach . using guard , we are able to validate a new sequential version of the atmospheric model , and to identify the source of a significant discrepancy in a parallel version in a short period of time .", "lazy release consistency for hardware coherent multiprocessors . release consistency is a widely accepted memory model for distributed shared memory systems . eager release consistency represents the state of the art in release consistent protocols for hardware coherent multiprocessors , while lazy release consistency has been shown to provide better performance for software distributed shared memory ( dsm ) . several of the optimizations performed by lazy protocols have the potential to improve the performance of hardware coherent multiprocessors as well , but their complexity has precluded a hardware implementation . with the advent of programmable protocol processors it may become possible to use them after all . we present and evaluate a lazy release consistent protocol suitable for machines with dedicated protocol processors . this protocol admits multiple concurrent writers , sends write notices concurrently with computation , and delays invalidations until acquire operations . we also consider a lazier protocol that delays sending write notices until release operations . our results indicate that the first protocol outperforms eager release consistency by as much as <digit> % across a variety of applications . the lazier protocol , on the other hand , is unable to recoup its high synchronization overhead . this represents a qualitative shift from the dsm world , where lazier protocols always yield performance improvements . based on our results , we conclude that machines with flexible hardware support for coherence should use protocols based on lazy release consistency , but in a less ' ' aggressively lazy ' ' form than is appropriate for dsm .", "an hpf compiler for the ibm sp2 . we describe phpf , an research prototype hpf compiler for the ibm sp series parallel machines . the compiler accepts as input fortran <digit> and fortran <digit> programs , augmented with hpf directives sequential loops are automatically parallelized . the compiler supports symbolic analysis of expressions . this allows parameters such as the number of processors to be unknown at compile time without significantly affecting performance . communication schedules and computation guards are generated in a parameterized form at compile time . several novel optimizations and improved versions of well known optimizations have been implemented in phpf to exploit parallelism and reduce communication costs . these optimizations include elimination of redundant communication using data availability analysis using collective communication new techniques for mapping scalar variables coarse grain wavefronting and communication reduction in multi dimensional shift communications . we present experimental results for some well known benchmark routines . the results show the effectiveness of the compiler in generating efficient code for hpf programs .", "the synergetic effect of compiler , architecture , and manual optimizations on the performance of cfd on multiprocessors . this paper discusses the comprehensive performance profiling , improvement and benchmarking of a computational fluid dynamics code , one of the grand challenge applications , on three popular multiprocessors . in the process of analyzing performance we considered language , compiler , architecture , and algorithmic changes and quantified each of them and their incremental contribution to bottom line performance . we demonstrate that parallelization alone can not result in significant gains if the granularity of parallel threads and the effect of parallelization on data locality are not taken into account . unlike benchmarking studies that often focus on the performance or effectiveness of parallelizing compilers on specific loop kernels , we used the entire cfd code to measure the global effectiveness of compilers and parallel architectures . we probed the performance bottlenecks in each case and derived solutions which eliminate or neutralize the performance inhibiting factors . the major conclusion of our work is that overall performance is extremely sensitive to the synergetic effects of compiler optimizations , algorithmic and code tuning , and architectural idiosyncrasies .", "the chinook hardware software co synthesis system . abstract designers of embedded systems are facing ever tighter constraints on design time , but computer aided design tools for embedded systems have not kept pace with these trends . the chinook co synthesis system addresses the automation of the most time consuming and error prone tasks in embedded controller design , namely the synthesis of interface hardware and software needed to integrate system components , the migration of functions between processors or custom logic , and the co simulation of the design before , during and after synthesis . this paper describes the principal elements of chinook and discuss its application to a variety of embedded designs .", "optimal register assignment to loops for embedded code generation . abstract one of the challenging tasks in code generation for embedded systems is register assignment . when more live variables than registers exist , some variables are necessarily accessed from data memory . because loops are typically executed many times and are often time critical , good register assignment in loops is exceedingly important , since accessing data memory can degrade performance . the issue of finding an optimal register assignment to loops , one which minimizes the number of spills between registers and memory , has been open for some time . in this paper , we address this issue and present an optimal , but exponential , algorithm which assigns registers to loop bodies such that the resulting spill code is minimal . we also show that a heuristic modification performs as well as the exponential approach on typical loops from scientific code .", "real time multi tasking in software synthesis for information processing systems . abstract software synthesis is a new approach which focuses on the support of embedded systems without the use of operating systems . compared to traditional design practices , a better utilization of the available time and hardware resources can be achieved , because the static information provided by the system specification is fully exploited and an application specific solution is automatically generated . on going research on a software synthesis approach for real time information processing systems is presented which starts from a concurrent process system specification and tries to automate the mapping of this description to a single processor . an internal representation model which is well suited for the support of concurrency and timing constraints is proposed , together with flexible execution models for multi tasking with real time constraints . the method is illustrated on a personal terminal receiver demodulator for mobile satellite communication .", "controlling application grain size on a network of workstations . an important challenge in the area of distributed computing is to automate the selection of the parameters that control the distributed computation . a performance critical parameter is the grain size of the computation , i . e . , the interval between successive synchronization points in the application . this parameter is hard to select since it depends both on compile time ( loop structure and data dependences , computational complexity ) and run time components ( speed of compute nodes and network ) . on networks of workstations that are shared with other users , the run time parameters can change over time . as a result , it is also necessary to consider the interactions with dynamic load balancing , which is needed to achieve good performance in this environment . in this paper we present a method for automatically selecting the grain size of the computation consisting of nested do loops . the method is based on close cooperation between the compiler and the runtime system . we evaluate the method using both simulation and measurements for an implementation on the nectar multicomputer .", "time constrained code compaction for dsps . abstract dsp algorithms are , in most cases , subject to hard real time constraints . in the case of programmable dsps , meeting those constraints must be ensured by appropriate code generation techniques . for processors offering instruction level parallelism , the task of code generation includes code compaction . the exact timing behavior of a dsp program is only known after compaction . therefore , real time constraints should be taken into account during the compaction phase . while most known dsp code generators rely on rigid heuristics for that phase , this paper proposes a novel approach to local code compaction based on an integer programming model , which obeys exact timing constraints . due to a general problem formulation , the model also obeys encoding restrictions and possible side effects .", "synthesis of pipelined dsp accelerators with dynamic scheduling . abstract to construct complete systems on silicon , application specific dsp accelerators are needed to speed up the execution of high throughput dsp algorithms . in this paper , a methodology is presented to synthesize high throughput dsp functions into accelerator processors containing a datapath of highly pipelined , bit parallel hardware units . emphasis is put on the definition of a controller architecture that allows efficient run time schedules of these dsp algorithms on such highly pipelined data paths . the methodology is illustrated by means of an fft butterfly accelerator block .", "an exact methodology for scheduling in a 3d design space . abstract this paper describes an exact solution methodology , implemented in rensselaer ' s voyager design space exploration system , for solving the scheduling problem in a <digit> dimensional ( 3d ) design space the usual 2d design space ( which trades off area and schedule length ) , plus a third dimension representing clock length . unlike design space exploration methodologies which rely on bounds or estimates , this methodology is guaranteed to find the globally optimal solution to the 3d scheduling problem . furthermore , this methodology efficiently prunes the search space , eliminating provably inferior design points through a careful selection of candidate clock lengths and tight bounds on the number of functional units of each type or on the schedule length .", "power analysis and low power scheduling techniques for embedded dsp software . abstract this paper describes the application of a measurement based power analysis technique for an embedded dsp processor . an instruction level power model for the processor has been developed using this technique . significant points of difference have been observed between this model and the ones developed earlier for some general purpose commercial microprocessors . in particular , the effect of circuit state on the power cost of an instruction stream is more marked in the case of this dsp processor . in addition , the dsp processor has a special architectural feature that allows instructions to be packed into pairs . the energy reduction possible through the use of this feature is studied . the on chip booth multiplier on the processor is a major source of energy consumption for dsp programs . a micro architectural power model for the multiplier is developed and analyzed for further energy minimization . a scheduling algorithm incorporating these new techniques is proposed to reduce the energy consumed by dsp software . energy reductions varying from <digit> % to <digit> % have been observed for several example programs . these energy savings are real and have been verified through physical measurement .", "bounded skew clock and steiner routing under elmore delay . we study the minimum cost bounded skew routing tree problem under the elmore delay model . we present two approaches to construct bounded skew routing trees ( i ) the boundary merging and embedding ( bme ) method which utilizes merging points that are restricted to the boundaries of merging regions , and ( ii ) the interior merging and embedding ( ime ) algorithm which employs a sampling strategy and dynamic programming to consider merging points that are interior to , rather than on the boundary of , the merging regions . our new algorithms allow accurate control of elmore delay skew , and show the utility of merging points inside merging regions .", "optimal wire sizing and buffer insertion for low power and a generalized delay model . we present efficient , optimal algorithms for timing optimization by discrete wire sizing and buffer insertion . our algorithms are able to minimize dynamic power dissipation subject to given timing constraints . in addition , we compute the complete power delay tradeoff curve for added flexibility . we extend our algorithm to take into account the effect of signal slew on buffer delay which can contribute substantially to overall delay . the effectiveness of these methods is demonstrated experimentally .", "hybrid decision diagrams . abstract functions that map boolean vectors into the integers are important for the design and verification of arithmetic circuits . mtbdds and bmds have been proposed for representing this class of functions . we discuss the relationship between these methods and describe a generalization called hybrid decision diagrams which is often much more concise . we show how to implement arithmetic operations efficiently for hybrid decision diagrams . in practice , this is one of the main limitations of bmds since performing arithmetic operations on functions expressed in this notation can be very expensive . in order to extend symbolic model checking algorithms to handle arithmetic properties , it is essential to be able to compute the bdd for the set of variable assignments that satisfy an arithmetic relation . in our paper , we give an efficient algorithm for this purpose . moreover , we prove that for the class of linear expressions , the time complexity of our algorithm is linear in the number of variables .", "synthesizing petri nets from state based models . this paper presents a method to synthesize labeled petri nets from state based models . although state based models ( such as finite state machines ) are a powerful formalism to describe the behavior of sequential systems , they can not explicitly express the notions of concurrency , causality and conflict . petri nets can naturally capture these notions . the proposed method in based on deriving an elementary transition system ( ets ) from a specification model . previous work has shown that for any ets there exists a petri net with minimum transition count ( one transition for each label ) with a reachability graph isomorphic to the original ets . this paper presents the first known approach to obtain an ets from a non elementary ts and derive a place irredundant petri net . furthermore , by imposing constraints on the synthesis method , different classes of petri nets can be derived from the same reachability graph ( pure , free choice , unique choice ) . this method has been implemented and efficiently applied in different frameworks petri net composition , synthesis of petri nets from asynchronous circuits , and resynthesis of petri nets .", "design verification via simulation and automatic test pattern generation . we present a simulation based method for combinational design verification that aims at complete coverage of specified design errors using conventional atpg tools . the error models used in prior research are examined and reduced to four types gate substitution errors ( gses ) , gate count errors ( gces ) , input count errors ( ices ) , and wrong input errors ( wies ) . conditions are derived for a gate to be completely testable for gses these conditions lead to small test sets for gses . near minimal test sets are also derived for gces . we analyze redundancy in design errors and relate this to single stuck line ( ssl ) redundancy . we show how to map all the foregoing error types into ssl faults , and describe an extensive set of experiments to evaluate the proposed method . our experiments demonstrate that high coverage of the modeled design errors can be achieved with small test sets .", "diagnosis of realistic bridging faults with single stuck at information . abstract precise failure analysis requires accurate fault diagnosis . a previously proposed method for diagnosing bridging faults using single stuck at dictionaries was applied only to small circuits , produced large and imprecise diagnoses , and did not take into account the byzantine generals problem for bridging faults . we analyze the original technique and improve it by introducing the concepts of match restriction , match requirement , and failure recovery . our new technique , which requires no information other than that used by standard stuck at methods , produces diagnoses that are an order of magnitude smaller than those produced by the original technique and produces many fewer misleading diagnoses than that of traditional stuck at diagnosis .", "instruction selection using binate covering for code size optimization . we address the problem of instruction selection in code generation for embedded dsp microprocessors . such processors have highly irregular data paths , and conventional code generation methods typically result in inefficient code . instruction selection can be formulated as directed acyclic graph ( dag ) covering . conventional methods for instruction selection use heuristics that break up the dag into a forest of trees and then cover them independently . this breakup can result in suboptimal solutions for the original dag . alternatively , the dag covering problem can be formulated as a binate covering problem , and solved exactly or heuristically using branch and bound methods . we show that optimal instruction selection on a dag in the case of accumulator based architectures requires a partial scheduling of nodes in the dag , and we augment the binate covering formulation to minimize spills and reloads . we show how the irregular data transfer costs of typical dsp data paths can be modeled in the binate covering formulation .", "optimal wiresizing for interconnects with multiple sources . the optimal wiresizing problem for nets with multiple sources is studied under the distributed elmore delay model . we decompose such a net into a source subtree ( sst ) and a set of loading subtrees ( lsts ) , and show the optimal wiresizing solution satisfies a number of interesting properties , including the lst separability , the lst monotone property , the sst local monotone property and the general dominance property . furthermore , we study the optimal wiresizing problem using a variable grid and reveal the bundled refinement property . these properties lead to efficient algorithms to compute the lower and upper bounds of the optimal solutions . experiment results on nets from an intel processor layout show an interconnect delay reduction of up to <digit> . <digit> % when compared to the minimum width solution . in addition , the algorithm based on a variable grid yields a speedup of two orders of magnitude without loss of accuracy , when compared with the fixed grid based methods .", "an iterative improvement algorithm for low power data path synthesis . we address the problem of minimizing power consumption in behavioral synthesis of data dominated circuits . the complex nature of power as a cost function implies that the effects of several behavioral synthesis tasks like module selection , clock selection , scheduling , and resource sharing on supply voltage and switched capacitance need to be considered simultaneously to fully derive the benefits of design space exploration at the behavior level . recent work has established the importance of behavioral synthesis in low power vlsi design . however , most of the algorithms that have been proposed separate these tasks and perform them sequentially , and are hence not able to explore the tradeoffs possible due to their interaction . we present an efficient algorithm for performing scheduling , clock selection , module selection , and resource allocation and assignment simultaneously with an aim of reducing the power consumption in the synthesized data path . the algorithm , which is based on an iterative improvement strategy , is capable of escaping local minima in its search for a low power solution . the algorithm considers diverse module libraries and complex scheduling constructs such as multicycling , chaining , and structural pipelining . we describe supply voltage and clock pruning strategies that significantly improve the efficiency of our algorithm by cutting down on the computational effort involved in exploring candidate supply voltages and clock periods that are unlikely to lead to the best solution . experimental results are reported to demonstrate the effectiveness of the algorithm . our techniques can be combined with other known methods of behavioral power optimization like data path replication and transformations , to result in a complete data path synthesis system for low power applications .", "iteration abstraction in sather . sather extends the notion of an iterator in a powerful new way . we argue that iteration abstractions belong in class interfaces on an equal footing with routines . sather iterators were derived from clu iterators but are much more flexible and better suited for object oriented programming . we retain the property that iterators are structured , i . e . , strictly bound to a controlling structured statement . we motivate and describe the construct along with several simple examples . we compare it with iteration based on clu iterators , cursors , riders , streams , series , generators , coroutines , blocks , closures , and lambda expressions . finally , we describe experiences with iterators in the sather compiler and libraries .", "the mean square discrepancy of randomized nets . one popular family of low <unk> sets is the ( t , m , s ) nets . recently a randomization of these nets that preserves their net property has been introduced . in this article a formula for the mean square l2 discrepancy of ( <digit> , m , s ) nets in base b is derived . this formula has a computational complexity of only o ( s log ( n ) s2 ) for large n or s , where bm is the number of points . moreover , the root mean square l2 discrepancy of ( <digit> , m , s ) nets is show to be o ( n <digit> log ( n ) ( s <digit> ) <digit> ) as n tends to infinity , the same asymptotic order as the known lower bound for the l2 discrepancy of an arbitrary set .", "analysis of bounded time warp and comparison with yawns . this article studies an analytic model of parallel discrete event simulation , comparing the yawns conservative synchronization protocol with bounded time warp . the assumed simulation problem is a heavily loaded queuing network where the probability of an idle server is closed to zero . we model workload and job routing in standard ways , then develop and validate methods for computing approximated performance measures as a function of the degree of optimism allowed , overhead costs of state saving , rollback , and barrier synchronization , and workload aggregation . we find that bounded time warp is superior when the number of servers per physical processor is low ( i . e . , sparse load ) , but that aggregating workload improves yawns relative performance .", "the block distributed memory model . <unk> introduce a computation model for developing and analyzing parallel algorithms on distributed memory machines . the model allows the design of algorithms using a single address space and does not assume any particular interconnection topology . we capture performance by incorporating a cost measure for interprocessor communication induced by remote memory accesses . the cost measure includes parameters reflecting memory latency , communication bandwidth , and spatial locality . our model allows the initial placement of the input data and pipelined prefetching . we use our model to develop parallel algorithms for various data rearrangement problems , load balancing , sorting , fft , and matrix multiplication . we show that most of these algorithms achieve optimal or near optimal communication complexity while simultaneously guaranteeing an optimal speed up in computational complexity . ongoing experimental work in testing and evaluating these algorithms has thus far shown very promising results .", "a necessary and sufficient condition for deadlock free routing in cut through and store and forward networks . <unk> paper develops the theoretical background for the design of deadlock free adaptive routing algorithms for virtual cut through and store and forward switching . this theory is valid for networks using either central buffers or edge buffers . some basic definitions and three theorems are proposed , developing conditions to verify that an adaptive algorithm is deadlock free , even when there are cyclic dependencies between routing resources . moreover , we propose a necessary and sufficient condition for deadlock free routing . also , a design methodology is proposed . it supplies fully adaptive , minimal and non minimal routing algorithms , guaranteeing that they are deadlock free . the theory proposed in this paper extends the necessary and sufficient condition for wormhole switching previously proposed by us . the resulting routing algorithms are more flexible than the ones for wormhole switching . also , the design methodology is much easier to apply because it automatically supplies deadlock free routing algorithms .", "localizing failures in distributed synchronization . <unk> fault tolerance of distributed algorithms is investigated in asynchronous message passing systems with undetectable process failures . two specific synchronization problems are considered , the dining philosophers problem and the binary committee coordination problem . the abstraction of a bounded doorway is introduced as a general mechanism for achieving individual progress and good failure locality . using it as a building block , optimal fault tolerant algorithms are constructed for the two problems .", "static assignment of stochastic tasks using majorization . <unk> consider the problem of statically assigning many tasks to a ( smaller ) system of homogeneous processors , where a task ' s structure is modeled as a branching process , all tasks are assumed to have identical behavior , and the tasks may synchronize frequently . we show how the theory of majorization can be used to obtain a partial order among possible task assignments . we show that if the vector of numbers of tasks assigned to each processor under one mapping is majorized by that of another mapping , then the former mapping is better than the latter with respect to a large number of objective functions . in particular , we show how the metrics of finishing time , the space time product , and reliability are all captured . we also apply majorization to the problem of partitioning a pool of processors for distribution among parallelizable tasks . limitations of the approach , which include the static nature of the assignment , are also discussed .", "an analysis of the average message overhead in replica control protocols . <unk> of replicated data has received considerable attention in the last few years . several replica control schemes have been proposed which work in the presence of both node and communication link failures . however , this resiliency to failure inflicts a performance penalty in terms of the communication overhead incurred . though the issue of performance of these schemes from the standpoint of availability of the system has been well addressed , the issue of message overhead has been limited to the analysis of worst case and best case message bounds . in this paper we derive expressions for computing the average message overhead of several well known replica control protocols and provide a comparative study of the different protocols with respect to both average message overhead and system availabilities .", "parallel divide and conquer on meshes . <unk> address the problem of mapping divide and conquer programs to mesh connected multicomputers with wormhole or store and forward routing . we propose the binomial tree as an efficient model of parallel divide and conquer and present two mappings of the binomial tree to the 2d mesh . our mappings exploit regularity in the communication structure of the divide and conquer computation and are also sensitive to the underlying flow control scheme of the target architecture . we evaluate these mappings using new metrics which are extensions of the classical notions of dilation and contention . we introduce the notion of communication slowdown as a measure of the total communication overhead incurred by a parallel computation . we conclude that significant performance gains can be realized when the mapping is sensitive to the flow control scheme of the target architecture .", "file access characteristics of parallel scientific workloads . <unk> improvements in the computational performance of multiprocessors have not been matched by comparable gains in i o system performance . this imbalance has resulted in i o becoming a significant bottleneck for many scientific applications . one key to overcoming this bottleneck is improving the performance of multiprocessor file systems . the design of a high performance multiprocessor file system requires a comprehensive understanding of the expected workload . unfortunately , until recently , no general workload studies of multiprocessor file systems have been conducted . the goal of the charisma project was to remedy this problem by characterizing the behavior of several production workloads , on different machines , at the level of individual reads and writes . the first set of results from the charisma project describe the workloads observed on an intel ipsc <digit> and a thinking machines cm <digit> . this paper is intended to compare and contrast these two workloads for an understanding of their essential similarities and differences , isolating common trends and platform dependent variances . using this comparison , we are able to gain more insight into the general principles that should guide multiprocessor file system design .", "parallelized direct execution simulation of message passing parallel programs . <unk> massively parallel computers proliferate , there is growing interest in finding ways by which performance of massively parallel codes can be efficiently predicted . this problem arises in diverse contexts such as parallelizing compilers , parallel performance monitoring , and parallel algorithm development . in this paper , we describe one solution where one directly executes the application code , but uses a discrete event simulator to model details of the presumed parallel machine , such as operating system and communication network behavior . because this approach is computationally expensive , we are interested in its own parallelization , specifically the parallelization of the discrete event simulator . we describe methods suitable for parallelized direct execution simulation of message passing parallel programs , and report on the performance of such a system , lapse ( large application parallel simulation environment ) , we have built on the intel paragon . on all codes measured to date , lapse predicts performance well , typically within <digit> % relative error . depending on the nature of the application code , we have observed low slowdowns ( relative to natively executing code ) and high relative speedups using up to <digit> processors .", "on tridiagonalizing and diagonalizing symmetric matrices with repeated eigenvalues . we describe a divide and conquer tridiagonalization approach for matrices with repeated eigenvalues . our algorithm hinges on the fact that , under easily constructively verifiable conditions , a symmetric matrix with band width b and k distinct eigenvalues must be block diagonal with diagonal blocks of size at most b k . a slight modification of the usual orthogonal band reduction algorithm allows us to reveal this structure , which then leads to potential parallelism in the form of independent diagonal blocks . compared to the usual householder reduction algorithm , the new approach exhibits improved data locality , significantly more scope for parallelism , and the potential to reduce arithmetic complexity by close to <digit> % for matrices that have only two numerically distinct eigenvalues . the actual improvement depends to a large extent on the number of distinct eigenvalues and a good estimate thereof . however , at worst the algorithms behave like a successive band reduction approach to tridiagonalization . moreover , we provide a numerically reliable and effective algorithm for computing the eigenvalue decomposition of a symmetric matrix with two numerically distinct eigenvalues . such matrices arise , for example , in invariant subspace decomposition approaches to the symmetric eigenvalue problem .", "an approximate minimum degree ordering algorithm . an approximate minimum degree ( amd ) ordering algorithm for preordering a symmetric sparse matrix prior to numerical factorization is presented . we use techniques based on the quotient graph for matrix factorization that allow us to obtain computationally cheap bounds for the minimum degree . we show that these bounds are often equal to the actual degree . the resulting algorithm is typically much faster than previous minimum degree ordering algorithms and produces results that are comparable in quality with the best orderings from other minimum degree algorithms .", "group invariance and convex matrix analysis . certain interesting classes of functions on a real inner product space are invariant under an associated group of orthogonal linear transformations . this invariance can be made explicit via a simple decomposition . for example , rotationally invariant functions on bf r <digit> are just even functions of the euclidean norm , and functions on the hermitian matrices ( with trace inner product ) which are invariant under unitary similarity transformations are just symmetric functions of the eigenvalues . we develop a framework for answering geometric and analytic ( both classical and nonsmooth ) questions about such a function by answering the corresponding question for the ( much simpler ) function appearing in the decomposition . the aim is to understand and extend the foundations of eigenvalue optimization , matrix approximation , and semidefinite programming .", "an analytical model for designing memory hierarchies . <unk> hierarchies have long been studied by many means system building , trace driven simulation , and mathematical analysis . yet little help is available for the system designer wishing to quickly size the different levels in a memory hierarchy to a first order approximation . in this paper , we present a simple analysis for providing this practical help and some unexpected results and intuition that come out of the analysis . by applying a specific , parameterized model of workload locality , we are able to derive a closed form solution for the optimal size of each hierarchy level . we verify the accuracy of this solution against exhaustive simulation with two case studies a three level i o storage hierarchy and a three level processor cache hierarchy . in all but one case , the configuration recommended by the model performs within <digit> % of optimal . one result of our analysis is that the first place to spend money is the cheapest ( rather than the fastest ) cache level , particularly with small system budgets . another is that money spent on an n level hierarchy is spent in a fixed proportion until another level is added .", "a persistent rescheduled page cache for low overhead object code compatibility in vliw architectures . object code compatibility between processor generations is an open issue for vliw architectures . a potential solution is a technique termed dynamic rescheduling , which performs run time software rescheduling at the first time page faults . the time required for rescheduling the pages constitutes a large portion of the overhead of this method . a disk caching scheme that uses a persistent rescheduled page cache ( prc ) is presented . the scheme reduces the overhead associated with dynamic rescheduling by saving rescheduled pages on disk , across program executions . operating system support is required for dynamic rescheduling and management of the prc . the implementation details for the prc are discussed . results of simulations used to gauge the effectiveness of prc indicate that the prc is effective in reducing the overhead of dynamic rescheduling and due to different overhead requirements of programs , a split prc organization performs better than a unified prc . the unified prc was studied for two different page replacement policies lru and overhead based replacement . it was found that with lru replacement , all the programs consistently perform better with increasing prc sizes , but the high overhead programs take a consistent performance hit compared to the low overhead programs . with overhead based replacement , the performance of high overhead programs improves substantially , while the low overhead programs perform only slightly worse than in the case of the lru replacement .", "profile driven instruction level parallel scheduling with application to super blocks . code scheduling to exploit instruction level parallelism ( ilp ) is a critical problem in compiler optimization research in light of the increased use of long instruction word machines . unfortunately optimum scheduling is computationally intractable , and one must resort to carefully crafted heuristics in practice . if the scope of application of a scheduling heuristic is limited to basic blocks , considerable performance loss may be incurred at block boundaries . to overcome this obstacle , basic blocks can be coalesced across branches to form larger regions such as super blocks . in the literature , these regions are typically scheduled using algorithms that are either oblivious to profile information ( under the assumption that the process of forming the region has fully utilized the profile information ) , or use the profile information as an addendum to classical scheduling techniques . we believe that even for the simple case of linear code regions such as super blocks , additional performance improvement can be gained by utilizing the profile information in scheduling as well . we propose a general paradigm for converting any profile insensitive list scheduler to a profile sensitive scheduler . our technique is developed via a theoretical analysis of a simplified abstract model of the general problem of profile driven scheduling over any acyclic code region , yielding a scoring measure for ranking branch instructions .", "modulo scheduling of loops in control intensive non numeric programs . much of the previous work on modulo scheduling has targeted numeric programs , in which , often , the majority of the loops are well behaved loop counter based loops without early exits . in control intensive non numeric programs , the loops frequently have characteristics that make it more difficult to effectively apply modulo scheduling . these characteristics include multiple control flow paths , loops that are not based on a loop counter , and multiple exits . in these loops , the presence of unimportant paths with high resource usage or long dependence chains can penalize the important paths . a path that contains a hazard such as another nested loop can prohibit modulo scheduling of the loop . control dependences can severely restrict the overlap of the blocks within and across iterations . this paper describes a set of methods that allow effective modulo scheduling of loops with multiple exits . the techniques include removal of control dependences to enable speculation , extensions to modulo variable expansion , and a new epilogue generation scheme . these methods can be used with superblock and hyperblock techniques to allow modulo scheduling of the selected paths of loops with arbitrary control flow . a case study is presented to show how these methods , combined with superblock techniques , enable modulo scheduling to be effectively applied to control intensive non numeric programs . performance results for several spec cint92 benchmarks and unix utility programs are reported and demonstrate the applicability of modulo scheduling to this class of programs .", "assigning confidence to conditional branch predictions . many high performance processors predict conditional branches and consume processor resources based on the prediction . in some situations , resource allocation can be better optimized if a confidence level is assigned to a branch prediction i . e . if the quantity of resources allocated is a function of the confidence level . to support such optimizations , we consider hardware mechanisms that partition conditional branch predictions into two sets those which are accurate a relatively high percentage of the time , and those which are accurate a relatively low percentage of the time . the objective is to concentrate as many of the mispredictions as practical into a relatively small set of low confidence dynamic branches . we first study an ideal method that profiles branch predictions and sorts static branches into high and low confidence sets , depending on the accuracy with which they are dynamically predicted . we find that about <digit> percent of the mispredictions can be localized to a set of static branches that account for <digit> percent of the dynamic branches . we then study idealized dynamic confidence methods using both one and two levels of branch correctness history . we find that the single level method performs at least as well as the more complex two level method and is able to isolate <digit> percent of the mispredictions into a set containing <digit> percent of the dynamic branches . finally , we study practical , less expensive implementations and find that they achieve most of the performance of the idealized methods .", "instruction fetch mechanisms for vliw architectures with compressed encodings . vliw architectures use very wide instruction words in conjunction with high bandwidth to the instruction cache to achieve multiple instruction issue . this report uses the tinker experimental testbed to examine instruction fetch and instruction cache mechanisms for vliws . a compressed instruction encoding for vliws is defined and a classification scheme for i fetch hardware for such an encoding is introduced . several interesting cache and i fetch organizations are described and evaluated through trace driven simulations . a new i fetch mechanism using a silo cache is found to have the best performance .", "estimating optical flow in segmented images using variable order parametric models with local deformations . <unk> paper presents a new model for estimating optical flow based on the motion of planar regions plus local deformations . the approach exploits brightness information to organize and constrain the interpretation of the motion by using segmented regions of piecewise smooth brightness to hypothesize planar regions in the scene . parametric flow models are estimated in these regions in a two step process which first computes a coarse fit and estimates the appropriate parameterization of the motion of the region ( two , six , or eight parameters ) . the initial fit is refined using a generalization of the standard area based regression approaches . since the assumption of planarity is likely to be violated , we allow local deformations from the planar assumption in the same spirit as physically based approaches which model shape using coarse parametric models plus local deformations . this parametric deformation model exploits the strong constraints of parametric approaches while retaining the adaptive nature of regularization approaches . experimental results on a variety of images indicate that the parametric deformation model produces accurate flow estimates while the incorporation of brightness segmentation provides precise localization of motion boundaries .", "scale space properties of quadratic feature detectors . <unk> detectors using a quadratic nonlinearity in the filtering stage are known to have some advantages over linear detectors here , we consider their scale space properties . in particular , we investigate whether , like linear detectors , quadratic feature detectors permit a scale selection scheme with the causality property , which guarantees that features are never created as scale is coarsened . we concentrate on the design most common in practice , i . e . , one dimensional detectors with two constituent filters , with scale selection implemented as convolution with a scaling function . we consider two special cases of interest constituent filter pairs related by the hilbert transform , and by the first spatial derivative . we show that , under reasonable assumptions , hilbert pair quadratic detectors can not have the causality property . in the case of derivative pair detectors , we describe a family of scaling functions related to fractional derivatives of the gaussian that are necessary and sufficient for causality . in addition , we report experiments that show the effects of these properties in practice . thus we show that at least one class of quadratic feature detectors has the same desirable scaling property as the more familiar detectors based on linear filtering .", "a framework for resource constrained rate optimal software pipelining . <unk> rapid advances in high performance computer architecture and compilation techniques provide both challenges and opportunities to exploit the rich solution space of software pipelined loop schedules . in this paper , we develop a framework to construct a software pipelined loop schedule which runs on the given architecture ( with a fixed number of processor resources ) at the maximum possible iteration rate ( la rate optimal ) while minimizing the number of <unk> close approximation to minimizing the number of registers . the main contributions of this paper are first , we demonstrate that such problem can be described by a simple mathematical formulation with precise optimization objectives under a periodic linear scheduling framework . the mathematical formulation provides a clear picture which permits one to visualize the overall solution space ( for rate optimal schedules ) under different sets of constraints . secondly , we show that a precise mathematical formulation and its solution does make a significant performance difference . we evaluated the performance of our method against three leading contemporary heuristic methods . experimental results show that the method described in this paper performed significantly better than these methods . the techniques proposed in this paper are useful in two different ways <digit> ) as a compiler option which can be used in generating faster schedules for performance critical loops ( if the interested users are willing to trade the cost of longer compile time with faster runtime ) . <digit> ) as a framework for compiler writers to evaluate and improve other heuristics based approaches by providing quantitative information as to where and how much their heuristic methods could be further improved .", "on the fully commutative elements of coxeter groups . let w be a coxeter group . we define an element w w to be fully commutative if any reduced expression for w can be obtained from any other by means of braid relations that only involve commuting generators . we give several combinatorial characterizations of this property , classify the coxeter groups with finitely many fully commutative elements , and classify the parabolic quotients whose members are all fully commutative . as applications of the latter , we classify all parabolic quotients with the property that ( <digit> ) the bruhat ordering is a lattice , ( <digit> ) the bruhat ordering is a distributive lattice , ( <digit> ) the weak ordering is a distributive lattice , and ( <digit> ) the weak ordering and bruhat ordering coincide .", "analytical delay models for vlsi interconnects under ramp input . elmore delay has been widely used as an analytical estimate of interconnect delays in the performance driven synthesis and layout of vlsi routing topologies . however , for typical rlc interconnections with ramp input , elmore delay can deviate by up to <digit> % or more from spice computed delay since it is independent of rise time of the input ramp signal . we develop new analytical delay models based on the first and second moments of the interconnect transfer function when the input is a ramp signal with finite rise time . delay estimates using our first moment based analytical models are within <digit> % of spice computed delay , and models based on both first and second moments are within <digit> . <digit> % of spice , across a wide range of interconnect parameter values . evaluation of our analytical models is several orders of magnitude faster than simulation using spice . we also describe extensions of our approach for estimation of source sink delays in arbitrary interconnect trees .", "register transfer level estimation techniques for switching activity and power consumption . we present techniques for estimating switching activity and power consumption in register transfer level ( rtl ) circuits . previous work on this topic has ignored the presence of glitching activity at various data path and control signals , which can lead to significant underestimation of switching activity . for data path blocks that operate on word level data , we construct piecewise linear models that capture the variation of output glitching activity and power consumption with various word level parameters like mean , standard deviation , spatial and temporal correlations , and glitching activity at the block ' s inputs . for rtl blocks that operate on data that need not have an associated word level value , we present accurate bit level modeling techniques for glitching activity as well as power consumption . this allows us to perform accurate power estimation for control flow intensive circuits , where most of the power consumed is dissipated in non arithmetic components like multiplexers , registers , vector logic operators , etc . since the final implementation of the controller is not available during high level design iterations , we develop techniques that estimate glitching activity at control signals using control expressions and partial delay information . experiments on example rtl designs resulted in power estimates that were within <digit> % of those produced by an inhouse power analysis tool on the final gate level implementation .", "an efficient approach to simultaneous transistor and interconnect sizing . in this paper , we study the simultaneous transistor and interconnect sizing ( stis ) problem . we define a class of optimization problems as ch posynomial programs and reveal a general dominance property for all ch posynomial programs . we show that the stis problems under a number of transistor delay models are ch posynomial programs and propose an efficient and near optimal stis algorithm based on the dominance property . when used to solve the simultaneous driver buffer and wire sizing problem for real designs , it reduces the maximum delay by up to <digit> . <digit> % , and more significantly , reduces the power consumption by a factor of <digit> . 63x , when compared with the original designs . when used to solve the transistor sizing problem , it achieves a smooth area delay trade off . moreover , the algorithm optimizes a clock net of <digit> drivers buffers and <digit> spl mu m long wire in <digit> seconds , and a <digit> bit adder with <digit> transistors in <digit> seconds on a sparc <digit> workstation .", "vlsi circuit partitioning by cluster removal using iterative improvement techniques . move based iterative improvement partitioning methods such as the fiduccia mattheyses ( fm ) algorithm and krishnamurthy ' s look ahead ( la ) algorithm are widely used in vlsi cad applications largely due to their time efficiency and ease of implementation . this class of algorithms is of the local improvement type . they generate relatively high quality results for small and medium size circuits . however , as vlsi circuits become larger , these algorithms are not so effective on them as direct partitioning tools . we propose new iterative improvement methods that select cells to move with a view to moving clusters that straddle the two subsets of a partition into one of the subsets . the new algorithms significantly improve partition quality while preserving the advantage of time efficiency . experimental results on <digit> medium to large size acm sigda benchmark circuits show up to <digit> % improvement over fm in cutsize , with an average of per circuit percent improvements of about <digit> % , and a total cut improvement of about <digit> % . they also outperform the recent placement based partitioning tool paraboli and the spectral partitioner melo by about <digit> % and <digit> % , respectively , with less cpu time . this demonstrates the potential of iterative improvement algorithms in dealing with the increasing complexity of modern vlsi circuitry .", "implementing fail silent nodes for distributed systems . abstracta fail silent node is a self checking node that either functions correctly or stops functioning after an internal failure is detected . such a node can be constructed from a number of conventional processors . in a software implemented fail silent node , the nonfaulty processors of the node need to execute message order and comparison protocols to keep in step and check each other , respectively . in this paper , the design and implementation of efficient protocols for a two processor fail silent node are described in detail . the performance figures obtained indicate that in a wide class of applications requiring a high degree of fault tolerance , software implemented fail silent nodes constructed simply by utilizing standard off the shelf components are an attractive alternative to their hardware implemented counterparts that do require special purpose hardware components , such as fault tolerant clocks , comparator , and bus interface circuits .", "the strict time lower bound and optimal schedules for parallel prefix with resource constraints . <unk> computation is a basic operation at the core of many important applications , e . g . , some of the grand challenge problems , circuit design , digital signal processing , graph optimizations , and computational geometry . <digit> in this paper , we present new and strict time optimal parallel schedules for prefix computation with resource constraints under the concurrent read exclusive write ( crew ) parallel random access machine ( pram ) model . for prefix of n elements on p processors ( p independent of n ) when n > p ( p <digit> ) <digit> , we derive harmonic schedules that achieve the strict optimal time ( steps ) , left lceil <digit> left ( n <digit> right ) mathord left vphantom <digit> left ( n <digit> right ) left ( p <digit> right ) right . kern nulldelimiterspace left ( p <digit> right ) right rceil . we also derive pipelined schedules that have better program space efficiency than the harmonic schedule , yet only require a small constant number of steps more than the optimal time achieved by the harmonic schedule . both the harmonic schedules and the pipelined schedules are simple and easy to implement . for prefix of n elements on p processors ( p independent of n ) where np ( p <digit> ) <digit> , the harmonic schedules are not time optimal . for these cases , we establish an optimization method for determining key parameters of time optimal schedules , based on connections between the structure of parallel prefix and pascal ' s triangle . using the derived parameters , we devise an algorithm to construct such schedules . for a restricted class of values of n and p , we prove that the constructed schedules are strictly time optimal . we also give strong empirical evidence that our algorithm constructs strict time optimal schedules for all cases where np ( p", "latch optimization in circuits generated from high level descriptions . in a gate level description of a finite state machine ( fsm ) , there is a tradeoff between the number of latches and the size of the logic implementing the next state and output functions . typically , an initial implementation is generated via explicit state assignment or translation from a high level language , and the tradeoff is subsequently only lightly explored . we efficiently explore good latch logic tradeoffs for large designs generated from high level specifications . we reduce the number of latches while controlling the logic size . we demonstrate the efficacy of our techniques on some large industrial examples .", "rigidity checking of 3d point correspondences under perspective projection . <unk> algorithm is described which rapidly verifies the potential rigidity of three dimensional point correspondences from a pair of two dimensional views under perspective projection . the output of the algorithm is a simple yes or no answer to the question could these corresponding points from two views be the projection of a rigid configuration potential applications include 3d object recognition from a single previous view and correspondence matching for stereo or motion over widely separated views . the rigidity checking problem is different from the structure from motion problem because it is often the case that two views can not provide an accurate structure from motion estimate due to ambiguity and ill conditioning , whereas it is still possible to give an accurate yes no answer to the rigidity question . rigidity checking verifies point correspondences using 3d recovery equations as a matching condition . the proposed algorithm improves upon other methods that fall under this approach because it works with as few as six corresponding points under full perspective projection , handles correspondences from widely separated views , makes full use of the disparity of the correspondences , and is integrated with a linear algorithm for 3d recovery due to <unk> . results are given for experiments with synthetic and real image data . a complete implementation of this algorithm is being made publicly available .", "real time focus range sensor . <unk> of dynamic scenes can only be recovered using a real time range sensor . depth from defocus offers an effective solution to fast and dense range estimation . however , accurate depth estimation requires theoretical and practical solutions to a variety of problems including recovery of textureless surfaces , precise blur estimation , and magnification variations caused by defocusing . both textured and textureless surfaces are recovered using an illumination pattern that is projected via the same optical path used to acquire images . the illumination pattern is optimized to maximize accuracy and spatial resolution in computed depth . the relative blurring in two images is computed using a narrow band linear operator that is designed by considering all the optical , sensing , and computational elements of the depth from defocus system . defocus invariant magnification is achieved by the use of an additional aperture in the imaging optics . a prototype focus range sensor has been developed that has a workspace of <digit> cubic foot and produces up to <digit> <digit> depth estimates at hz with an average rms error of <digit> . <digit> % . several experimental results are included to demonstrate the performance of the sensor .", "motion estimation with quadtree splines . <unk> paper presents a motion estimation algorithm based on a new multiresolution representation , the quadtree spline . this representation describes the motion field as a collection of smoothly connected patches of varying size , where the patch size is automatically adapted to the complexity of the underlying motion . the topology of the patches is determined by a quadtree data structure , and both split and merge techniques are developed for estimating this spatial subdivision . the quadtree spline is implemented using another novel representation , the adaptive hierarchical basis spline , and combines the advantages of adaptively sized correlation windows with the speedups obtained with hierarchical basis preconditioners . results are presented on some standard motion sequences .", "an application of petri net reduction for ada tasking deadlock analysis . <unk> part of our continuing research on using petri nets to support automated analysis of ada tasking behavior , we have investigated the application of petri net reduction for deadlock analysis . although reachability analysis is an important method to detect deadlocks , it is in general inefficient or even intractable . net reduction can aid the analysis by reducing the size of the net while preserving relevant properties . we introduce a number of reduction rules and show how they can be applied to ada nets , which are automatically generated petri net models of ada tasking . we define a reduction process and a method by which a useful description of a detected deadlock state can be obtained from the reduced net ' s information . a reduction tool and experimental results from applying the reduction process are discussed .", "detection of strong unstable predicates in distributed programs . <unk> paper discusses detection of global predicates in a distributed program . a run of a distributed program results in a set of sequential traces , one for each process . these traces may be combined to form many global sequences consistent with the single run of the program . a strong global predicate is true in a run if it is true for all global sequences consistent with the run . we present algorithms which detect if the given strong global predicate became true in a run of a distributed program . our algorithms can be executed on line as well as off line . moreover , our algorithms do not assume that underlying channels satisfy fifo ordering .", "generation of high quality tests for robustly untestable path delay faults . <unk> many designs a large portion of path delay faults is not robustly testable . in this paper , we investigate testing strategies for robustly untestable faults . we show that the quality of nonrobust tests may be very poor in detecting small defects caused by manufacturing process variation . we demonstrate that better quality nonrobust tests can be obtained by including timing information into the process of test generation . a good nonrobust test can tolerate larger timing variations on the off inputs . we also show that not all <unk> untestable path delay faults may be ignored in high quality delay testing . functional sensitizable paths are <unk> untestable but , under some faulty conditions , may degrade the performance of the circuit . however , up till now , there was no strategy for generating tests for such faults . in this paper , we present algorithms for generating high quality nonrobust and functional sensitizable tests . we also devise an algorithm for generating tests for validatable nonrobust faults which have a high quality in detecting defects but are hard to be generated automatically . our experimental results show that the quality of delay testing increases if validatable and high quality nonrobust tests , as well as tests for functional sensitizable path delay faults are included .", "stability radii of systems with stochastic uncertainty and their optimization by output feedback . we consider linear plants controlled by dynamic output feedback which are subjected to <unk> stochastic parameter perturbations . the stability radii of these systems are characterized , and it is shown that , for real data , the real and the complex stability radii coincide . a corresponding result does not hold in the deterministic case , even for perturbations of single output feedback type . in a second part of the paper we study the problem of optimizing the stability radius by dynamic linear output feedback . necessary and sufficient conditions are derived for the existence of a compensator which achieves a suboptimal stability radius . these conditions consist of a parametrized riccati equation , a parametrized liapunov inequality , a coupling inequality , and a number of linear matrix inequalities ( one for each disturbance term ) . the corresponding problem in the deterministic case , the optimal mu synthesis problem , is still unsolved .", "finite difference preconditioning for solving orthogonal collocation equations for boundary value problems . a technique to construct a low order finite difference preconditioner for solving orthogonal collocation equations for boundary value problems is presented . it is shown numerically and theoretically that the spectral condition numbers of the preconditioned collocation matrices are bounded by constants independent of the number of mesh nodes when certain exact low order finite difference preconditionings are used . preconditioners based on incomplete lu factorization are also discussed . numerical experiments show the efficiency and robustness of the preconditioning .", "an evolutionary approach to constructing effective software reuse repositories . repositories for software reuse are faced with two interrelated problems ( <digit> ) acquiring the knowledge to initially construct the repository and ( <digit> ) modifying the repository to meet the evolving and dynamic needs of software development organizations . current software repository methods rely heavily on classification , which exacerbates <unk> and evolution problems by requiring costly classification and domain analysis efforts before a repository can be used effectively , this article outlines an approach that avoids these problems by choosing a retrieval method that utilizes minimal repository structure to effectively support the process of finding software <unk> . the approach is demonstrated through a pair of proof of concept prototypes peel , a tool to semiautomatically identify reusable components , and codefinder , a retrieval system that compensates for the lack of explicit knowledge structures through a spreading activation retrieval process . codefinder also allows component representations to be modified while users are searching for information . this mechanism adapts to the changing nature of the information in the repository and incrementally improves the repository while people use it . the combination of these techniques holds potential for designing software repositories that minimize up front costs , effectively support the search process , and evolve with an organization ' s changing needs .", "a graduated assignment algorithm for graph matching . abstracta graduated assignment algorithm for graph matching is presented which is fast and accurate even in the presence of high noise . by combining graduated nonconvexity , two way ( assignment ) constraints , and sparsity , large improvements in accuracy and speed are achieved . its low order computational complexity o ( lm ) , where l and m are the number of links in the two graphs and robustness in the presence of noise offer advantages over traditional combinatorial approaches . the algorithm , not restricted to any special class of graph , is applied to subgraph isomorphism , weighted graph matching , and attributed relational graph matching . to illustrate the performance of the algorithm , attributed relational graphs derived from objects are matched . then , results from twenty five thousand experiments conducted on <digit> node random graphs of varying types ( graphs with only zero one links , weighted graphs , and graphs with node attributes and multiple link types ) are reported . no comparable results have been reported by any other graph matching algorithm before in the research literature . twenty five hundred control experiments are conducted using a relaxation labeling algorithm and large improvements in accuracy are demonstrated .", "a first order isomorphism theorem . we show that for most complexity classes of interest , all sets complete under first order projections ( fops ) are isomorphic under first order isomorphisms . that is , a very restricted version of the berman hartmanis conjecture holds . since natural complete problems seem to stay complete via fops , this indicates that up to first order isomorphism there is only one natural complete problem for each nice complexity class .", "stochastic scheduling with variable profile and precedence constraints . in this paper , we consider the stochastic profile scheduling problem of a partially ordered set of tasks on uniform processors . the set of available processors varies in time . the running times of the tasks are independent random variables with exponential distributions . we obtain a sufficient condition under which a list policy stochastically minimizes the makespan within the class of preemptive policies . this result allows us to obtain a simple optimal policy when the partial order is an interval order , an in forest , or an out forest .", "on bounded queries and approximation . this paper investigates the computational complexity of approximating several np optimization problems using the number of queries to an np oracle as a complexity measure . the results show a tradeoff between the closeness of the approximation and the number of queries required . for an approximation factor k ( n ) , log log k ( n ) n queries to an np oracle can be used to approximate the maximum clique size of a graph within a factor of k ( n ) . however , this approximation can not be achieved using fewer than log log k ( n ) n c queries to any oracle unless is a constant that does not depend on k . these results hold for approximation factors k ( n ) geq <digit> that belong to a class of functions which includes any integer constant function , log n , log a n , and n <digit> a . similar results are obtained for graph coloring , set cover , and other np optimization problems .", "resource bounds for self stabilizing message driven protocols . self stabilizing message driven protocols are defined and discussed . the class weak exclusion that contains many natural tasks such as ell exclusion and token passing is defined , and it is shown that in any execution of any self stabilizing protocol for a task in this class , the configuration size must grow at least in a logarithmic rate . this last lower bound is valid even if the system is supported by a time out mechanism that prevents communication deadlocks . then we present three self stabilizing message driven protocols for token passing . the rate of growth of configuration size for all three protocols matches the aforementioned lower bound . our protocols are presented for two processor systems but can be easily adapted to rings of arbitrary size . our results have an interesting interpretation in terms of automata theory .", "universal wormhole routing . <unk> this paper , we examine the wormhole routing problem in terms of the congestion c and dilation d for a set of packet paths . we show , with mild restrictions , that there is a simple randomized algorithm for routing any set of p packets in o left ( cd eta cl eta , , rm log , , p right ) time with high probability , where l is the number of flits in a packet , and only a constant number of flits are stored in each queue at any time . using this result , we show that a fat tree network of area ( a ) can simulate wormhole routing on any network of comparable area with o ( <unk> ) slowdown , when all worms have the same length . variable length worms are also considered . we run some simulations on the fat tree which show that not only does wormhole routing tend to perform better than the more heavily studied store and forward routing in this context , but that performance superior to our provable bound is attainable in practice .", "reducing communication latency with path multiplexing in optically interconnected multiprocessor systems . <unk> communication latency , which is a performance bottleneck in optically interconnected multiprocessor systems , is of prominent importance . a conventional approach for establishing connections in multiplexed networks uses a set of independent time slots ( or virtual channels ) along a path for each connection . this approach requires the use of switching devices capable of interchanging time slots , and thus introduces latency in addition to hardware and control complexity . in this paper , we propose an approach to all optical time division multiplexed ( tdm ) communications in multiprocessor systems . the idea is to establish a connection along a path using a set of time slots ( or virtual channels ) that are dependent on each other , so that no time slot interchanging is required . we compare the proposed approach with the conventional one in terms of the overall communication latency . we found that , despite the possibility that establishing a connection may take a longer time , the proposed approach will result in lower overall communication latency as it eliminates the delays introduced by the time slot interchanging switching devices .", "a general method for maximizing the error detecting ability of distributed algorithms . <unk> bound on component failures and their spatial distribution govern the fault tolerance of any candidate error detecting algorithm . for distributed memory multiprocessors , the specific algorithm and the topology of the processor interconnection network define these bounds . this paper introduces the maximal fault index , derived from the system topology and local communication patterns , to demonstrate how a maximal number of simultaneous component failures can be tolerated for a particular interconnection network and error detecting algorithm . the index is used to design a mapping of processes to processor groups such that the error detecting ability of the algorithm is preserved for certain multiple simultaneous processor failures .", "on runtime parallel scheduling for processor load balancing . <unk> scheduling is a new approach for load balancing . in parallel scheduling , all processors cooperate to schedule work . parallel scheduling is able to accurately balance the load by using global load information at compile time or runtime . it provides high quality load balancing . this paper presents an overview of the parallel scheduling technique . scheduling algorithms for tree , hypercube , and mesh networks are presented . these algorithms can fully balance the load and maximize locality at runtime . communication costs are significantly reduced compared to other existing algorithms .", "an empirical evaluation of performance memory trade offs in time warp . <unk> performance of the time warp mechanism is experimentally evaluated when only a limited amount of memory is available to the parallel computation . an implementation of the cancelback protocol is used for memory management on a shared memory architecture , viz . , ksr to evaluate the performance vs . memory tradeoff . the implementation of the cancelback protocol supports canceling back more than one memory object when memory has been exhausted ( the precise number is referred to as the salvage parameter ) and incorporates a non work conserving processor scheduling technique to prevent starvation . several synthetic and benchmark programs are used that provide interesting stress cases for evaluating the limited memory behavior . the experiments are extensively monitored to determine the extent to which various factors may affect performance . several observations are made by analyzing the behavior of time warp under limited memory <digit> ) depending on the available memory and asymmetry in the workload , canceling back several memory objects at one time ( i . e . , a salvage parameter value of more than one ) improves performance significantly , by reducing certain overheads . however , performance is relatively insensitive to the salvage parameter except at extreme values . <digit> ) the speedup vs . memory curve for time warp programs has a well defined knee before which speedup increases very rapidly with memory and beyond which there is little performance gain with increased memory . performance nearly equivalent to that with large amounts of memory can be achieved with only a modest amount of additional memory beyond that required for sequential execution , if memory management overheads are small compared to the event granularity . these results indicate that contrary to the common belief , memory usage by time warp can be controlled within reasonable limits without any significant loss of performance .", "crash resilient communication in dynamic networks . <unk> end to end data delivery protocol for dynamic communication networks is presented . the protocol uses bounded sequence numbers and can tolerate both link failures and ( intermediate ) processor crashes . previous bounded end to end protocols could not tolerate crashes . we present a self stabilizing version of the algorithm that can recover from crashes of the sender and the receiver as well as of intermediate processors . starting with the network in an arbitrary state , the self stabilizing version guarantees proper transmission of messages following a finite convergence period .", "a graph partitioning approach to sequential diagnosis . <unk> paper describes a generalized sequential diagnosis algorithm whose analysis leads to strong diagnosability results for a variety of multiprocessor interconnection topologies . the overall complexity of this algorithm in terms of total testing and syndrome decoding time is linear in the number of edges in the interconnection graph and the total number of iterations of diagnosis and repair needed by the algorithm is bounded by the diameter of the interconnection graph . the degree of diagnosability of this algorithm for a given interconnection graph is shown to be directly related to a graph parameter which we refer to as the partition number . we approximate this graph parameter for several interconnection topologies and thereby obtain lower bounds on degree of diagnosability achieved by our algorithm on these topologies . if we let n denote total number of vertices in the interconnection graph and denote the maximum degree of any vertex in it , then our results may be summarized as follows . we show that a symmetric d dimensional grid graph is sequentially omega left ( n d over d <digit> right ) diagnosable for any fixed d . for hypercubes , <unk> log n dimensional grid graphs , it is shown that our algorithm leads to a surprising omega left ( n , rm log , log , n over log , n right ) degree of diagnosability . next we show that the degree of diagnosability of an arbitrary interconnection graph by our algorithm is omega left ( sqrt n over delta right ) . this bound translates to an omega left ( sqrt n right ) degree of diagnosability for cube connected cycles and an omega left ( sqrt n over k right ) degree of diagnosability for k ary trees . finally , we augment our algorithm with another algorithm to show that every topology is omega left ( n <digit> over <digit> right ) diagnosable .", "a traffic balanced adaptive wormhole routing scheme for two dimensional meshes . <unk> this paper , we analyze several issues involved in developing low latency adaptive wormhole routing schemes for two dimensional meshes . it is observed that along with adaptivity , balanced distribution of traffic has a significant impact on the system performance . motivated by this observation , we develop a new fully adaptive routing algorithm called positive first negative first for two dimensional meshes . the algorithm uses only two virtual channels per physical channel creating two virtual networks . the messages are routed positive first in one virtual network and negative first in the other . because of this combination , the algorithm distributes the system load uniformly throughout the network and is also fully adaptive . it is shown that the proposed algorithm results in providing better performance in terms of the average network latency and throughput when compared with the previously proposed routing algorithms .", "control and energy consumption in communications for nomadic computing . <unk> consider the problem of communications over a wireless channel in support of data transmissions from the perspective of small portable devices that must rely on limited battery energy . we model the channel outages as statistically correlated errors . classic arq strategies are found to lead to a considerable waste of energy , due to the large number of transmissions . the use of finite energy sources in the face of dependent channel errors leads to new protocol design criteria . as an example , a simple probing scheme , which slows down the transmission rate when the channel is impaired , is shown to be more energy efficient , with a slight loss in throughput . a modified scheme that yields slightly better performance but requires some additional complexity is also studied . some references on the modeling of battery cells are discussed to highlight the fact that battery charge capacity is strongly influenced by the available relaxation time between current pulses . a formal approach that can track complex models for power sources , including dynamic charge recovery , is also developed .", "improving nfs performance over wireless links . <unk> is a widely used remote file access protocol that has been tuned to perform well on traditional lans which exhibit low error rates . users migrating to mobile hosts would like continued remote file access via nfs . however , low bandwidth and high error rates degrade performance on mobile hosts using wireless links , hindering the use of nfs . we conducted experiments to study the behavior of nfs in a wireless testbed . based on these experiments , we incorporated modifications into the mobile nfs client . this paper presents two mechanisms which improve nfs performance over wireless links an aggressive nfs client and link level retransmissions . our experiments show that these mechanisms improve response time by up to <digit> % , which brings the performance to within <digit> % of that obtained in zero error conditions .", "an efficient protocol for call setup and path migration in ieee <digit> . <digit> based personal communication networks . <unk> , dqdb ( ieee <digit> . <digit> ) man has been proposed as a component of personal communication networks , in which base stations of wireless infrastructures are connected by a number of <unk> which in turn are connected via bridges . we propose a protocol for call setup and path migration in a cluster of <unk> . the protocol uses a link state like routing method for path selection and a source routing based scheme for path establishment . in addition , we propose a labeling scheme that makes it possible to carry the path information needed by the source routing protocol in a single <digit> octet dqdb slot . without such a labeling scheme , source routing would be inefficient for our purpose .", "centralized and decentralized supervisory control of nondeterministic systems under partial observation . in this paper we extend our earlier work on supervisory control of nondeterministic systems using prioritized synchronization as the mechanism of control and trajectory model as the modeling formalism by considering design of supervisors under partial observation . we introduce the notion of observation compatible systems and show that prioritized synchronous composition ( psc ) of observation compatible systems can be used as a mechanism of control of nondeterministic systems under partial observation in presence of driven events . necessary and sufficient conditions that depend on the trajectory model as opposed to the language model of the plant are obtained for the existence of centralized as well as decentralized supervision . our work on centralized control shows that the results of the traditional supervisory control can be extended to the above setting , provided that the supervisor is deterministic and the observation mask is projection type . on the other hand , our work on decentralized control is based on a new relation between controllability , observability , co observability , and psc that we derive in this paper .", "a predictor corrector algorithm for a class of nonlinear saddle point problems . an interior path following algorithm is proposed for solving the nonlinear saddle point problem rm minimax c tx ph ( x ) b ty psi ( y ) y tax <unk> <unk> rm subject to ( x , y ) in x ti y su r n ti r m , <unk> where ph ( x ) and ps ( y ) are smooth convex functions and x and y are boxes ( hyperrectangles ) . this problem is closely related to the models in stochastic programming and optimal control studied by rockafellar and wets ( math . programming studies , <digit> ( <digit> ) , pp . <digit> <digit> siam j . control optim . , <digit> ( <digit> ) , pp . <digit> <digit> ) . existence and error bound results on a central path are derived . starting from an initial solution near the central path with duality gap o ( mu ) , the algorithm finds an ep optimal solution of the problem in o ( sqrt m n , log mu ep ) iterations if both ph ( x ) and ps ( y ) satisfy a scaled lipschitz condition .", "recent developments in high level synthesis . we survey recent developments in high level synthesis technology for vlsi design . the need for higher level design automation tools are discussed first . we then describe some basic techniques for various subtasks of high level synthesis . techniques that have been proposed in the past few years ( since <digit> ) for various subtasks of high level synthesis are surveyed . we also survey some new synthesis objectives including testability , power efficiency , and reliability .", "complete orthogonal decomposition for weighted least squares . this paper proposes a complete orthogonal decomposition ( cod ) algorithm for solving weighted least squares problems . in applications , the weight matrix can be highly ill conditioned , and this can cause standard methods like qr factorization to return inaccurate answers in floating point arithmetic . stewart and todd independently established a norm bound for the weighted least squares problem that is independent of the weight matrix . vavasis proposed a definition of a stable solution of weighted least squares based on this norm bound the solution computed by a stable algorithm must satisfy an accuracy bound that is not affected by ill conditioning in the weight matrix . a forward error analysis shows that the cod algorithm is stable in this sense , but it is simpler and more efficient than the algorithm proposed by vavasis . our forward error bound is contrasted to the backward error analysis of other previous works on weighted least squares ."]}